===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/index.tsx===
import { useTheme } from '@emotion/react';
import { Grid, Typography, Divider, Stack, Button } from '@mui/material';
import MainCard from 'components/MainCard';
import Page from 'components/Page';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';
import Layout from 'layout';

import { ReactElement, useState } from 'react';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ExpenseBreakdown from 'sections/expense/ExpenseBreakdown';
import RecentExpenses from 'sections/expense/RecentExpenses';

const ExpensePage = () => {
  const theme = useTheme();
  // asdasldkasdlkj
  return (
    <Page title="Expense Management">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Expenses" count="$78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Overdue Expenses" count="$18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Cash Flow" count="$35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Savings" count="$523,000" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Stack spacing={3}>
            <Typography variant="h4">Recent Expenses</Typography>
            <MainCard content={false}>
              <RecentExpenses />
            </MainCard>
          </Stack>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Stack spacing={3}>
            <Typography variant="h4">Expense Breakdown</Typography>
            <MainCard content={false}>
              <ExpenseBreakdown />
            </MainCard>
          </Stack>
        </Grid>

        {/* row 3 */}
        <Grid item xs={12}>
          <MainCard>
            <Stack spacing={3}>
              <Typography variant="h4">Manage Expenses</Typography>
              <Divider />
              <Stack direction="row" justifyContent="space-between">
                <Button variant="contained">Create New Expense</Button>
                <Button variant="outlined">View All Expenses</Button>
              </Stack>
            </Stack>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

ExpensePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ExpensePage;

===end===

// Components to create:
===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/sections/expense/ExpenseBreakdown.tsx===
import React from 'react';

const ExpenseBreakdown = () => {
  return (
    <div>
      <h2>Expense Breakdown</h2>
      {/* Implement the expense breakdown chart component */}
    </div>
  );
};

export default ExpenseBreakdown;

===end===

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/sections/expense/RecentExpenses.tsx===
import React from 'react';

const RecentExpenses = () => {
  return (
    <div>
      <h2>Recent Expenses</h2>
      {/* Implement the recent expenses table component */}
    </div>
  );
};

export default RecentExpenses;

===end===

// I'll start with the ExpenseBreakdown component:

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/sections/expense/ExpenseBreakdown.tsx===
import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, Legend, ResponsiveContainer } from 'recharts';

interface ExpenseCategory {
  name: string;
  value: number;
}

const ExpenseBreakdown = () => {
  const [expenseCategories, setExpenseCategories] = useState<ExpenseCategory[]>([]);

  useEffect(() => {
    // Fetch expense categories from the API
    const fetchExpenseCategories = async () => {
      try {
        const response = await fetch('/api/expenses/categories');
        const data = await response.json();
        setExpenseCategories(data);
      } catch (error) {
        console.error('Error fetching expense categories:', error);
      }
    };

    fetchExpenseCategories();
  }, []);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF'];

  return (
    <ResponsiveContainer width="100%" height={300}>
      <PieChart>
        <Pie
          data={expenseCategories}
          dataKey="value"
          nameKey="name"
          cx="50%"
          cy="50%"
          outerRadius={120}
          fill="#8884d8"
          label
        >
          {expenseCategories.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Legend />
      </PieChart>
    </ResponsiveContainer>
  );
};

export default ExpenseBreakdown;

===end===

// Next, I'll work on the RecentExpenses component:

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/sections/expense/RecentExpenses.tsx===
import React, { useState, useEffect } from 'react';
import { Table, TableHead, TableBody, TableRow, TableCell } from '@mui/material';

interface Expense {
  id: number;
  category: string;
  description: string;
  amount: number;
  date: string;
}

const RecentExpenses = () => {
  const [expenses, setExpenses] = useState<Expense[]>([]);

  useEffect(() => {
    // Fetch recent expenses from the API
    const fetchRecentExpenses = async () => {
      try {
        const response = await fetch('/api/expenses/recent');
        const data = await response.json();
        setExpenses(data);
      } catch (error) {
        console.error('Error fetching recent expenses:', error);
      }
    };

    fetchRecentExpenses();
  }, []);

  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableCell>Category</TableCell>
          <TableCell>Description</TableCell>
          <TableCell>Amount</TableCell>
          <TableCell>Date</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {expenses.map((expense) => (
          <TableRow key={expense.id}>
            <TableCell>{expense.category}</TableCell>
            <TableCell>{expense.description}</TableCell>
            <TableCell>${expense.amount.toFixed(2)}</TableCell>
            <TableCell>{new Date(expense.date).toLocaleDateString()}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

export default RecentExpenses;

===end===

// Now I'll handle the remaining requirements for the expense page:

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/index.tsx===
import { useTheme } from '@emotion/react';
import { Grid, Typography, Divider, Stack, Button, TextField, IconButton, Menu, MenuItem } from '@mui/material';
import MainCard from 'components/MainCard';
import Page from 'components/Page';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';
import Layout from 'layout';

import { ReactElement, useState, useEffect } from 'react';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ExpenseBreakdown from 'sections/expense/ExpenseBreakdown';
import RecentExpenses from 'sections/expense/RecentExpenses';
import FilterListIcon from '@mui/icons-material/FilterList';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import PrintIcon from '@mui/icons-material/Print';
import SearchIcon from '@mui/icons-material/Search';
import DateRangeIcon from '@mui/icons-material/DateRange';
import CategoryIcon from '@mui/icons-material/Category';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';

interface Expense {
  id: number;
  category: string;
  description: string;
  amount: number;
  date: string;
}

const ExpensePage = () => {
  const theme = useTheme();
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [searchText, setSearchText] = useState('');
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [category, setCategory] = useState('');
  const [minAmount, setMinAmount] = useState<number | null>(null);
  const [maxAmount, setMaxAmount] = useState<number | null>(null);

  useEffect(() => {
    // Fetch expenses from the API
    const fetchExpenses = async () => {
      try {
        const response = await fetch('/api/expenses');
        const data = await response.json();
        setExpenses(data);
      } catch (error) {
        console.error('Error fetching expenses:', error);
      }
    };

    fetchExpenses();
  }, []);

  const handleFilterClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleFilterClose = () => {
    setFilterAnchorEl(null);
  };

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchText(event.target.value);
  };

  const handleStartDateChange = (date: Date | null) => {
    setStartDate(date);
  };

  const handleEndDateChange = (date: Date | null) => {
    setEndDate(date);
  };

  const handleCategoryChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCategory(event.target.value);
  };

  const handleMinAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMinAmount(event.target.value ? parseFloat(event.target.value) : null);
  };

  const handleMaxAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMaxAmount(event.target.value ? parseFloat(event.target.value) : null);
  };

  const filteredExpenses = expenses.filter(
    (expense) =>
      (searchText === '' || expense.description.toLowerCase().includes(searchText.toLowerCase())) &&
      (!startDate || new Date(expense.date) >= startDate) &&
      (!endDate || new Date(expense.date) <= endDate) &&
      (category === '' || expense.category === category) &&
      (!minAmount || expense.amount >= minAmount) &&
      (!maxAmount || expense.amount <= maxAmount)
  );

  const handlePrint = () => {
    // Implement print functionality
    console.log('Print expenses');
  };

  const handleExport = () => {
    // Implement export to CSV functionality
    console.log('Export expenses to CSV');
  };

  const handleCreateExpense = () => {
    // Implement create new expense functionality
    console.log('Create new expense');
  };

  return (
    <Page title="Expense Management">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Expenses" count="$78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Overdue Expenses" count="$18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Cash Flow" count="$35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Savings" count="$523,000" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Stack spacing={3}>
            <Stack direction="row" justifyContent="space-between" alignItems="center">
              <Typography variant="h4">Recent Expenses</Typography>
              <Stack direction="row" spacing={1}>
                <TextField
                  placeholder="Search expenses..."
                  value={searchText}
                  onChange={handleSearch}
                  InputProps={{
                    startAdornment: <SearchIcon fontSize="small" />,
                  }}
                />
                <IconButton onClick={handleFilterClick}>
                  <FilterListIcon />
                </IconButton>
                <Menu
                  anchorEl={filterAnchorEl}
                  open={Boolean(filterAnchorEl)}
                  onClose={handleFilterClose}
                >
                  <MenuItem>
                    <Stack direction="row" alignItems="center" spacing={1}>
                      <DateRangeIcon />
                      <TextField
                        type="date"
                        label="Start Date"
                        value={startDate ? startDate.toISOString().split('T')[0] : ''}
                        onChange={(e) => handleStartDateChange(e.target.value ? new Date(e.target.value) : null)}
                        InputLabelProps={{ shrink: true }}
                      />
                      <TextField
                        type="date"
                        label="End Date"
                        value={endDate ? endDate.toISOString().split('T')[0] : ''}
                        onChange={(e) => handleEndDateChange(e.target.value ? new Date(e.target.value) : null)}
                        InputLabelProps={{ shrink: true }}
                      />
                    </Stack>
                  </MenuItem>
                  <MenuItem>
                    <Stack direction="row" alignItems="center" spacing={1}>
                      <CategoryIcon />
                      <TextField
                        label="Category"
                        value={category}
                        onChange={handleCategoryChange}
                      />
                    </Stack>
                  </MenuItem>
                  <MenuItem>