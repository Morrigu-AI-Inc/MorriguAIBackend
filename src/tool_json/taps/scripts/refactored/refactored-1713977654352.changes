===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/create.tsx===
import { useState, ReactElement } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Grid,
  TextField,
  Button,
  Typography,
  Stack,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';
import DatePicker from '@mui/lab/DatePicker';
import { useRouter } from 'next/router';

// project imports
import Layout from 'layout';
import Page from 'components/Page';

const initialValues = {
  expenseCategory: '',
  description: '',
  amount: 0,
  date: new Date(),
  paymentType: 'cash',
  recurring: false
};

const CreateExpense = () => {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const validationSchema = Yup.object({
    expenseCategory: Yup.string().required('Expense category is required'),
    description: Yup.string().required('Description is required'),
    amount: Yup.number().required('Amount is required'),
    date: Yup.date().required('Date is required'),
    paymentType: Yup.string().required('Payment type is required')
  });

  const formik = useFormik({
    initialValues,
    validationSchema,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        // Submit expense data to the server
        await new Promise((resolve) => setTimeout(resolve, 2000));
        router.push('/finance/expense');
      } catch (error) {
        console.error('Error creating expense:', error);
      } finally {
        setLoading(false);
      }
    }
  });

  return (
    <Page title="Create Expense">
      <form onSubmit={formik.handleSubmit}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="expense-category-label">Expense Category</InputLabel>
              <Select
                labelId="expense-category-label"
                id="expense-category"
                name="expenseCategory"
                value={formik.values.expenseCategory}
                onChange={formik.handleChange}
                error={formik.touched.expenseCategory && Boolean(formik.errors.expenseCategory)}
              >
                <MenuItem value="">Select a category</MenuItem>
                <MenuItem value="travel">Travel</MenuItem>
                <MenuItem value="office">Office</MenuItem>
                <MenuItem value="marketing">Marketing</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
              <FormHelperText error>{formik.errors.expenseCategory}</FormHelperText>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="description"
              name="description"
              label="Description"
              value={formik.values.description}
              onChange={formik.handleChange}
              error={formik.touched.description && Boolean(formik.errors.description)}
              helperText={formik.errors.description}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="amount"
              name="amount"
              label="Amount"
              type="number"
              value={formik.values.amount}
              onChange={formik.handleChange}
              error={formik.touched.amount && Boolean(formik.errors.amount)}
              helperText={formik.errors.amount}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <DatePicker
              label="Date"
              value={formik.values.date}
              onChange={(newValue) => formik.setFieldValue('date', newValue)}
              renderInput={(params) => <TextField {...params} fullWidth />}
              error={formik.touched.date && Boolean(formik.errors.date)}
              helperText={formik.errors.date}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Payment Type</FormLabel>
              <RadioGroup row aria-label="payment-type" name="paymentType" value={formik.values.paymentType} onChange={formik.handleChange}>
                <FormControlLabel value="cash" control={<Radio />} label="Cash" />
                <FormControlLabel value="card" control={<Radio />} label="Card" />
                <FormControlLabel value="bank" control={<Radio />} label="Bank Transfer" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <FormControlLabel
              control={
                <TextField
                  id="recurring"
                  name="recurring"
                  type="checkbox"
                  checked={formik.values.recurring}
                  onChange={formik.handleChange}
                />
              }
              label="Recurring Expense"
            />
          </Grid>
          <Grid item xs={12}>
            <Stack direction="row" justifyContent="flex-end">
              <Button type="submit" variant="contained" disabled={loading} sx={{ minWidth: 120 }}>
                {loading ? 'Saving...' : 'Save'}
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </Page>
  );
};

CreateExpense.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default CreateExpense;

===end===

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/edit/[id].tsx===
import { useState, ReactElement, useEffect } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Grid,
  TextField,
  Button,
  Typography,
  Stack,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';
import DatePicker from '@mui/lab/DatePicker';
import { useRouter } from 'next/router';

// project imports
import Layout from 'layout';
import Page from 'components/Page';

const initialValues = {
  expenseCategory: '',
  description: '',
  amount: 0,
  date: new Date(),
  paymentType: 'cash',
  recurring: false
};

const EditExpense = () => {
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const { id } = router.query;

  const validationSchema = Yup.object({
    expenseCategory: Yup.string().required('Expense category is required'),
    description: Yup.string().required('Description is required'),
    amount: Yup.number().required('Amount is required'),
    date: Yup.date().required('Date is required'),
    paymentType: Yup.string().required('Payment type is required')
  });

  const formik = useFormik({
    initialValues,
    validationSchema,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        // Update expense data on the server
        await new Promise((resolve) => setTimeout(resolve, 2000));
        router.push('/finance/expense');
      } catch (error) {
        console.error('Error updating expense:', error);
      } finally {
        setLoading(false);
      }
    }
  });

  useEffect(() => {
    // Fetch expense data from the server based on the id
    const fetchExpense = async () => {
      try {
        // Replace with your actual API call to fetch the expense data
        const expenseData = {
          expenseCategory: 'travel',
          description: 'Flight ticket to New York',
          amount: 500,
          date: new Date('2023-05-01'),
          paymentType: 'card',
          recurring: false
        };

        formik.setValues(expenseData);
      } catch (error) {
        console.error('Error fetching expense:', error);
      }
    };

    if (id) {
      fetchExpense();
    }
  }, [id]);

  return (
    <Page title="Edit Expense">
      <form onSubmit={formik.handleSubmit}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="expense-category-label">Expense Category</InputLabel>
              <Select
                labelId="expense-category-label"
                id="expense-category"
                name="expenseCategory"
                value={formik.values.expenseCategory}
                onChange={formik.handleChange}
                error={formik.touched.expenseCategory && Boolean(formik.errors.expenseCategory)}
              >
                <MenuItem value="">Select a category</MenuItem>
                <MenuItem value="travel">Travel</MenuItem>
                <MenuItem value="office">Office</MenuItem>
                <MenuItem value="marketing">Marketing</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
              <FormHelperText error>{formik.errors.expenseCategory}</FormHelperText>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="description"
              name="description"
              label="Description"
              value={formik.values.description}
              onChange={formik.handleChange}
              error={formik.touched.description && Boolean(formik.errors.description)}
              helperText={formik.errors.description}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="amount"
              name="amount"
              label="Amount"
              type="number"
              value={formik.values.amount}
              onChange={formik.handleChange}
              error={formik.touched.amount && Boolean(formik.errors.amount)}
              helperText={formik.errors.amount}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <DatePicker
              label="Date"
              value={formik.values.date}
              onChange={(newValue) => formik.setFieldValue('date', newValue)}
              renderInput={(params) => <TextField {...params} fullWidth />}
              error={formik.touched.date && Boolean(formik.errors.date)}
              helperText={formik.errors.date}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Payment Type</FormLabel>
              <RadioGroup row aria-label="payment-type" name="paymentType" value={formik.values.paymentType} onChange={formik.handleChange}>
                <FormControlLabel value="cash" control={<Radio />} label="Cash" />
                <FormControlLabel value="card" control={<Radio />} label="Card" />
                <FormControlLabel value="bank" control={<Radio />} label="Bank Transfer" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <FormControlLabel
              control={
                <TextField
                  id="recurring"
                  name="recurring"
                  type="checkbox"
                  checked={formik.values.recurring}
                  onChange={formik.handleChange}
                />
              }
              label="Recurring Expense"
            />
          </Grid>
          <Grid item xs={12}>
            <Stack direction="row" justifyContent="flex-end">
              <Button type="submit" variant="contained" disabled={loading} sx={{ minWidth: 120 }}>
                {loading ? 'Updating...' : 'Update'}
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </Page>
  );
};

EditExpense.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default EditExpense;

===end===

===filename: /Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/index.tsx===
import { useTheme } from '@emotion/react';
import { Grid, Typography, Divider, Stack, Button } from '@mui/material';
import MainCard from 'components/MainCard';
import Page from 'components/Page';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';
import Layout from 'layout';

import { ReactElement } from 'react';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ExpenseBreakdown from 'sections/expense/ExpenseBreakdown';
import RecentExpenses from 'sections/expense/RecentExpenses';

const ExpensePage = () => {
  const theme = useTheme();

  return (
    <Page title="Expense Management">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Expenses" count="$78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Overdue Expenses" count="$18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Cash Flow" count="$35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Savings" count="$523,000" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Stack spacing={3}>
            <Typography variant="h4">Recent Expenses</Typography>
            <MainCard content={false}>
              <RecentExpenses />
            </MainCard>
          </Stack>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Stack spacing={3}>
            <Typography variant="h4">Expense Breakdown</Typography>
            <MainCard content={false}>
              <ExpenseBreakdown />
            </MainCard>
          </Stack>
        </Grid>

        {/* row 3 */}
        <Grid item xs={12}>
          <MainCard>
            <Stack spacing={3}>
              <Typography variant="h4">Manage Expenses</Typography>
              <Divider />
              <Stack direction="row" justifyContent="space-between">
                <Button variant="contained">Create New Expense</Button>
                <Button variant="outlined">View All Expenses</Button>
              </Stack>
            </Stack>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

ExpensePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export