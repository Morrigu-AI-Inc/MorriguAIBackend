===filename: src/pages/administration/assistants/index.tsx===
tsx
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import { ReactElement, useState } from 'react';
import BasicTable from 'sections/tables/react-table/BasicTable';
import MainCard from 'components/MainCard';
import CreateAssistantDialog from 'components/administration/assistants/CreateAssistantDialog';

type Assistant = {
  id: number;
  name: string;
  description: string;
  status: 'active' | 'inactive' | 'draft';
  createdAt: string;
  updatedAt: string;
  lastActiveAt: string;
  tools: {
    integrations: ReactElement;
    analytics: ReactElement;
    logs: ReactElement;
    billing: ReactElement;
    settings: ReactElement;
    documentation: ReactElement;
    content: ReactElement;
  };
  schema: ReactElement;
};

const Assistants = () => {
  const [open, setOpen] = useState(false);
  const [assistants, setAssistants] = useState<Assistant[]>([]);

  const handleOpenDialog = () => {
    setOpen(true);
  };

  const handleCloseDialog = () => {
    setOpen(false);
  };

  const handleCreateAssistant = (assistant: Assistant) => {
    setAssistants([...assistants, assistant]);
    handleCloseDialog();
  };

  const columns = [
    {
      Header: 'Name',
      accessor: 'name'
    },
    {
      Header: 'Description',
      accessor: 'description'
    },
    {
      Header: 'Status',
      accessor: 'status',
      Cell: ({ value }: { value: 'active' | 'inactive' | 'draft' }) => {
        return (
          <Typography
            color={
              value === 'active'
                ? 'success.main'
                : value === 'inactive'
                ? 'error.main'
                : 'warning.main'
            }
          >
            {value}
          </Typography>
        );
      }
    },
    {
      Header: 'Created At',
      accessor: 'createdAt'
    },
    {
      Header: 'Updated At',
      accessor: 'updatedAt'
    },
    {
      Header: 'Last Active At',
      accessor: 'lastActiveAt'
    },
    {
      Header: 'Tools',
      accessor: 'tools',
      Cell: ({ value }: { value: typeof Assistant.prototype.tools }) => {
        return (
          <Stack direction="row" spacing={1}>
            {value.integrations}
            {value.analytics}
            {value.logs}
            {value.billing}
            {value.settings}
            {value.documentation}
            {value.content}
          </Stack>
        );
      }
    },
    {
      Header: 'Schema',
      accessor: 'schema'
    }
  ];

  return (
    <Page title="Assistants">
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="h4">Assistants</Typography>
            <Button variant="contained" onClick={handleOpenDialog}>
              Create Assistant
            </Button>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <MainCard>
            <BasicTable columns={columns} data={assistants} />
          </MainCard>
        </Grid>
      </Grid>
      <CreateAssistantDialog
        open={open}
        onClose={handleCloseDialog}
        onCreateAssistant={handleCreateAssistant}
      />
    </Page>
  );
};

Assistants.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Assistants;
```

===end===

===filename: src/pages/administration/integrations/index.tsx===
```tsx
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import { ReactElement, useEffect, useState } from 'react';
import BasicTable from 'sections/tables/react-table/BasicTable';
import MainCard from 'components/MainCard';
import { useGetIntegrationsQuery } from 'store/api/integrations';
import useConfig from 'hooks/useConfig';
import { paragon } from '@useparagon/connect';
import Image from 'next/image';
import { IIntegrationMetadata } from '@useparagon/connect/dist/src/entities/integration.interface';
import { sleep } from 'openai/core';

type Integration = {
  id: number;
  slug: string;
  name: ReactElement;
  description: string;
  logo?: ReactElement;
  action: () => void;
};

const integration_descriptions = {
  quickbooks:
    'Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from advanced lead management, sales automation, and analytics features, driving growth and success in your business.',
  hubspot:
    'Integrate HubSpot to see a complete view of your customers, automate marketing, sales, and service processes, and drive growth.',
  stripe: 'Integrate Stripe to accept payments, manage subscriptions, and handle billing for your business.',
  mailchimp: 'Integrate Mailchimp to create targeted email campaigns, automate marketing processes, and drive customer engagement.',
  slack: 'Integrate Slack to communicate with your team, share files, and collaborate on projects in real time.',
  zapier:
    'Integrate Zapier to connect your favorite apps and automate workflows without writing any code. Set up triggers and actions to automate repetitive tasks and save time.'
};

const Integrations = () => {
  const config = useConfig();
  const { data, refetch } = useGetIntegrationsQuery(config.currentOrganization?._id);
  const [selectedIntegration, setSelectedIntegration] = useState<Integration>();
  const [open, setOpen] = useState(false);
  const [integrationsData, setIntegrationsData] = useState<Integration[]>([]);
  const [intMeta, setIntMeta] = useState<IIntegrationMetadata[]>([]);
  useEffect(() => {
    const init = async () => {
      while (paragon.getIntegrationMetadata().length === 0) {
        await sleep(1000);
      }

      const temp = paragon.getIntegrationMetadata();

      console.log('temp', temp);
      setIntMeta(temp);
    };

    init();
    // const intList = intMeta.map((integ) => {
    //   return integ.name.toLowerCase();
    // });
  }, []);

  useEffect(() => {
    const integrations = intMeta.map((integ: { type: string; name: string; icon: string }) => {
      console.log('integ', integ);
      return {
        id: integ.type,
        slug: integ.type,
        name: <Typography variant="h6">{integ.name}</Typography>,
        logo: <Image src={integ.icon} alt={''} width={26} height={26} />,
        description:
          'Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from advanced lead management, sales automation, and analytics features, driving growth and success in your business.',
        action: () =>
          paragon.connect(integ.type, {
            onSuccess(event, user) {
              console.log(`${integ.name} connected`, user);
            },
            onError(error) {
              console.error(`${integ.name} error`, error);
            }
          })
      };
    });

    setIntegrationsData(integrations);
  }, [intMeta]);

  useEffect(() => {
    if (open == false) {
      refetch();
    }
  }, [open, refetch]);

  return (
    <Page title={'Integrations'}>
      <Grid container spacing={2}>
        <Grid item xs={9}>
          <BasicTable
            columns={[
              {
                Header: 'Logo',
                accessor: 'logo'
              },

              {
                Header: 'Description',
                accessor: 'description',
                Cell: ({ value }: { value: string }) => {
                  return (
                    <Typography color={'GrayText'} variant={'body2'}>
                      {value}
                    </Typography>
                  );
                }
              },

              {
                accessor: 'actions',
                Cell: ({ cell }) => {
                  console.log(cell.row.original);
                  return (
                    <Stack direction={'row'} justifyContent={'flex-end'}>
                      <Button
                        onClick={() =>
                          paragon.connect(cell.row.original.slug, { onSuccess: () => console.log(`${cell.row.original.name} connected`) })
                        }
                      >
                        Manage
                      </Button>
                    </Stack>
                  );
                }
              }
            ]}
            data={integrationsData}
          />
        </Grid>
        <Grid item xs={12} lg={3}>
          <MainCard title={'Recommended Integrations'}>
            <Stack spacing={1}>
              <Typography variant={'h6'}>QuickBooks</Typography>
              <Typography variant={'body2'}>
                Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from
                advanced lead management, sales automation, and analytics features, driving growth and success in your business.
              </Typography>
              <Button
                onClick={() => paragon.connect('quickbooks', { onSuccess: () => console.log('HubSpot connected') })}
                variant={'contained'}
              >
                Manage
              </Button>
            </Stack>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

Integrations.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Integrations;
```

===end===

===filename: src/pages/administration/profile/account/[tab].tsx===
```tsx
import { useState, ReactElement } from 'react';

// next
import { useRouter } from 'next/router';

// material-ui
import { Box, Tab, Tabs } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import TabAccount from 'sections/apps/profiles/account/TabAccount';
import TabPassword from 'sections/apps/profiles/account/TabPassword';
import TabRole from 'sections/apps/profiles/account/TabRole';
import TabSettings from 'sections/apps/profiles/account/TabSettings';

// assets
import { ContainerOutlined, LockOutlined, SettingOutlined, TeamOutlined } from '@ant-design/icons';

// ==============================|| PROFILE - ACCOUNT ||============================== //

const AccountProfile = () => {
  const router = useRouter();
  const { tab } = router.query;

  const [value, setValue] = useState(tab);

  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
    router.push(`/administration/profile/account/${newValue}`);
  };

  return (
    <Page title="Account Profile">
      <MainCard border={false} boxShadow>
        <Box sx={{ borderBottom: 1, borderColor: 'divider', width: '100%' }}>
          <Tabs value={value} onChange={handleChange} variant="scrollable" scrollButtons="auto" aria-label="account profile tab">
            <Tab label="My Account" icon={<ContainerOutlined />} value="my-account" iconPosition="start" />
            <Tab label="Change Password" icon={<LockOutlined />} value="password" iconPosition="start" />
            <Tab label="Role" icon={<TeamOutlined />} value="role" iconPosition="start" />
            <Tab label="Settings" icon={<SettingOutlined />} value="settings" iconPosition="start" />
          </Tabs>
        </Box>
        <Box sx={{ mt: 2.5 }}>
          {/* {tab === 'basic' && <TabProfile />} */}
          {/* {tab === 'personal' && <TabPersonal />} */}
          {tab === 'general' && <TabAccount />}
          {tab === 'password' && <TabPassword />}
          {tab === 'role' && <TabRole />}
          {tab === 'settings' && <TabSettings />}
        </Box>
      </MainCard>
    </Page>
  );
};

AccountProfile.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default AccountProfile;
```

===end===

===filename: src/pages/administration/profile/user/[tab].tsx===
```tsx
import { useRef, ReactElement } from 'react';

// next
import { useRouter } from 'next/router';

// material-ui
import { Grid } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import ProfileCard from 'sections/apps/profiles/user/ProfileCard';
import ProfileTabs from 'sections/apps/profiles/user/ProfileTabs';
import TabPersonal from 'sections/apps/profiles/user/TabPersonal';
import TabPayment from 'sections/apps/profiles/user/TabPayment';
import TabPassword from 'sections/apps/profiles/user/TabPassword';
import TabSettings from 'sections/apps/profiles/user/TabSettings';

// ==============================|| PROFILE - USER ||============================== //

const UserProfile = () => {
  const inputRef = useRef<HTMLInputElement>(null);

  const focusInput = () => {
    inputRef.current?.focus();
  };

  const router = useRouter();
  const { tab } = router.query;

  return (
    <Page title="User Profile">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <ProfileCard focusInput={focusInput} />
        </Grid>
        <Grid item xs={12} md={3}>
          <ProfileTabs focusInput={focusInput} />
        </Grid>
        <Grid item xs={12} md={9}>
          {tab === 'general' && <TabPersonal />}
          {tab === 'payment' && <TabPayment />}
          {tab === 'password' && <TabPassword />}
          {tab === 'settings' && <TabSettings />}
        </Grid>
      </Grid>
    </Page>
  );
};

UserProfile.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default UserProfile;
```

===end===

===filename: src/pages/administration/users/index.tsx===
```tsx
import React, { ReactElement, useState } from 'react';
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import MainCard from 'components/MainCard';
import UserTable from 'components/administration/users/UserTable';
import CreateUserDialog from 'components/administration/users/CreateUserDialog';

const Users = () => {
  const [open, setOpen] = useState(false);
  const [users, setUsers] = useState([]);

  const handleOpenDialog = () => {
    setOpen(true);
  };

  const handleCloseDialog = () => {
    setOpen(false);
  };

  const handleCreateUser = (user) => {
    setUsers([...users, user]);
    handleCloseDialog();
  };

  return (
    <Page title="Users">
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="h4">Users</Typography>
            <Button variant="contained" onClick={handleOpenDialog}>
              Create User
            </Button>
          </