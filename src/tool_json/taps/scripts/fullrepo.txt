===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/_app.tsx===
import { useEffect, useState, ReactElement, ReactNode } from 'react';

// scroll bar
import 'simplebar/dist/simplebar.css';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';

// apex-chart
import 'styles/apex-chart.css';
import 'styles/react-table.css';

// next
import { NextPage } from 'next';
import { SessionProvider } from 'next-auth/react';
import type { AppProps } from 'next/app';

// third-party
import { Provider as ReduxProvider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';

// project import
import ThemeCustomization from 'themes';

import Loader from 'components/Loader';
import Locales from 'components/Locales';
import ScrollTop from 'components/ScrollTop';
import RTLLayout from 'components/RTLLayout';
import Snackbar from 'components/@extended/Snackbar';
import Notistack from 'components/third-party/Notistack';

import { ConfigProvider } from 'contexts/ConfigContext';
import { store, persister, dispatch } from 'store';
import { fetchMenu } from 'store/reducers/menu';
import MorriguProvider from 'packages/@morrigu/core/MorriguProvider';
import { Analytics } from '@vercel/analytics/react';
import { paragon } from '@useparagon/connect';
import Tooltip from 'components/@extended/Tooltip'; // New import for Tooltip component
import OnboardingFlow from 'components/OnboardingFlow';

// import MorriguProvider from '@morrigu/core';

// 

// types
type LayoutProps = NextPage & {
  getLayout?: (page: ReactElement) => ReactNode;
};

interface Props {
  Component: LayoutProps;
  pageProps: any;
}

// ==============================|| APP - THEME, ROUTER, LOCAL  ||============================== //

export default function App({ Component, pageProps }: AppProps & Props) {
  const getLayout = Component.getLayout ?? ((page: any) => page);

  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {}, []);

  useEffect(() => {
    dispatch(fetchMenu()).then(() => {
      
      setLoading(false);
    });
  }, []);

  if (loading) return <Loader />;

  return (
    <ReduxProvider store={store}>
      <PersistGate loading={null} persistor={persister}>
        <ConfigProvider>
          <ThemeCustomization>
            <RTLLayout>
              <Locales>
                <ScrollTop>
                  <SessionProvider session={pageProps.session} refetchInterval={0}>
                    {/* <MessageThreadProvider> */}

                    <MorriguProvider>
                      {
                        // <OnboardingFlow>
                        <Notistack>
                          <Analytics />
                          <Snackbar />
                          <Tooltip /> {/* Render Tooltip component */}
                          {getLayout(<Component {...pageProps} />)}
                        </Notistack>
                        // </OnboardingFlow>
                      }
                    </MorriguProvider>
                    {/* </MessageThreadProvider> */}
                  </SessionProvider>
                </ScrollTop>
              </Locales>
            </RTLLayout>
          </ThemeCustomization>
        </ConfigProvider>
      </PersistGate>
    </ReduxProvider>
  );
}
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/_document.tsx===
import { Html, Head, Main, NextScript } from 'next/document';
import { Analytics } from '@vercel/analytics/react';

export default function Document() {
  return (
    <Html>
      <Analytics />
      <Head>
        <meta name="theme-color" content="#2296f3" />
        <meta name="title" content="TITLE_CONTENT" />
        <meta name="description" content="DESCRIPTION_CONTENT" />
        <meta name="keywords" content="KEYWORDS_CONTENT" />

        <link rel="shortcut icon" href="/favicon.svg" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&family=Roboto:wght@400;500;700&display=swap&family=Public+Sans:wght@400;500;600;700"
          rel="stylesheet"
        />
      </Head>

      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/accounting/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/assistants/index.tsx===
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import { ReactElement, useState } from 'react';
import BasicTable from 'sections/tables/react-table/BasicTable';
import MainCard from 'components/MainCard';
import CreateAssistantDialog from 'components/administration/assistants/CreateAssistantDialog';

type Assistant = {
  id: number;
  name: string;
  description: string;
  status: 'active' | 'inactive' | 'draft';
  createdAt: string;
  updatedAt: string;
  lastActiveAt: string;
  tools: {
    integrations: ReactElement;
    analytics: ReactElement;
    logs: ReactElement;
    billing: ReactElement;
    settings: ReactElement;
    documentation: ReactElement;
    content: ReactElement;
  };
  schema: ReactElement;
};

const Assistants = () => {
  const [open, setOpen] = useState(false);
  const [assistants, setAssistants] = useState<Assistant[]>([]);

  const handleOpenDialog = () => {
    setOpen(true);
  };

  const handleCloseDialog = () => {
    setOpen(false);
  };

  const handleCreateAssistant = (assistant: Assistant) => {
    setAssistants([...assistants, assistant]);
    handleCloseDialog();
  };

  const columns = [
    {
      Header: 'Name',
      accessor: 'name'
    },
    {
      Header: 'Description',
      accessor: 'description'
    },
    {
      Header: 'Status',
      accessor: 'status',
      Cell: ({ value }: { value: 'active' | 'inactive' | 'draft' }) => {
        return (
          <Typography
            color={
              value === 'active'
                ? 'success.main'
                : value === 'inactive'
                ? 'error.main'
                : 'warning.main'
            }
          >
            {value}
          </Typography>
        );
      }
    },
    {
      Header: 'Created At',
      accessor: 'createdAt'
    },
    {
      Header: 'Updated At',
      accessor: 'updatedAt'
    },
    {
      Header: 'Last Active At',
      accessor: 'lastActiveAt'
    },
    {
      Header: 'Tools',
      accessor: 'tools',
      Cell: ({ value }: { value: typeof Assistant.prototype.tools }) => {
        return (
          <Stack direction="row" spacing={1}>
            {value.integrations}
            {value.analytics}
            {value.logs}
            {value.billing}
            {value.settings}
            {value.documentation}
            {value.content}
          </Stack>
        );
      }
    },
    {
      Header: 'Schema',
      accessor: 'schema'
    }
  ];

  return (
    <Page title="Assistants">
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="h4">Assistants</Typography>
            <Button variant="contained" onClick={handleOpenDialog}>
              Create Assistant
            </Button>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <MainCard>
            <BasicTable columns={columns} data={assistants} />
          </MainCard>
        </Grid>
      </Grid>
      <CreateAssistantDialog
        open={open}
        onClose={handleCloseDialog}
        onCreateAssistant={handleCreateAssistant}
      />
    </Page>
  );
};

Assistants.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Assistants;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/integrations/index.tsx===
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import { ReactElement, useEffect, useState } from 'react';
import BasicTable from 'sections/tables/react-table/BasicTable';
import MainCard from 'components/MainCard';
import { useGetIntegrationsQuery } from 'store/api/integrations';
import useConfig from 'hooks/useConfig';
import { paragon } from '@useparagon/connect';
import Image from 'next/image';
import { IIntegrationMetadata } from '@useparagon/connect/dist/src/entities/integration.interface';
import { sleep } from 'openai/core';

type Integration = {
  id: number;
  slug: string;
  name: ReactElement;
  description: string;
  logo?: ReactElement;
  action: () => void;
};

const integration_descriptions = {
  quickbooks:
    'Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from advanced lead management, sales automation, and analytics features, driving growth and success in your business.',
  hubspot:
    'Integrate HubSpot to see a complete view of your customers, automate marketing, sales, and service processes, and drive growth.',
  stripe: 'Integrate Stripe to accept payments, manage subscriptions, and handle billing for your business.',
  mailchimp: 'Integrate Mailchimp to create targeted email campaigns, automate marketing processes, and drive customer engagement.',
  slack: 'Integrate Slack to communicate with your team, share files, and collaborate on projects in real time.',
  zapier:
    'Integrate Zapier to connect your favorite apps and automate workflows without writing any code. Set up triggers and actions to automate repetitive tasks and save time.'
};

const Integrations = () => {
  const config = useConfig();
  const { data, refetch } = useGetIntegrationsQuery(config.currentOrganization?._id);
  const [selectedIntegration, setSelectedIntegration] = useState<Integration>();
  const [open, setOpen] = useState(false);
  const [integrationsData, setIntegrationsData] = useState<Integration[]>([]);
  const [intMeta, setIntMeta] = useState<IIntegrationMetadata[]>([]);
  useEffect(() => {
    const init = async () => {
      while (paragon.getIntegrationMetadata().length === 0) {
        await sleep(1000);
      }

      const temp = paragon.getIntegrationMetadata();

      
      setIntMeta(temp);
    };

    init();
    // const intList = intMeta.map((integ) => {
    //   return integ.name.toLowerCase();
    // });
  }, []);

  useEffect(() => {
    const integrations = intMeta.map((integ: { type: string; name: string; icon: string }) => {
      
      return {
        id: integ.type,
        slug: integ.type,
        name: <Typography variant="h6">{integ.name}</Typography>,
        logo: <Image src={integ.icon} alt={''} width={26} height={26} />,
        description:
          'Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from advanced lead management, sales automation, and analytics features, driving growth and success in your business.',
        action: () =>
          paragon.connect(integ.type, {
            onSuccess(event, user) {
              
            },
            onError(error) {
              console.error(`${integ.name} error`, error);
            }
          })
      };
    });

    setIntegrationsData(integrations);
  }, [intMeta]);

  useEffect(() => {
    if (open == false) {
      refetch();
    }
  }, [open, refetch]);

  return (
    <Page title={'Integrations'}>
      <Grid container spacing={2}>
        <Grid item xs={9}>
          <BasicTable
            columns={[
              {
                Header: 'Logo',
                accessor: 'logo'
              },

              {
                Header: 'Description',
                accessor: 'description',
                Cell: ({ value }: { value: string }) => {
                  return (
                    <Typography color={'GrayText'} variant={'body2'}>
                      {value}
                    </Typography>
                  );
                }
              },

              {
                accessor: 'actions',
                Cell: ({ cell }) => {
                  
                  return (
                    <Stack direction={'row'} justifyContent={'flex-end'}>
                      <Button
                        onClick={() =>
                          paragon.connect(cell.row.original.slug, { onSuccess: () => 
                        }
                      >
                        Manage
                      </Button>
                    </Stack>
                  );
                }
              }
            ]}
            data={integrationsData}
          />
        </Grid>
        <Grid item xs={12} lg={3}>
          <MainCard title={'Recommended Integrations'}>
            <Stack spacing={1}>
              <Typography variant={'h6'}>QuickBooks</Typography>
              <Typography variant={'body2'}>
                Integrate QuickBooks to manage customer relationships, automate sales processes, and drive revenue growth. Benefit from
                advanced lead management, sales automation, and analytics features, driving growth and success in your business.
              </Typography>
              <Button
                onClick={() => paragon.connect('quickbooks', { onSuccess: () => }
                variant={'contained'}
              >
                Manage
              </Button>
            </Stack>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

Integrations.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Integrations;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/invites/accept.tsx===
import useUser from 'hooks/useUser';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import React, { useEffect } from 'react';

const AcceptInvitePage: React.FC = () => {
  const user = useSession();
  const router = useRouter();
  

  useEffect(() => {
    // Resolve user invite here
    const inviteToken = new URLSearchParams(location.search).get('token');
    
    const data = user.data as unknown as {
      name: string;
      email: string;
      id_token: string;
    };
    if (data?.id_token) {
      
    }
    fetch(`/api/invites/accept?token=${inviteToken}&id_token=${data?.id_token}`).then(async (response) => {
      const data = await response.json();
      router.replace('/chat/thread');
    });

    // Call your API or perform any necessary actions to resolve the invite

    // Redirect the user to the desired page after resolving the invite
    // Replace '/dashboard' with the actual page you want to redirect to
    // window.location.href = '/dashboard';
  }, [user.data]);

  return (
    <div>
      <h1>Accept Invite Page</h1>
      {/* Add your page content here */}
    </div>
  );
};

export default AcceptInvitePage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/invites/index.tsx===
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Page from 'components/Page';
import Layout from 'layout';
import { useRouter } from 'next/router';
import { signIn } from 'next-auth/react';

const Invites = () => {
  const router = useRouter();
  const [invites, setInvites] = useState<any | undefined>();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const { query } = router;
  const { token } = query;

  useEffect(() => {
    console.log;
    const fetchInvites = async () => {
      setIsLoading(true);
      try {
        
        const response = await fetch(`/api/invites?token=${token}`);

        const data = await response.json();

        signIn('auth0', {
          callbackUrl: '/administration/invites/accept?status=accepted&token=' + token
        });

        setInvites(data);
      } catch (err) {
        setError('Failed to fetch invites');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchInvites();
  }, []);

  const handleResponse = async (inviteId, status) => {
    try {
      // Example API call to update the invite status
      await axios.patch(`/api/invites/${inviteId}`, { status });
      // Refresh the invites or update the local state
      setInvites(invites.map((invite) => (invite._id === inviteId ? { ...invite, status } : invite)));
    } catch (err) {
      console.error('Failed to update invite', err);
    }
  };

  return (
    <Page title="Invites">
      <h1>Invites</h1>
      {isLoading ? (
        <p>Loading invites...</p>
      ) : error ? (
        <p>{error}</p>
      ) : (
        <ul>
          {invites?.map((invite) => (
            <li key={invite._id}>
              {invite.name} ({invite.email}) - Status: {invite.status}
              <button onClick={() => handleResponse(invite._id, 'accepted')}>Accept</button>
              <button onClick={() => handleResponse(invite._id, 'declined')}>Decline</button>
            </li>
          ))}
        </ul>
      )}
    </Page>
  );
};

// Compare this snippet from src/pages/usage/index.tsx:
Invites.getLayout = function getLayout(page) {
  return <Layout variant={'blank'}>{page}</Layout>;
};

export default Invites;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/profile/account/[tab].tsx===
import { useState, ReactElement } from 'react';

// next
import { useRouter } from 'next/router';

// material-ui
import { Box, Tab, Tabs } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import TabAccount from 'sections/apps/profiles/account/TabAccount';
import TabPassword from 'sections/apps/profiles/account/TabPassword';
import TabRole from 'sections/apps/profiles/account/TabRole';
import TabSettings from 'sections/apps/profiles/account/TabSettings';

// assets
import { ContainerOutlined, LockOutlined, SettingOutlined, TeamOutlined } from '@ant-design/icons';

// ==============================|| PROFILE - ACCOUNT ||============================== //

const AccountProfile = () => {
  const router = useRouter();
  const { tab } = router.query;

  const [value, setValue] = useState(tab);

  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setValue(newValue);
    router.push(`/administration/profile/account/${newValue}`);
  };

  return (
    <Page title="Account Profile">
      <MainCard border={false} boxShadow>
        <Box sx={{ borderBottom: 1, borderColor: 'divider', width: '100%' }}>
          <Tabs value={value} onChange={handleChange} variant="scrollable" scrollButtons="auto" aria-label="account profile tab">
            <Tab label="My Account" icon={<ContainerOutlined />} value="my-account" iconPosition="start" />
            <Tab label="Change Password" icon={<LockOutlined />} value="password" iconPosition="start" />
            <Tab label="Role" icon={<TeamOutlined />} value="role" iconPosition="start" />
            <Tab label="Settings" icon={<SettingOutlined />} value="settings" iconPosition="start" />
          </Tabs>
        </Box>
        <Box sx={{ mt: 2.5 }}>
          {/* {tab === 'basic' && <TabProfile />} */}
          {/* {tab === 'personal' && <TabPersonal />} */}
          {tab === 'general' && <TabAccount />}
          {tab === 'password' && <TabPassword />}
          {tab === 'role' && <TabRole />}
          {tab === 'settings' && <TabSettings />}
        </Box>
      </MainCard>
    </Page>
  );
};

AccountProfile.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default AccountProfile;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/profile/user/[tab].tsx===
import { useRef, ReactElement } from 'react';

// next
import { useRouter } from 'next/router';

// material-ui
import { Grid } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import ProfileCard from 'sections/apps/profiles/user/ProfileCard';
import ProfileTabs from 'sections/apps/profiles/user/ProfileTabs';
import TabPersonal from 'sections/apps/profiles/user/TabPersonal';
import TabPayment from 'sections/apps/profiles/user/TabPayment';
import TabPassword from 'sections/apps/profiles/user/TabPassword';
import TabSettings from 'sections/apps/profiles/user/TabSettings';

// ==============================|| PROFILE - USER ||============================== //

const UserProfile = () => {
  const inputRef = useRef<HTMLInputElement>(null);

  const focusInput = () => {
    inputRef.current?.focus();
  };

  const router = useRouter();
  const { tab } = router.query;

  return (
    <Page title="User Profile">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <ProfileCard focusInput={focusInput} />
        </Grid>
        <Grid item xs={12} md={3}>
          <ProfileTabs focusInput={focusInput} />
        </Grid>
        <Grid item xs={12} md={9}>
          {tab === 'general' && <TabPersonal />}
          {tab === 'payment' && <TabPayment />}
          {tab === 'password' && <TabPassword />}
          {tab === 'settings' && <TabSettings />}
        </Grid>
      </Grid>
    </Page>
  );
};

UserProfile.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default UserProfile;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/settings/general.tsx===
import Layout from 'layout';
import React, { ReactElement } from 'react';

const GeneralSettings = () => {
  // Add your code for the General Settings page here

  return (
    <div>
      <h1>General Settings</h1>
      {/* Add your settings components and logic here */}
    </div>
  );
};

GeneralSettings.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default GeneralSettings;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/administration/settings/users/index.tsx===
import React, { ReactElement, useState } from 'react';
import { Button, Grid, Stack, Typography } from '@mui/material';
import Page from 'components/Page';
import Layout from 'layout';
import MainCard from 'components/MainCard';
import UserTable from 'components/administration/users/UserTable';
import CreateUserDialog from 'components/administration/users/CreateUserDialog';
import { PlusOutlined } from '@ant-design/icons';

const Users = () => {
  const [open, setOpen] = useState(false);
  const [users, setUsers] = useState([]);

  const handleOpenDialog = () => {
    setOpen(true);
  };

  const handleCloseDialog = () => {
    setOpen(false);
  };

  const handleCreateUser = (user) => {
    

    fetch('/api/invites', {
      method: 'POST',
      body: JSON.stringify(user)
    }).then((response) => {
      
      setUsers([...users, user]);
      handleCloseDialog();
    });
  };

  return (
    <Page title="Users">
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="h4">Users</Typography>
            <Button variant="contained" onClick={handleOpenDialog}>
              <Stack direction={'row'} gap={1} alignItems={'center'}>
                <PlusOutlined /> {' Invite User'}
              </Stack>
            </Button>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <MainCard>
            <UserTable users={users} />
          </MainCard>
        </Grid>
      </Grid>
      <CreateUserDialog open={open} onClose={handleCloseDialog} onCreateUser={handleCreateUser} />
    </Page>
  );
};

Users.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Users;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/address.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// utils
import { fetcher } from 'utils/axios';

// types
import { Address } from 'types/e-commerce';

export const endpoints = {
  key: 'api/address',
  list: '/list', // server URL
  insert: '/new', // server URL
  update: '/edit', // server URL
  delete: '/delete' // server URL
};

export function useGetAddress() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      address: data?.address as Address[],
      addressLoading: isLoading,
      addressError: error,
      addressValidating: isValidating,
      addressEmpty: !isLoading && !data?.address?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function insertAddress(newAddress: Address) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentAddress: any) => {
      newAddress.id = currentAddress.address.length + 1;
      const addedAddress: Address[] = [...currentAddress.address, newAddress];

      return {
        ...currentAddress,
        address: addedAddress
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newAddress };
  //   await axios.post(endpoints.key + endpoints.insert, data);
}

export async function updateAddress(addressId: string | number | undefined, updatedAddress: Address) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentAddress: any) => {
      const newAddress: Address[] = currentAddress.address.map((address: Address) =>
        address.id === addressId ? { ...address, ...updatedAddress } : address
      );

      return {
        ...currentAddress,
        address: newAddress
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { list: updatedAddress };
  //   await axios.post(endpoints.key + endpoints.update, data);
}

export async function deleteAddress(addressId: number) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentAddress: any) => {
      const nonDeletedAddress = currentAddress.address.filter((address: Address) => address.id !== addressId);

      return {
        ...currentAddress,
        address: nonDeletedAddress
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { addressId };
  //   await axios.post(endpoints.key + endpoints.delete, data);
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/auth/[...nextauth].ts===
// next
import NextAuth, { NextAuthOptions } from 'next-auth';
import Auth0Provider from 'next-auth/providers/auth0';
import CredentialsProvider from 'next-auth/providers/credentials';

// third-party
import { CustomSession } from 'backend/controllers/AuthController';
import useConfig from 'hooks/useConfig';

export let users = [
  {
    id: 1,
    name: 'Jone Doe',
    email: 'info@codedthemes.com',
    password: '123456'
  }
];

export const authOptions: NextAuthOptions = {
  secret: process.env.NEXTAUTH_SECRET_KEY,

  providers: [
    Auth0Provider({
      name: 'Auth0',
      clientId: process.env.AUTH0_CLIENT_ID!,
      clientSecret: process.env.AUTH0_CLIENT_SECRET!,
      issuer: `https://${process.env.AUTH0_DOMAIN}`,
      httpOptions: {
        timeout: 10000000
      }
    }),
    // Custom Provider for SECRET_KEY, CLIENT_ID, CLIENT_ENVIRONMENT
    CredentialsProvider({
      // The name to display on the sign in form (e.g. 'Sign in with...')
      name: 'Credentials',
      // The credentials is used to generate a suitable form on the sign in page.
      // You can specify whatever fields you are expecting to be submitted.
      // e.g. domain, username, password, 2FA token, etc.
      // You can pass any HTML attribute to the <input> tag through the object.
      credentials: {
        username: { label: 'Username', type: 'text', placeholder: 'jsmith' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials, req) {
        // You need to provide your own logic here that takes the credentials
        // submitted and returns either a object representing a user or value
        // that is false/null if the credentials are invalid.
        // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }
        // You can also use the `req` object to obtain additional parameters
        // (i.e., the request IP address)
        // 
        const res = await fetch('/api/secure/auth', {
          method: 'POST',
          body: JSON.stringify(credentials),
          headers: { 'Content-Type': 'application/json' }
        });
        const user = await res.json();

        // If no error and we have user data, return it
        if (res.ok && user) {
          return user;
        }
        // Return null if user data could not be retrieved
        return null;
      }
    })
  ],
  callbacks: {
    jwt: async ({ token, account, profile, trigger, session }) => {
      // 
      if (trigger === 'signIn') {
        // 
      }
      return { ...token, ...account, ...profile };
    },
    session: ({ session, token, user }) => {
      // 
      const customSession: CustomSession = {
        ...session,
        ...token,
        access_token: token.access_token as string,
        token_type: token.token_type as string,
        id_token: token.id_token as string,
        user: {
          type: token.type as string,
          name: token.name as string,
          email: token.email as string,
          picture: token.picture as string,
          providerAccountId: token.providerAccountId as string,
          provider: token.provider as string,
          given_name: token.given_name as string,
          family_name: token.family_name as string,
          locale: token.locale as string,
          scope: token.scope as string,
          email_verified: token.email_verified as boolean,
          nickname: token.nickname as string,
          updatedAt: token.updated_at as string,
          image: token.picture as string,
          user_id: token.providerAccountId as string
        }
      };

      return customSession;
    }
  },
  session: {
    strategy: 'jwt',
    maxAge: Number(process.env.JWT_TIMEOUT!)
  },
  jwt: {
    secret: process.env.JWT_SECRET
  },
  pages: {
    signIn: '/login',
    newUser: '/register'
  }
};

export default NextAuth(authOptions);

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/auth/logout/auth0.ts===
// next
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const returnTo = encodeURI(`${process.env.NEXTAUTH_URL}/login`);
  res.redirect(
    `https://${process.env.REACT_APP_AUTH0_DOMAIN}/v2/logout?client_id=${process.env.REACT_APP_AUTH0_CLIENT_ID}&returnTo=${returnTo}`
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/auth/logout/cognito.ts===
// next
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const returnTo = encodeURI(`${process.env.NEXTAUTH_URL}/api/auth/callback/cognito`);
  const logoutTo = encodeURI(`${process.env.NEXTAUTH_URL}/login`);
  res.redirect(
    `https://${process.env.REACT_APP_COGNITO_DOMAIN}/logout?response_type=code&client_id=${process.env.REACT_APP_COGNITO_CLIENT_ID}&redirect_uri=${returnTo}&logout_uri=${logoutTo}`
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/auth/protected.ts===
// This is an example of to protect an API route

import type { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from 'next';
import { authOptions } from './[...nextauth]';

import { getServerSession } from 'next-auth/next';

export function auth(
  ...args: [GetServerSidePropsContext['req'], GetServerSidePropsContext['res']] | [NextApiRequest, NextApiResponse] | []
) {
  return getServerSession(...args, authOptions);
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await auth(req, res);

  // const session = await getSession({ req });

  if (session) {
    res.send({ protected: true });
  } else {
    res.send({ protected: false });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/billing/initPlans.ts===
import BillingController from 'backend/controllers/BillingController';
import { TierModel } from 'backend/schemas/Billing';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (process.env.NODE_ENV === 'development' && req.method === 'GET') {
    // const plans = await BillingController.initBillingPlans(req, res);

    const tiers = await TierModel.create({
      name: 'system',
      description: 'System tier',
      billing_plan: '65eb5e6baae6a43e26d84e21'
    });

    // Send a response
    res.status(200).json(tiers);
  } else {
    // Handle other HTTP methods
    res.status(405).json({ message: 'Method Not Allowed' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/calender.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// third-party
import { v4 as UIDV4 } from 'uuid';

// utils
import { fetcher } from 'utils/axios';

// types
import { EventInput } from '@fullcalendar/common';

// ----------------------------------------------------------------------

export const endpoints = {
  key: 'api/calendar/events',
  add: '/add', // server URL
  udpate: '/update', // server URL
  delete: '/delete' // server URL
};

export function useGetEvents() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      events: data?.events as EventInput[],
      eventsLoading: isLoading,
      eventsError: error,
      eventsValidating: isValidating,
      eventsEmpty: !isLoading && !data?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function createEvent(newEvent: Omit<EventInput, 'id'>) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentEvents: any) => {
      const addedEvents: EventInput[] = [...currentEvents.events, { ...newEvent, id: UIDV4() }];

      return {
        ...currentEvents,
        events: addedEvents
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newEvent };
  //   await axios.post(endpoints.key + endpoints.add, data);
}

export async function updateEvent(
  eventId: string,
  updatedEvent: Partial<{
    allDay: boolean;
    start: Date | null;
    end: Date | null;
  }>
) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentEvents: any) => {
      const updatedEvents: EventInput[] = currentEvents.events.map((event: EventInput) =>
        event.id === eventId ? { ...event, ...updatedEvent } : event
      );

      return {
        ...currentEvents,
        events: updatedEvents
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newEvent };
  //   await axios.post(endpoints.key + endpoints.udpate, data);
}

export async function deleteEvent(eventId: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentEvents: any) => {
      const nonDeletedEvent = currentEvents.events.filter((event: EventInput) => event.id !== eventId);

      return {
        ...currentEvents,
        events: nonDeletedEvent
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newEvent };
  //   await axios.post(endpoints.key + endpoints.delete, data);
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/cart.ts===
import { useMemo } from 'react';
import { filter } from 'lodash';
import { Chance } from 'chance';

import useSWR, { mutate } from 'swr';
import { Address, CartCheckoutStateProps, ProductCardProps } from 'types/cart';

const chance = new Chance();
const LOCAL_STORAGE = 'mantis-ts-cart';

export const endpoints = {
  key: 'cart'
};

const initialState: CartCheckoutStateProps = {
  step: 0,
  products: [],
  subtotal: 0,
  total: 0,
  discount: 0,
  shipping: 0,
  billing: null,
  payment: {
    type: 'free',
    method: 'card',
    card: ''
  }
};

export function useGetCart() {
  const localProducts = localStorage.getItem(LOCAL_STORAGE);

  // to update local state based on key
  const { data, isLoading } = useSWR(
    endpoints.key,
    () => (localProducts ? (JSON.parse(localProducts) as CartCheckoutStateProps) : initialState),
    {
      revalidateIfStale: false,
      revalidateOnFocus: false,
      revalidateOnReconnect: false,
      onSuccess(data) {
        localStorage.setItem(LOCAL_STORAGE, JSON.stringify(data));
      }
    }
  );

  const memoizedValue = useMemo(() => ({ cart: data!, cartLoading: isLoading }), [data, isLoading]);

  return memoizedValue;
}

export function addToCart(product: ProductCardProps, products: ProductCardProps[]) {
  // to update local state based on key
  let inCartProduct: ProductCardProps[];
  let newProduct: ProductCardProps;
  let subtotal: number = 0;
  let latestProducts: ProductCardProps[];

  newProduct = { ...product, itemId: chance.timestamp() };
  subtotal = newProduct.quantity * newProduct.offerPrice!;

  inCartProduct = filter(products, {
    id: newProduct.id,
    color: newProduct.color,
    size: newProduct.size
  });
  if (inCartProduct && inCartProduct.length > 0) {
    const newProducts = products.map((item) => {
      if (newProduct.id === item.id && newProduct.color === item.color && newProduct.size === item.size) {
        return { ...newProduct, quantity: newProduct.quantity + inCartProduct[0].quantity };
      }
      return item;
    });
    latestProducts = newProducts;
  } else {
    latestProducts = [...products, newProduct];
  }

  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        products: latestProducts,
        subtotal: currentCart.subtotal + subtotal,
        total: currentCart.total + subtotal
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function updateCartProduct(id: string | number, quantity: number, products: ProductCardProps[]) {
  // to update local state based on key
  let newProduct: ProductCardProps;
  let subtotal: number = 0;
  let oldSubTotal: number = 0;
  let latestProducts: ProductCardProps[];

  newProduct = filter(products, { itemId: id })[0];

  subtotal = quantity * newProduct.offerPrice!;
  oldSubTotal = 0;

  latestProducts = products.map((item) => {
    if (id === item.itemId) {
      oldSubTotal = item.quantity * (item.offerPrice || 0);
      return { ...item, quantity };
    }
    return item;
  });

  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        products: latestProducts,
        subtotal: currentCart.subtotal - oldSubTotal + subtotal,
        total: currentCart.total - oldSubTotal + subtotal
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function removeCartProduct(id: string | number, products: ProductCardProps[]) {
  // to update local state based on key
  let newProduct: ProductCardProps;
  let subtotal: number = 0;
  let latestProducts: ProductCardProps[];

  newProduct = filter(products, { itemId: id })[0];

  subtotal = newProduct.quantity * newProduct.offerPrice!;
  latestProducts = filter(products, (item) => item.itemId !== id);

  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        products: latestProducts,
        subtotal: currentCart.subtotal - subtotal,
        total: currentCart.total - subtotal
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setCheckoutStep(step: number) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        step
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setNextStep() {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        step: currentCart.step + 1
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setBackStep() {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        step: currentCart.step - 1
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setBillingAddress(billing: Address | null) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        billing
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setCartDiscount(code: string, total: number) {
  // to update local state based on key
  let amount = 0;
  if (total > 0) {
    switch (code) {
      case 'BERRY50':
        amount = chance.integer({ min: 1, max: total < 49 ? total : 49 });
        break;
      case 'FLAT05':
        amount = total < 5 ? total : 5;
        break;
      case 'SUB150':
        amount = total < 150 ? total : 150;
        break;
      case 'UPTO200':
        amount = chance.integer({ min: 1, max: total < 199 ? total : 199 });
        break;
      default:
        amount = 0;
    }
  }

  let difference = 0;

  mutate(
    endpoints.key,
    (currentCart: any) => {
      if (currentCart.discount > 0) {
        difference = currentCart.discount;
      }

      const newCart = {
        ...currentCart,
        discount: amount,
        total: currentCart.total + difference - amount
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setShippingCharge(charge: string, shipping: number) {
  // to update local state based on key
  let newShipping = 0;
  if (shipping > 0 && charge === 'free') {
    newShipping = -5;
  }
  if (charge === 'fast') {
    newShipping = 5;
  }

  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = {
        ...currentCart,
        shipping,
        total: currentCart.total + newShipping,
        payment: {
          ...currentCart.payment,
          type: charge
        }
      };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setPaymentMethod(method: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = { ...currentCart, payment: { ...currentCart.payment, method } };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function setPaymentCard(card: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      const newCart = { ...currentCart, payment: { ...currentCart.payment, card } };

      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));
      return newCart;
    },
    false
  );
}

export function resetCart() {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentCart: any) => {
      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(initialState));
      return initialState;
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/addUsersToGroup.ts===
import { CometChat } from '@cometchat-pro/chat';
import { NextApiRequest, NextApiResponse } from 'next';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    return res.status(405).end();
  }

  const { guid, users } = req.body;

  try {
    await CometChat.addMembersToGroup(guid, users, []);
    res.status(200).json({ message: 'Users added to group successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to add users to group' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/bot/callback.ts===
import { NextApiRequest, NextApiResponse } from 'next';

//this is the callback from CometChat bot

export default async (req: NextApiRequest, res: NextApiResponse) => {
  

  res.status(200).json({ message: 'Message sent successfully' });
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/cometChatInit.ts===
import { CometChat } from '@cometchat-pro/chat';

export const initCometChat = async (): Promise<void> => {
  const appSettings = new CometChat.AppSettingsBuilder().build();
  try {
    await CometChat.init('YOUR_APP_ID', appSettings);
  } catch (error) {
    console.error('Failed to initialize CometChat:', error);
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/conversations/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import { CometChat } from '@cometchat-pro/chat';
import { initializeCometChat } from 'utils/comet-chat-utils';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    // Extract the user UID from the request body
    const { uid } = req.body;

    if (!uid || typeof uid !== 'string') {
      return res.status(400).json({ error: 'Valid user UID is required.' });
    }

    // Initialize CometChat and log in the user using the provided UID
    await initializeCometChat('YOUR_APP_ID', 'us', uid);

    // Set the limit for fetching conversations
    let limit: number = 30;
    let conversationRequest: CometChat.ConversationsRequest = new CometChat.ConversationsRequestBuilder().setLimit(limit).build();

    // Fetch the conversations
    const conversations = await conversationRequest.fetchNext();

    // Respond with the fetched conversations
    res.status(200).json(conversations);
  } catch (error) {
    console.error('Error fetching conversations:', error);
    res.status(500).json({ error: 'Failed to fetch conversations.' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/createGroup.ts===
import { CometChat } from '@cometchat-pro/chat';
import { NextApiRequest, NextApiResponse } from 'next';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    return res.status(405).end();
  }

  const { guid, groupName } = req.body;
  const group = new CometChat.Group(guid, groupName, CometChat.GROUP_TYPE.PUBLIC);

  try {
    const createdGroup = await CometChat.createGroup(group);
    res.status(200).json(createdGroup);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create group' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/createUser.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { CometChat } from '@cometchat-pro/chat';
import { initCometChat } from './cometChatInit';
import { ResponseError, UserPayload } from './types';

export default async (req: NextApiRequest, res: NextApiResponse<ResponseError | CometChat.User>) => {
  await initCometChat();

  const { userEmail, userName } = req.body as UserPayload;
  const newUser = new CometChat.User(userEmail);
  newUser.setName(userName || userEmail.split('@')[0]);

  try {
    const createdUser = await CometChat.createUser(newUser, 'YOUR_API_KEY');
    res.status(200).json(createdUser);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create user' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/filter.ts===
import { NextApiRequest, NextApiResponse } from 'next';

// This is mock dashboard data for Mantis MUI Theme
// You can use this to mock data for your theme

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const data = [
    {
      id: 1,
      from: 'User1',
      to: 'Alene',
      text: 'Hi Good Morning!',
      time: '11:23 AM'
    },
    {
      id: 2,
      from: 'Alene',
      to: 'User1',
      text: 'Hey. Very Good morning. How are you?',
      time: '11:23 AM'
    },
    {
      id: 3,
      from: 'User1',
      to: 'Alene',
      text: 'Good. Thank you',
      time: '11:23 AM'
    },
    {
      id: 4,
      from: 'Alene',
      to: 'User1',
      text: 'I need your minute, are you available?',
      time: '11:23 AM'
    }
  ];

  try {
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard data' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/getConversation.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { CometChat } from '@cometchat-pro/chat';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'GET') {
    return res.status(405).end();
  }

  const { uid } = req.query;
  const messagesRequest = new CometChat.MessagesRequestBuilder()
    .setUID(uid as string)
    .setLimit(50) // Fetch up to 50 messages. Adjust this number as needed.
    .build();

  try {
    const messages = await messagesRequest.fetchPrevious();
    res.status(200).json(messages);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/getUser.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { CometChat } from '@cometchat-pro/chat';
import { initCometChat } from './cometChatInit';
import { ResponseError } from './types';

export default async (req: NextApiRequest, res: NextApiResponse<ResponseError | CometChat.User>) => {
  await initCometChat();

  const { userEmail } = req.query;

  try {
    const user = await CometChat.getUser(userEmail as string);
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch user' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/getUserOrCreate.ts===
import { CometChat } from '@cometchat-pro/chat';
import { NextApiRequest, NextApiResponse } from 'next';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    return res.status(405).end();
  }

  const { userEmail } = req.body;

  try {
    const user = await CometChat.getUser(userEmail);
    res.status(200).json(user);
  } catch (error: any) {
    if (error.code === 'ERR_UID_NOT_FOUND') {
      const newUser = new CometChat.User(userEmail);
      newUser.setName(userEmail.split('@')[0]);
      const createdUser = await CometChat.createUser(newUser, 'YOUR_API_KEY');
      res.status(200).json(createdUser);
    } else {
      res.status(500).json({ error: 'Failed to fetch or create user' });
    }
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/initializeCometChat.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { CometChat } from '@cometchat-pro/chat';
import { ResponseError } from './types';

export default async (req: NextApiRequest, res: NextApiResponse<ResponseError | { message: string }>) => {
  try {
    const appSettings = new CometChat.AppSettingsBuilder().build();
    await CometChat.init('YOUR_APP_ID', appSettings);
    res.status(200).json({ message: 'CometChat initialized successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to initialize CometChat' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/insert.ts===
import { NextApiRequest, NextApiResponse } from 'next';

// This is mock dashboard data for Mantis MUI Theme
// You can use this to mock data for your theme

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const data = {};

  try {
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard data' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/types.ts===
export type ResponseError = {
  error: string;
};
export type UserPayload = {
  userEmail: string;
  userName?: string;
  newUserName?: string;
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/updateUser.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { CometChat } from '@cometchat-pro/chat';
import { initCometChat } from './cometChatInit';
import { ResponseError, UserPayload } from './types';

export default async (req: NextApiRequest, res: NextApiResponse<ResponseError | { message: string }>) => {
  await initCometChat();

  const { userEmail, newUserName } = req.body as UserPayload;
  const user = new CometChat.User(userEmail);
  user.setName(newUserName as string);

  try {
    await CometChat.updateUser(user, 'YOUR_API_KEY');
    res.status(200).json({ message: 'User updated successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to update user' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/users/id.ts===
import { NextApiRequest, NextApiResponse } from 'next';

// This is mock dashboard data for Mantis MUI Theme
// You can use this to mock data for your theme

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const data = {
    id: 1,
    name: 'Alene',
    company: 'ABC Pvt Ltd',
    role: 'Sr. Customer Manager',
    work_email: 'alene_work@company.com',
    personal_email: 'alene@company.com',
    work_phone: '380-293-0177',
    personal_phone: '380-293-0177',
    location: 'Port Narcos',
    avatar: 'avatar-1.png',
    status: 'Technical Department',
    lastMessage: '2h ago',
    birthdayText: 'happy Birthday Alene',
    unReadChatCount: 2,
    online_status: 'available'
  };

  try {
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard data' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat/users/index.ts===
import { NextApiRequest, NextApiResponse } from 'next';

// This is mock dashboard data for Mantis MUI Theme
// You can use this to mock data for your theme

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const data = {
    users: [
      {
        id: 1,
        name: 'Alene',
        company: 'ABC Pvt Ltd',
        role: 'Sr. Customer Manager',
        work_email: 'alene_work@company.com',
        personal_email: 'alene@company.com',
        work_phone: '380-293-0177',
        personal_phone: '380-293-0177',
        location: 'Port Narcos',
        avatar: 'avatar-1.png',
        status: 'Technical Department',
        lastMessage: '2h ago',
        birthdayText: 'happy Birthday Alene',
        unReadChatCount: 2,
        online_status: 'available'
      },
      {
        id: 2,
        name: 'Keefe',
        company: 'ABC Pvt Ltd',
        role: 'Dynamic Operations Officer',
        work_email: 'keefe_work@gmil.com',
        personal_email: 'keefe@gmil.com',
        work_phone: '253-418-5940',
        personal_phone: '253-418-5940',
        location: 'Afghanistan',
        avatar: 'avatar-2.png',
        status: 'Support Executive',
        lastMessage: '1:20 AM',
        birthdayText: 'happy Birthday Keefe',
        unReadChatCount: 3,
        online_status: 'available'
      },
      {
        id: 3,
        name: 'Lazaro',
        company: 'ABC Pvt Ltd',
        role: 'Resource Investigator',
        work_email: 'lazaro_work@gmil.com',
        personal_email: 'lazaro@gmil.com',
        work_phone: '283-029-1364',
        personal_phone: '283-029-1364',
        location: 'Albania',
        avatar: 'avatar-3.png',
        status: 'Resource Investigator',
        lastMessage: 'Yesterday',
        birthdayText: 'happy Birthday Lazaro',
        unReadChatCount: 1,
        online_status: 'available'
      },
      {
        id: 4,
        name: 'Hazle',
        company: 'ABC Pvt Ltd',
        role: 'Teamworker',
        work_email: 'hazle_work@gmil.com',
        personal_email: 'hazle@gmil.com',
        work_phone: '380-293-0177',
        personal_phone: '380-293-0177',
        location: 'Algeria',
        avatar: 'avatar-4.png',
        status: 'Teamworker',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Hazle',
        unReadChatCount: 0,
        online_status: 'do_not_disturb'
      },
      {
        id: 5,
        name: 'Herman Essertg',
        company: 'ABC Pvt Ltd',
        role: 'Co-ordinator',
        work_email: 'herman_essertg_work@gmil.com',
        personal_email: 'herman_essertg@gmil.com',
        work_phone: '253-418-5940',
        personal_phone: '253-418-5940',
        location: 'Andorra',
        avatar: 'avatar-5.png',
        status: 'Co-ordinator',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Herman',
        unReadChatCount: 0,
        online_status: 'do_not_disturb'
      },
      {
        id: 6,
        name: 'Wilhelmine Durrg',
        company: 'ABC Pvt Ltd',
        role: 'Monitor Evaluator',
        work_email: 'wilhelmine_durrg_work@gmil.com',
        personal_email: 'wilhelmine_durrg@gmil.com',
        work_phone: '380-293-0177',
        personal_phone: '380-293-0177',
        location: 'Angola',
        avatar: 'avatar-6.png',
        status: 'Monitor Evaluator',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Wilhelmine',
        unReadChatCount: 0,
        online_status: 'available'
      },
      {
        id: 7,
        name: 'Agilulf Fuxg',
        company: 'ABC Pvt Ltd',
        role: 'Specialist',
        work_email: 'agilulf_fuxg_work@gmil.com',
        personal_email: 'agilulf_fuxg@gmil.com',
        work_phone: '253-418-5940',
        personal_phone: '253-418-5940',
        location: 'Antigua and Barbuda',
        avatar: 'avatar-7.png',
        status: 'Specialist',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Agilulf',
        unReadChatCount: 0,
        online_status: 'available'
      },
      {
        id: 8,
        name: 'Adaline Bergfalks',
        company: 'ABC Pvt Ltd',
        role: 'Shaper',
        work_email: 'adaline_bergfalks_work@gmil.com',
        personal_email: 'adaline_bergfalks@gmil.com',
        work_phone: '253-118-5940',
        personal_phone: '253-118-5940',
        location: 'Argentina',
        avatar: 'avatar-6.png',
        status: 'Shaper',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Adaline',
        unReadChatCount: 0,
        online_status: 'offline'
      },
      {
        id: 9,
        name: 'Eadwulf Beckete',
        company: 'ABC Pvt Ltd',
        role: 'Implementer',
        work_email: 'eadwulf_beckete_work@gmil.com',
        personal_email: 'eadwulf_beckete@gmil.com',
        work_phone: '153-418-5940',
        personal_phone: '153-418-5940',
        location: 'Armenia',
        avatar: 'avatar-1.png',
        status: 'Implementer',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Eadwulf',
        unReadChatCount: 0,
        online_status: 'offline'
      },
      {
        id: 10,
        name: 'Midas',
        company: 'ABC Pvt Ltd',
        role: 'Leader',
        work_email: 'midas_work@gmil.com',
        personal_email: 'midas@gmil.com',
        work_phone: '252-418-5940',
        personal_phone: '252-418-5940',
        location: 'Australia',
        avatar: 'avatar-2.png',
        status: 'Leader',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Midas',
        unReadChatCount: 0,
        online_status: 'offline'
      },
      {
        id: 11,
        name: 'Uranus',
        company: 'ABC Pvt Ltd',
        role: 'Facilitator',
        work_email: 'uranus_work@gmil.com',
        personal_email: 'uranus@gmil.com',
        work_phone: '253-218-5940',
        personal_phone: '253-218-5940',
        location: 'Austria',
        avatar: 'avatar-3.png',
        status: 'Facilitator',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Uranus',
        unReadChatCount: 0,
        online_status: 'available'
      },
      {
        id: 12,
        name: 'Peahen',
        company: 'ABC Pvt Ltd',
        role: 'Coach',
        work_email: 'peahen_work@gmil.com',
        personal_email: 'peahen@gmil.com',
        work_phone: '253-418-1940',
        personal_phone: '253-418-1940',
        location: 'Azerbaijan',
        avatar: 'avatar-4.png',
        status: 'One of the Graces.',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Peahen',
        unReadChatCount: 0,
        online_status: 'do_not_disturb'
      },
      {
        id: 13,
        name: 'Menelaus',
        company: 'ABC Pvt Ltd',
        role: 'Facilitator',
        work_email: 'menelaus_work@gmil.com',
        personal_email: 'menelaus@gmil.com',
        work_phone: '053-418-5940',
        personal_phone: '053-418-5940',
        location: 'Bahamas',
        avatar: 'avatar-5.png',
        status: 'To stay',
        lastMessage: '4/25/2021',
        birthdayText: 'happy Birthday Menelaus',
        unReadChatCount: 0,
        online_status: 'offline'
      }
    ]
  };

  try {
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard data' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/chat.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// utils
import { fetcher, fetcherPost } from 'utils/axios';

// types
import { UserProfile } from 'types/user-profile';
import { ChatHistory } from 'types/chat';

export const endpoints = {
  key: 'api/chat',
  list: '/users', // server URL
  update: '/filter' // server URL
};

export function useGetUsers() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      users: data?.users as UserProfile[],
      usersLoading: isLoading,
      usersError: error,
      usersValidating: isValidating,
      usersEmpty: !isLoading && !data?.users?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export function useGetUserChat(userName: string) {
  const URL = [endpoints.key + endpoints.update, { user: userName, endpoints: 'chat' }];

  const { data, isLoading, error, isValidating } = useSWR(URL, fetcherPost, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      chat: (data as ChatHistory[]) || [],
      chatLoading: isLoading,
      chatError: error,
      chatValidating: isValidating,
      chatEmpty: !isLoading && !data?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function insertChat(userName: string, newChat: ChatHistory) {
  const URL = [endpoints.key + endpoints.update, { user: userName, endpoints: 'chat' }];

  // to update local state based on key
  mutate(
    URL,
    (currentChat: any) => {
      const addedChat: ChatHistory[] = [...currentChat, newChat];
      return addedChat;
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  // const data = { chat: newChat };
  // await axios.post(endpoints.key + endpoints.update, data);
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/customer.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// utils
import { fetcher } from 'utils/axios';

// types
import { CustomerList, CustomerProps } from 'types/customer';

const initialState: CustomerProps = {
  modal: false
};

export const endpoints = {
  key: 'api/customer',
  list: '/list', // server URL
  modal: '/modal', // server URL
  insert: '/insert', // server URL
  update: '/update', // server URL
  delete: '/delete' // server URL
};

export function useGetCustomer() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      customers: data?.customers as CustomerList[],
      customersLoading: isLoading,
      customersError: error,
      customersValidating: isValidating,
      customersEmpty: !isLoading && !data?.customers?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function insertCustomer(newCustomer: CustomerList) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentCustomer: any) => {
      newCustomer.id = currentCustomer.customers.length + 1;
      const addedCustomer: CustomerList[] = [...currentCustomer.customers, newCustomer];

      return {
        ...currentCustomer,
        customers: addedCustomer
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newCustomer };
  //   await axios.post(endpoints.key + endpoints.insert, data);
}

export async function updateCustomer(customerId: number, updatedCustomer: CustomerList) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentCustomer: any) => {
      const newCustomer: CustomerList[] = currentCustomer.customers.map((customer: CustomerList) =>
        customer.id === customerId ? { ...customer, ...updatedCustomer } : customer
      );

      return {
        ...currentCustomer,
        customers: newCustomer
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { list: updatedCustomer };
  //   await axios.post(endpoints.key + endpoints.update, data);
}

export async function deleteCustomer(customerId: number) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentCustomer: any) => {
      const nonDeletedCustomer = currentCustomer.customers.filter((customer: CustomerList) => customer.id !== customerId);

      return {
        ...currentCustomer,
        customers: nonDeletedCustomer
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { customerId };
  //   await axios.post(endpoints.key + endpoints.delete, data);
}

export function useGetCustomerMaster() {
  const { data, isLoading } = useSWR(endpoints.key + endpoints.modal, () => initialState, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      customerMaster: data,
      customerMasterLoading: isLoading
    }),
    [data, isLoading]
  );

  return memoizedValue;
}

export function handlerCustomerDialog(modal: boolean) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.modal,
    (currentCustomermaster: any) => {
      return { ...currentCustomermaster, modal };
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/environments/[id]/flags.ts===
import PromptFlagController from 'backend/controllers/PromptFlagController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;

    if (method === 'GET') {
      return await PromptFlagController.getFlagMetaByEnv(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/environments/[id]/index.ts===
import EnvironmentController from 'backend/controllers/EnvironmentController';
import { NextApiRequest, NextApiResponse } from 'next';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;

    if (method === 'GET') {
      return EnvironmentController.get(req, res);
    }

    if (method === 'DELETE') {
      return EnvironmentController.delete(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/environments/index.ts===
import EnvironmentController from 'backend/controllers/EnvironmentController';
import { NextApiRequest, NextApiResponse } from 'next';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    if (req.method === 'GET') {
      return EnvironmentController.getEnvs(req, res);
    }

    if (req.method === 'POST') {
      
      return EnvironmentController.post(req, res);
    }

    if (req.method === 'PUT') {
      return EnvironmentController.put(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    

    return res.status(500).json({ error: 'Internal Server Error' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/history/[...id].ts===
import PromptHistoryController from 'backend/controllers/PromptHistoryController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;

    if (method === 'GET') {
      return await PromptHistoryController.get(req, res);
    }

    if (method === 'DELETE') {
      return await PromptHistoryController.delete(req, res);
    }

    if (method === 'PUT') {
      return await PromptHistoryController.put(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/history/append.ts===
import PromptHistoryController from 'backend/controllers/PromptHistoryController';
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await dbConnect();
    // Your code here
    const { method } = req;

    if (method === 'POST') {
      const { historyId, queryResponsePairId } = req.body;

      const updatedHistory = await PromptHistoryController.appendToHistory(historyId, queryResponsePairId);

      return res.status(200).json(updatedHistory);
    }

    return res.status(200).json({ message: 'Success' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/history/index.ts===
import PromptHistoryController from 'backend/controllers/PromptHistoryController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse): Promise<void> {
  try {
    if (req.method === 'GET') {
      return await PromptHistoryController.getAll(req, res);
    }

    if (req.method === 'POST') {
      return await PromptHistoryController.post(req, res);
    }
  } catch (error) {
    

    return res.status(500).json({ error: 'Failed to fetch prompt data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/history/query.ts===
import PromptHistoryController from 'backend/controllers/PromptHistoryController';
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';
import * as yup from 'yup';

const validate = yup.object().shape({
  pairId: yup.string().required('pairId is required.'),
  queryBody: yup.object().required('queryBody is required.'),
  responseBody: yup.object().required('responseBody is required.')
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await dbConnect();

    const { method, body } = req;

    if (method === 'GET') {
      const pair = await PromptHistoryController.createNewQueryResponsePair({
        body: body
      });
      
      return res.status(200).json(pair);
    }

    if (method === 'POST') {
      validate.validate(req.body, {
        abortEarly: false
      });

      

      const { pairId, queryBody, responseBody } = req.body;

      const pair = await PromptHistoryController.updateQueryResponsePair(pairId, queryBody, responseBody);

      if (!pair) {
        return res.status(404).json({ message: 'QueryResponsePair not found' });
      }

      return res.status(200).json(pair);
    }

    return res.status(200).json({ message: 'Success' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/install/db.ts===
// This is a vercel function that is intend to be run once to populate some of the common details in the database
import { VercelRequest, VercelResponse } from '@vercel/node';
import { dbConnect } from 'backend/db/connection';
import InferenceParameters from 'backend/schemas/InferenceParameters';
import Model, { ModelFormatting } from 'backend/schemas/Model';
import * as yup from 'yup';

export type Body = {};

const bodySchema = yup.object().shape({
  // Examples of how to use yup to validate the request body
  //   prompt: yup.string().required('prompt is required.'),
  //   max_tokens_to_sample: yup
  //     .number()
  //     .required('max_tokens_to_sample is required.')
  //     .positive('max_tokens_to_sample must be positive.')
  //     .integer('max_tokens_to_sample must be an integer.'),
  //   modelId: yup.string().required('modelId is required.')
});

const dbInstall = async (req: VercelRequest, res: VercelResponse) => {
  try {
    await dbConnect();

    const model = new Model();
    model.inference_parameters = [
      new InferenceParameters({
        key: 'temperature',
        value: 0.7
      }).save(),
      new InferenceParameters({
        key: 'max_tokens_to_sample',
        value: 100
      }).save(),
      new InferenceParameters({
        key: 'top_p',
        value: 0.9
      }).save(),
      new InferenceParameters({
        key: 'top_k',
        value: 40
      }).save(),
      new InferenceParameters({
        key: 'stop_sequences',
        value: ['\n\nHuman:']
      }).save()
    ];
    model.inference;

    model.modelId = 'anthropic.claude-v2:1';
    model.name = 'name';
    model.framework = 'aws';

    const formattingModel = new ModelFormatting();
    formattingModel.system_prefix = 'System:';
    formattingModel.system_suffix = '\n\n';
    formattingModel.user_prefix = 'Human: ';
    formattingModel.user_suffix = '\n\n';
    formattingModel.assistant_prefix = 'Assistant: ';
    formattingModel.assistant_suffix = '\n\n';

    // find then save if not exists
    const found = await Model.findOne({ name: model.name });
    if (found) {
      
      found.model_formatting = formattingModel;
      await found.save();

      return res.status(200).json({ message: 'Model already exists', model: found });
    }
    await formattingModel.save();
    model.model_formatting = formattingModel;
    await model.save();

    return res.status(200).json({ message: 'Model created', model });

    // Validate the request body against the schema
    // const _invoke: Body = await bodySchema.validate(req.body, {
    //   abortEarly: false, // Include all errors
    //   stripUnknown: true // Remove unknown keys
    // });
  } catch (error) {
    if (error instanceof yup.ValidationError) {
      // Send back a 400 response with the validation errors
      return res.status(400).json({ errors: error.errors });
    } else {
      
      // Handle other types of errors
      return res.status(500).json({ message: error?.toString(), error: error });
    }
  }
};

export default dbInstall;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/[...id].tsx===
import IntegrationController from 'backend/controllers/IntegrationsControllers';
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';
import * as yup from 'yup';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await dbConnect();

    const { method } = req;

    if (method === 'PUT') {
      return await IntegrationController.updateIntegration(req, res);
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/bedrock/ListFoundationModels.ts===
// vercel edge

import { ListFoundationModelsCommand, BedrockClient } from '@aws-sdk/client-bedrock';
import { NextApiRequest, NextApiResponse } from 'next';

const ListFoundationModels = async (req: NextApiRequest, res: NextApiResponse) => {
  const bedrock = new BedrockClient({ region: 'us-east-1' });

  const command = new ListFoundationModelsCommand({});
  const response = await bedrock.send(command);

  return res.status(200).json(response);
};

export default ListFoundationModels;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/bedrock/runtime/InvokeModel.ts===
// create a vercel edge function for running the bedrock invoke model function

// Path: src/pages/api/integrations/bedrock/runtime/InvokeModel.ts
import { VercelRequest, VercelResponse } from '@vercel/node';
import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';
import * as yup from 'yup';
import { dbConnect } from 'backend/db/connection';
import { auth } from 'backend/controllers/AuthController';
import { NextApiRequest, NextApiResponse } from 'next';

/**
 * This function is used to invoke a model in the bedrock runtime
 * The parameters that we should extract is the modelId, prompt, and max_tokens_to_sample, and the content type
 * @param req
 * @param res
 * @returns
 */

export type InvokeModelBody = {
  prompt: string;
  max_tokens_to_sample?: number; // default to 500 if not provided;
  modelId: string;
};

const invokeModelSchema = yup.object().shape({
  prompt: yup.string().required('prompt is required.'),
  max_tokens_to_sample: yup
    .number()
    .required('max_tokens_to_sample is required.')
    .positive('max_tokens_to_sample must be positive.')
    .integer('max_tokens_to_sample must be an integer.'),
  modelId: yup.string().required('modelId is required.')
});

export const Invoke = async (body: unknown) => {
  const { prompt, max_tokens_to_sample, modelId }: InvokeModelBody = await invokeModelSchema.validate(body, {
    abortEarly: false, // Include all errors
    stripUnknown: true // Remove unknown keys
  });

  const bedrock = new BedrockRuntimeClient({
    region: 'us-east-1',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID as string,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY as string
    }
  });

  const input = {
    // InvokeModelRequest
    body: JSON.stringify({
      prompt: prompt, // required
      max_tokens_to_sample: max_tokens_to_sample || 500
    }), // required
    contentType: 'application/json',
    accept: 'application/json',
    modelId: modelId // required
  };

  

  const command = new InvokeModelCommand(input);

  const response = await bedrock.send(command);

  const responseBody = new TextDecoder().decode(response.body as Uint8Array);

  return responseBody;
};

const InvokeModel = async (req: NextApiRequest, res: NextApiResponse) => {
  try {
    await auth(req, res);
    await dbConnect();

    // const promptModel = new PromptModel();
    // promptModel.save();
    // Validate the request body against the schema
    const responseBody = await Invoke(req.body);

    return res.status(200).json(JSON.parse(responseBody));
  } catch (error) {
    if (error instanceof yup.ValidationError) {
      // Send back a 400 response with the validation errors
      return res.status(400).json({ errors: error.errors });
    } else {
      
      // Handle other types of errors
      return res.status(500).json({ message: error?.toString(), error: error });
    }
  }
};

export default InvokeModel;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/bedrock/runtime/InvokeModelStream.ts===
// create a vercel edge function for running the bedrock invoke model function

// Path: src/pages/api/integrations/bedrock/runtime/InvokeModel.ts
import { VercelRequest, VercelResponse } from '@vercel/node';
import { BedrockRuntimeClient, InvokeModelWithResponseStreamCommand, ResponseStream } from '@aws-sdk/client-bedrock-runtime';

/**
 * This function is used to invoke a model in the bedrock runtime
 * The parameters that we should extract is the modelId, prompt, and max_tokens_to_sample, and the content type
 * @param req
 * @param res
 * @returns
 */

// export const config = {
//   runtime: 'edge'
// };

const InvokeModelStream = async (req: VercelRequest, res: VercelResponse) => {
  const bedrock = new BedrockRuntimeClient({ region: 'us-east-1' });

  const input = {
    // InvokeModelRequest
    body: JSON.stringify({
      prompt: 'Human: Once upon a time\n\nAssistant:',
      max_tokens_to_sample: 10
    }), // required
    contentType: 'application/json',
    accept: 'application/json',
    modelId: 'anthropic.claude-v2:1' // required
  };
  const command = new InvokeModelWithResponseStreamCommand(input);
  const response = await bedrock.send(command);

  // This is a streaming response
  // We can read the response body as a stream

  // ReadableStream<Uint8Array>

  const wStream = new WritableStream({
    write(chunk) {
      const decoder = new TextDecoder();
      
      return chunk;
    }
  });

  if (response.body) {
    for (const chunk of response.body) {
      //   wStream.write(chunk);
      
    }
  }

  //   return stream;
  return res.status(200).json({});
};

export default InvokeModelStream;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/auth/token.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import axios from 'axios';

export async function createCometChatToken(req: VercelRequest, res: VercelResponse): Promise<VercelResponse | void> {
  try {
    const { uid, force } = req.body;

    if (!uid) {
      return res.status(400).json({ error: 'UID is required' });
    }

    const url = `https://${process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_APP_ID}.api-${process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REGION}.cometchat.io/v3/users/${uid}/auth_tokens`;

    const apiResponse = await axios.post(
      url,
      { force },
      {
        headers: {
          accept: 'application/json',
          'content-type': 'application/json',
          apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_API_KEY
        }
      }
    );

    res.status(200).json(apiResponse.data);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An unexpected error occurred' });
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  try {
    switch (req.method) {
      case 'POST':
        await createCometChatToken(req, res);
        break;
      default:
        res.status(405).json({ error: 'Method not allowed' });
        break;
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An unexpected error occurred' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/bots/callback.ts===

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/bots/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import axios from 'axios';
import OpenAI from 'openai';
import { BotMessageCallback, Message, RawMessage } from '../types';
import { BASE_API_URL } from '../utils/constants';

async function handleBotPost(req: VercelRequest, res: VercelResponse): Promise<void> {
  const { uid, receiver, receiverType, category, type, data, multipleReceivers, tags } = req.body;

  const headers: { [key: string]: string } = {
    Accept: 'application/json',
    'Content-Type': 'application/json',
    apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || ''
  };

  const payload = {
    receiver,
    receiverType,
    category,
    type,
    data,
    multipleReceivers,
    tags
  };

  try {
    const { data, bot }: BotMessageCallback = req.body;

    let botName = bot;

    const BOT_MESSAGES_URL = `${BASE_API_URL}/bots/${botName}/messages`;

    const { conversationId, sender } = data;

    await fetch(`${process.env.REACT_APP_API_URL}/api/integrations/cometchat/messages?conversationId=${conversationId}`, {
      headers: {
        onBehalfOf: sender,
        Accept: 'application/json',
        'Content-Type': 'application/json',
        apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || ''
      }
    })
      .then(async (resp) => {
        const json: RawMessage[] = await resp.json();
        let ent;
        let messages = json.map((message: RawMessage) => {
          const { data } = message;
          const { text, entities } = data;
          ent = entities;

          return {
            role: entities.sender.uid === botName ? 'assistant' : 'user',
            content: text
          };
        });

        

        await fetch(`${process.env.REACT_APP_API_URL}/api/integrations/openai/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            messages: messages,
            model: 'gpt-3-5-turbo',
            streaming: false
          })
        })
          .then(async (resp1) => {
            // 

            let text = await resp1.text();

            const { choices } = JSON.parse(text);

            const { index, message, finish_reason } = choices[0];

            // now we send a message back to cometCHat as the bot

            const payload = {
              receiver: sender,
              receiverType: 'user',
              category: 'message',
              type: 'text',
              data: {
                text: message.content
              }
            };

            await fetch(BOT_MESSAGES_URL, {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || ''
              },
              body: JSON.stringify(payload)
            })
              .then(async (resp2) => {
                let json = await resp2.json();
                
              })
              .catch((error) => {
                
              });
          })
          .catch((error) => {
            
          });
      })
      .catch((error) => {
        
      });

    // await fetch(BOT_MESSAGES_URL, {

    // })

    // const {data: responseData} = await axios.post(BOT_MESSAGES_URL, payload, {
    //   headers,
    // });

    // res.status(200).json(responseData);
  } catch (error) {
    res.status(500).json({ error: 'Failed to send bot message' });
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  
  res.send(req.body);

  switch (req.method) {
    case 'POST':
      await handleBotPost(req, res);
      break;
    default:
      res.status(405).end(); // Method Not Allowed
      break;
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/conversations/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import axios from 'axios';
import { BASE_API_URL } from '../utils/constants';

const URL = `${BASE_API_URL}/conversations`;

async function handleGet(req: VercelRequest, res: VercelResponse): Promise<void> {
  const { conversationType, withTags, tags, withUserAndGroupTags, userTags, groupTags, unread, perPage = 100, page = 1 } = req.query;

  const params = {
    conversationType,
    withTags,
    tags,
    withUserAndGroupTags,
    userTags,
    groupTags,
    unread,
    perPage,
    page
  };

  const headers = {
    Accept: 'application/json',
    apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY,
    onBehalfOf: 'jasonmorrigu', // we should pull this from a token or something of the user
    'Content-Type': 'application/json'
  };

  try {
    const { data } = await axios.get(URL, { params, headers }).catch((error) => {
      
      throw error;
    });

    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error });
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  switch (req.method) {
    case 'GET':
      await handleGet(req, res);
      break;
    default:
      res.status(405).end(); // Method Not Allowed
      break;
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/messages/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import axios from 'axios';
import { MessagePayload } from '../types';
import { BASE_API_URL } from '../utils/constants';
const MESSAGES_URL = `${BASE_API_URL}/messages`;

async function handleGet(req: VercelRequest, res: VercelResponse): Promise<void> {
  const {
    searchKey,
    receiverType,
    affix,
    id,
    category,
    type,
    hideDeleted,
    onlyDeleted,
    hideReplies,
    count,
    sentAt,
    limit = 100,
    conversationId,
    withTags,
    tags,
    categories,
    types,
    fromTimestamp,
    toTimestamp
  } = req.query;

  const params = {
    searchKey,
    receiverType,
    affix,
    id,
    category,
    type,
    hideDeleted,
    onlyDeleted,
    hideReplies,
    count,
    sentAt,
    limit,
    conversationId,
    withTags,
    tags,
    categories,
    types,
    fromTimestamp,
    toTimestamp
  };

  const headers = {
    Accept: 'application/json',
    apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY, // Store your API key in an environment variable
    onBehalfOf: ''
  };

  if (req.headers['onBehalfOf']) {
    headers['onBehalfOf'] = req.headers['onBehalfOf'] as string;
  }

  try {
    const {
      data: { data, ...meta }
    } = await axios.get(MESSAGES_URL, { params, headers });

    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
}

async function handlePost(req: VercelRequest, res: VercelResponse): Promise<void> {
  const { receiver, receiverType, data, category, type, multipleReceivers, ...body }: MessagePayload = req.body;

  if (!receiver || !receiverType || !data) {
    res.status(400).json({ error: 'Missing required fields' });
  }

  const payload = {
    receiver: 'morrigu-local',
    receiverType,
    category,
    type,
    data,
    multipleReceivers
  };

  //   const headers: {[key: string]: string} = {
  //     Accept: 'application/json',
  //     'Content-Type': 'application/json',
  //     apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || '', // Store your API key in an environment variable
  //   };
  //   
  //   if (req.headers['onBehalfOf']) {
  //     headers['onBehalfOf'] = req.headers['onBehalfOf'] as string;
  //   }

  try {
    const resp = await fetch(MESSAGES_URL, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || '', // Store your API key in an environment variable
        onBehalfOf: req.headers['onbehalfof'] as string
      },
      body: JSON.stringify(payload)
    });

    const json = await resp.json();
    // const {data: responseData} = await axios.post(MESSAGES_URL, payload, {
    //   headers,
    // });
    res.status(200).json(json);
  } catch (error) {
    res.status(500).json({ error: 'Failed to send message' });
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  switch (req.method) {
    case 'GET':
      await handleGet(req, res);
      break;
    case 'POST':
      await handlePost(req, res);
      break;
    default:
      res.status(405).end(); // Method Not Allowed
      break;
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/types.ts===
export type Entity = {
  uid: string;
  name: string;
  role: string;
  avatar?: string;
  status: string;
  lastActiveAt: number;
  createdAt?: number;
  conversationId?: string;
};

export type Entities = {
  sender: EntityType;
  receiver: EntityType;
};

export type EntityType = {
  entity: Entity;
  entityType: string;
};

export type MessageData = {
  text: string;
  entities: {
    sender: EntityType;
    receiver: EntityType;
  };
  resource: string;
  metadata?: Record<string, string>;
};

export type LastMessage = {
  id: string;
  muid: string;
  conversationId: string;
  sender: string;
  receiverType: string;
  receiver: string;
  category: string;
  type: string;
  data: MessageData;
  sentAt: number;
  updatedAt: number;
};

export type ConversationWith = {
  uid: string;
  name: string;
  avatar: string;
  status: string;
  role: string;
  lastActiveAt: number;
  createdAt: number;
  conversationId: string;
};

export type Conversation = {
  conversationId: string;
  conversationType: string;
  unreadMessageCount: string;
  createdAt: number;
  updatedAt: number;
  lastMessage: LastMessage;
  conversationWith: ConversationWith;
};

export type MessageDataDetail = {
  text: string;
  entities: {
    sender: Entity;
    receiver: Entity;
  };
  resource: string;
  metadata?: Record<string, string>;
};

export type UserStatus = {
  hasBlockedMe: boolean;
  blockedByMe: boolean;
  deactivatedAt: number;
  uid: string;
  name: string;
  lastActiveAt: number;
  role: string;
  status: string;
};

export type RawMessage = {
  id: string;
  muid: string;
  conversationId: string;
  sender: string;
  receiverType: string;
  receiver: string;
  category: string;
  type: string;
  data: MessageDataDetail;
  sentAt: number;
  updatedAt: number;
};

export type Message = {
  receiverId: string;
  type: string;
  receiverType: string;
  category: string;
  data: MessageDataDetail;
  text: string;
  id: string;
  muid: string;
  conversationId: string;
  sender: UserStatus;
  receiver: UserStatus;
  sentAt: number;
  updatedAt: number;
  rawMessage: RawMessage;
};

export type PostMessageData = {
  text?: string;
  metadata?: Record<string, string>;
  customData?: Record<string, string>;
  attachments?: {
    url: string;
    name: string;
    mimeType: string;
    extension: string;
    size: string;
  }[];
};

export type MultipleReceivers = {
  uids: string[];
  guids: string[];
};

export type MessagePayload = {
  receiver: string;
  receiverType: 'user' | 'group';
  category: string;
  type: string;
  data: PostMessageData;
  multipleReceivers?: MultipleReceivers;
  unset?: string[];
};

export type BotMessageCallback = {
  trigger: string;
  data: {
    id: string;
    conversationId: string;
    sender: string;
    receiverType: string;
    receiver: string;
    category: string;
    type: string;
    data: {
      text: string;
      entities: string[];
    };
    sentAt: number;
    updatedAt: number;
  };
  appId: string;
  origin: {
    platform: string;
  };
  chatAPIVersion: string;
  region: string;
  bot: string;
};

export type Pagination = {
  total: number;
  count: number;
  per_page: number;
  current_page: number;
  total_pages: number;
};

export type Cursor = {
  sentAt: number;
  id: number;
  affix: string;
};

export type Meta = {
  pagination: Pagination;
  cursor: Cursor;
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/users/[uid]/conversation.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import { BASE_API_URL } from '../../utils/constants';

export default async (req: VercelRequest, res: VercelResponse) => {
  const { uid } = req.query;
  const onBehalfOf = req.headers['onbehalfof'];

  if (!uid || !onBehalfOf) {
    return res.status(400).json({ error: 'Missing required parameters' });
  }

  const apiUrl = `${BASE_API_URL}/users/${uid}/conversations`;

  try {
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || '',
        onBehalfOf: onBehalfOf as string
      }
    });
    const data = await response.json();

    if (response.ok) {
      return res.status(200).json(data);
    } else {
      return res.status(response.status).json(data);
    }
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch conversation' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/users/[uid]/messages.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import { Message, Meta } from '../../types';
import { BASE_API_URL } from '../../utils/constants';

export default async (req: VercelRequest, res: VercelResponse) => {
  const { uid } = req.query;
  const onBehalfOf = req.headers['onbehalfof'];

  if (!uid || !onBehalfOf) {
    return res.status(400).json({ error: 'Missing required parameters' });
  }

  const apiUrl = `${BASE_API_URL}/users/${uid}/messages`;

  try {
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        apikey: process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REST_API_KEY || '',
        onBehalfOf: onBehalfOf as string
      }
    });
    const data: {
      data: Message[];
      meta: Meta;
    } = await response.json();

    if (response.ok) {
      return res.status(200).json(data);
    } else {
      return res.status(response.status).json(data);
    }
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch conversation' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/cometchat/utils/constants.ts===
export const BASE_API_URL = `https://${process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_APP_ID}.api-${process.env.NEXT_PUBLIC_REACT_APP_COMETCHAT_REGION}.cometchat.io/v3`;

const URLBuilder = () => {};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/index.ts===
import IntegrationController from 'backend/controllers/IntegrationsControllers';
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await dbConnect();
    const { method } = req;

    if (method === 'GET') {
      return await IntegrationController.getIntegrations(req, res);
    }

    if (method === 'POST') {
      return await IntegrationController.createIntegration(req, res);
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/openai/completions/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_REACT_APP_OPENAI_API_KEY as string
});

async function handlePost(req: VercelRequest, res: VercelResponse): Promise<void> {
  const messageHistory = req.body.messages;

  if (!messageHistory) {
    res.status(400).json({ error: 'Missing message history' });
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: messageHistory
    });

    res.status(200).json(response);
  } catch (error) {
    res.status(500).json({ error: 'Failed to get completion' });
  }
}

async function handleGet(req: VercelRequest, res: VercelResponse) {
  // Your GET logic here
  res.status(200).send('GET request received');
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  switch (req.method) {
    case 'POST':
      await handlePost(req, res);
      break;
    case 'GET':
      await handleGet(req, res);
      break;
    default:
      res.status(405).end(); // Method Not Allowed
      break;
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/openai/transcription/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import fs from 'fs';
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_REACT_APP_OPENAI_API_KEY
});

export async function handleTranscription(req: VercelRequest, res: VercelResponse): Promise<void> {
  const audioFile = req.body.file; // Replace with actual file handling
  const fileStream = fs.createReadStream(audioFile);

  try {
    const transcription = await openai.audio.transcriptions.create({
      file: fileStream,
      model: 'whisper-1'
    });
    res.status(200).json(transcription);
  } catch (error) {
    res.status(500).json({ error: 'Failed to transcribe audio' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/integrations/openai/translation/index.ts===
import { VercelRequest, VercelResponse } from '@vercel/node';
import OpenAIApi, { OpenAI } from 'openai';
import * as fs from 'fs';

export async function handleTranslation(req: VercelRequest, res: VercelResponse) {
  try {
    // Check if the API key is available
    if (!process.env.NEXT_PUBLIC_REACT_APP_OPENAI_API_KEY) {
      return res.status(500).json({ error: 'OpenAI API key is missing' });
    }

    // Initialize OpenAI client
    const client = new OpenAI({
      apiKey: process.env.NEXT_PUBLIC_REACT_APP_OPENAI_API_KEY
    });

    // Validate the input file (Replace this with your actual file validation logic)
    const audioFile = req.body.file; // Replace with actual file handling
    if (!audioFile) {
      return res.status(400).json({ error: 'No audio file provided' });
    }
    const fileStream = fs.createReadStream(audioFile);

    // Call OpenAI API for audio translation
    const resp = await new OpenAIApi.Audio.Transcriptions(client).create({
      file: fileStream,
      model: 'whisper-1'
    });

    // Send the API response
    res.status(200).json(resp);
  } catch (error) {
    // Handle unexpected errors
    console.error(error);
    res.status(500).json({ error: 'An unexpected error occurred' });
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse): Promise<void> {
  try {
    switch (req.method) {
      case 'POST':
        await handleTranslation(req, res);
        break;
      default:
        res.status(405).json({ error: 'Method not allowed' });
        break;
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An unexpected error occurred' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/invites/accept.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { getServerSession } from 'next-auth';
import { authOptions } from '../auth/[...nextauth]';
import { dbConnect } from 'backend/db/connection';
import * as jwt from 'jsonwebtoken';
import { Invite } from './index';
import OrganizationModel from 'backend/schemas/Organization';
import { UserModel } from 'backend/schemas';

export default async function acceptCallback(req: NextApiRequest, res: NextApiResponse) {
  try {
    // const user = await getServerSession(authOptions);
    await dbConnect();

    const token = req.query.token;
    const id_token = req.query.id_token;

    if (!token) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const decoded: {
      email: string;
      name: string;
    } = jwt.decode(token as string) as any;

    if (!decoded) {
      return res.status(400).json({ error: 'Invalid token' });
    }

    const decodedIdToken: {
      email: string;
      name: string;
      sub: string;
      picture: string;
      nickname: string;
      updated_at: string;
    } = jwt.decode(id_token as string) as any;

    if (!decodedIdToken) {
      return res.status(400).json({ error: 'Invalid ID token' });
    }

    
    

    const invites = await Invite.findOne({
      status: 'pending',
      email: decoded?.email as unknown as string,
      token: token
    });

    if (!invites) {
      
      return res.status(200).json({ error: 'No invites found' });
    }

    const user = await UserModel.create({
      id: decodedIdToken.sub,
      provider: 'auth0',
      email: decodedIdToken.email,
      name: decodedIdToken.name,
      data: {
        type: 'oauth',
        name: decodedIdToken.name,
        picture: decodedIdToken.picture,
        providerAccountId: decodedIdToken.sub,
        provider: 'auth0',
        scope: 'openid profile email',
        nickname: decodedIdToken.nickname,
        updatedAt: decodedIdToken.updated_at,
        image: decodedIdToken.picture,
        user_id: decodedIdToken.sub
      }
    });

    if (!user) {
      return res.status(404).json({ error: 'No user found' });
    }

    const updatedInvite = await Invite.findOneAndUpdate(
      {
        status: 'pending',
        email: decodedIdToken?.email as unknown as string
        // token: token
      },
      { status: 'accepted' }
    );

    const org = await OrganizationModel.findOne({
      users: {
        $in: [updatedInvite._id]
      }
    });

    if (!org) {
      return res.status(404).json({ error: 'Organization not found' });
    }

    // await org.users.push(user._id).save();

    const nuOrg = await OrganizationModel.updateOne({ _id: org._id }, { $pull: { users: updatedInvite._id } });

    if (!nuOrg) {
      return res.status(404).json({ error: 'Organization not updated' });
    }

    await OrganizationModel.findOneAndUpdate({ _id: org._id }, { $push: { users: user._id } });

    
    // // Validate the callback data

  } catch (error) {
    // Handle any errors that occur during the process
    console.error('Error resolving invitation:', error);
    res.status(500).json({ error: 'Failed to resolve invitation' });
  }
}

async function resolveInvitation(invitationId: string, code: string, state: string) {
  // Implement your logic to resolve the invitation here
  // ...

  // Return the resolved invitation
  return { invitationId, code, state };
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/invites/index.ts===
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';
import mongoose from 'mongoose';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';
import { getServerSession } from 'next-auth';
import { authOptions } from '../auth/[...nextauth]';
import { CustomSession } from 'backend/controllers/AuthController';
import UserController from 'backend/controllers/UserController';
import { UserModel } from 'backend/schemas';
import OrganizationModel from 'backend/schemas/Organization';

// Define a Mongoose schema for an Invite
export const inviteSchema = new mongoose.Schema({
  email: { type: String, required: true },
  name: { type: String, required: true },
  token: String,
  sentAt: { type: Date, default: Date.now },
  status: { type: String, default: 'pending' },
  organization: { type: mongoose.Schema.Types.ObjectId, ref: 'Organization' }
});

// Create a model or use an existing one
export const Invite = mongoose.models.Invite || mongoose.model('Invite', inviteSchema);

const transporter = nodemailer.createTransport({
  host: 'email-smtp.us-east-1.amazonaws.com', // Replace with the appropriate AWS region
  port: 587,
  secure: false, // true for 465, false for other ports
  auth: {
    user: 'AKIA2XAEOTXPJ46JTKV7', // Your SMTP username from the IAM console
    pass: 'BH21Q2FW11VDRwpmbUYkphP+NYXGAvsIuTea6sgrowDd'
  }
});

export default async function handler(req: NextApiRequest, res: NextApiResponse): Promise<void> {
  try {
    await dbConnect();

    if (req.method === 'GET') {
      const token = req.query.token;
      
      if (!token) {
        return res.status(400).json({ error: 'Missing required fields' });
      }

      const decoded = jwt.decode(token as string);

      if (!decoded) {
        return res.status(400).json({ error: 'Invalid token' });
      }

      const invites = await Invite.find({
        status: 'pending',
        email: decoded?.email as unknown as string,
        name: decoded?.name as unknown as string,
        token: token
      });

      if (invites.length === 0) {
        return res.status(404).json({ error: 'No invites found' });
      }

      return res.status(200).json(invites);
    } else if (req.method === 'POST') {
      const { email, name } = JSON.parse(req.body);
      const user = (await getServerSession(req, res, authOptions)) as CustomSession;

      if (!user) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const db_user = await UserModel.findOne({ email: user.user.email });

      if (!db_user) {
        return res.status(404).json({ error: 'User not found' });
      }

      const org = await OrganizationModel.findOne({
        users: {
          $in: [db_user._id]
        }
      });

      if (!org) {
        return res.status(404).json({ error: 'Organization not found' });
      }

      const token = jwt.sign({ email, name }, process.env.JWT_SECRET || '', { expiresIn: '48h' });

      const newInvite = new Invite({ email, name, token });
      const savedInvite = await newInvite.save();

      await org.users.push(savedInvite._id);

      await org.save();

      // Send an email with the JWT token
      const mailOptions = {
        from: '"Your Service" <jason@morrigu.ai>',
        // to: email,
        to: 'jason@morrigu.ai', // Replace with the recipient's email address
        subject: 'You are invited!',
        text: `Please use the following link to accept the invite: ${process.env.NODEMAILER_URL}/administration/invites/accept?token=${token}`,
        html: `<p>Please use the following link to accept the invite:</p><a href="${process.env.NODEMAILER_URL}/administration/invites/accept?token=${token}">Accept Invitation</a>`
      };

      await transporter.sendMail(mailOptions);

      res.status(201).json(savedInvite);
    } else {
      res.setHeader('Allow', ['GET', 'POST']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
    }
  } catch (error) {
    
    res.status(500).json({ error: 'Failed to process request' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/invoice.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// project-import
import { fetcher } from 'utils/axios';

// types
import { CountryType, InvoiceList, InvoiceProps } from 'types/invoice';

const countries: CountryType[] = [
  { code: 'US', label: 'United States Dollar', currency: 'Dollar', prefix: '$' },
  { code: 'GB', label: 'United Kingdom Pound', currency: 'Pound', prefix: '£' },
  { code: 'IN', label: 'India Rupee', currency: 'Rupee', prefix: '₹' },
  { code: 'JP', label: 'Japan Yun', currency: 'Yun', prefix: '¥' }
];

const initialState: InvoiceProps = {
  isOpen: false,
  isCustomerOpen: false,
  open: false,
  country: countries[0],
  countries: countries,
  alertPopup: false
};

export const endpoints = {
  key: 'api/invoice',
  actions: 'actions',
  list: '/list', // server URL
  insert: '/insert', // server URL
  update: '/update', // server URL
  delete: '/delete' // server URL
};

export function useGetInvoice() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      invoice: data?.invoice as InvoiceList[],
      invoiceLoading: isLoading,
      invoiceError: error,
      invoiceValidating: isValidating,
      invoiceEmpty: !isLoading && !data?.invoice?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function insertInvoice(newInvoice: InvoiceList) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentInvoice: any) => {
      newInvoice.id = currentInvoice.invoice.length + 1;
      const addedInvoice: InvoiceList[] = [...currentInvoice.invoice, newInvoice];

      return {
        ...currentInvoice,
        invoice: addedInvoice
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { newInvoice };
  //   await axios.post(endpoints.key + endpoints.insert, data);
}

export async function updateInvoice(invoiceId: number, updatedInvoice: InvoiceList) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentInvoice: any) => {
      const newInvoice: InvoiceList[] = currentInvoice.invoice.map((invoice: InvoiceList) =>
        invoice.id === invoiceId ? { ...invoice, ...updatedInvoice } : invoice
      );

      return {
        ...currentInvoice,
        invoice: newInvoice
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { list: updatedInvoice };
  //   await axios.post(endpoints.key + endpoints.update, data);
}

export async function deleteInvoice(invoiceId: number) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentInvoice: any) => {
      const nonDeletedInvoice = currentInvoice.invoice.filter((invoice: InvoiceList) => invoice.id !== invoiceId);

      return {
        ...currentInvoice,
        invoice: nonDeletedInvoice
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { invoiceId };
  //   await axios.post(endpoints.key + endpoints.delete, data);
}

export function useGetInvoiceMaster() {
  const { data, isLoading } = useSWR(endpoints.key + endpoints.actions, () => initialState, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      invoiceMaster: data,
      invoiceMasterLoading: isLoading
    }),
    [data, isLoading]
  );

  return memoizedValue;
}

export function handlerCustomerTo(isCustomerOpen: boolean) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.actions,
    (currentInvoicemaster: any) => {
      return { ...currentInvoicemaster, isCustomerOpen };
    },
    false
  );
}

export function handlerCustomerFrom(open: boolean) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.actions,
    (currentInvoicemaster: any) => {
      return { ...currentInvoicemaster, open };
    },
    false
  );
}

export function selectCountry(country: CountryType | null) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.actions,
    (currentInvoicemaster: any) => {
      return { ...currentInvoicemaster, country };
    },
    false
  );
}

export function handlerPreview(isOpen: boolean) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.actions,
    (currentInvoicemaster: any) => {
      return { ...currentInvoicemaster, isOpen };
    },
    false
  );
}

export function handlerDelete(alertPopup: boolean) {
  // to update local state based on key
  mutate(
    endpoints.key + endpoints.actions,
    (currentInvoicemaster: any) => {
      return { ...currentInvoicemaster, alertPopup };
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/jwt.ts===
import { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from 'next';
import jwt from 'jsonwebtoken';
import { getSession } from 'next-auth/react';
import { getServerSession } from 'next-auth';
import { authOptions } from './auth/[...nextauth]';
import { UserModel } from 'backend/schemas';
import OrganizationModel from 'backend/schemas/Organization';

export function auth(
  ...args: [GetServerSidePropsContext['req'], GetServerSidePropsContext['res']] | [NextApiRequest, NextApiResponse] | []
) {
  return getServerSession(...args, authOptions);
}

export default async function jwtRoute(req: NextApiRequest, res: NextApiResponse) {
  try {
    const session: {
      user: {
        user_id: string;
      };
    } = (await auth(req, res)) as unknown as {
      user: {
        user_id: string;
      };
    };
    const privateKey = process.env.PARAGON_KEY?.slice(1, -1).replace(/\\n/g, '\n');

    const user = await UserModel.findOne({ id: session?.user?.user_id });

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    const org = await OrganizationModel.findOne({
      users: {
        $in: [user?._id]
      }
    });

    if (!org) {
      return res.status(404).json({ error: 'Organization not found' });
    }

    // Generate JWT token
    const token = jwt.sign(
      {
        ...(
          session as unknown as {
            user: {
              user_id: string;
            };
          }
        ).user,
        sub: org._id,
        exp: Math.floor(Date.now() / 1000) + 60 * 60,
        iat: Math.floor(Date.now() / 1000) - 30
      },
      // need to trim the last character from the key
      // and the first character from the key
      // and replace the "\n" with an empty string
      privateKey as string,
      {
        algorithm: 'RS256'
      }
    );

    res.status(200).json({ token });
  } catch (error) {
    
    res.status(500).json({ error: 'Failed to generate JWT token' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/kanban.ts===
import { useMemo } from 'react';

// third-party
import useSWR, { mutate } from 'swr';

// utils
import { fetcher } from 'utils/axios';
import { KanbanColumn, KanbanComment, KanbanItem, KanbanStateProps, KanbanUserStory } from 'types/kanban';

const initialState: KanbanStateProps = {
  selectedItem: false
};

export const endpoints = {
  key: 'api/kanban',
  master: 'master',
  list: '/backlogs', // server URL
  addColumn: '/add-column', // server URL
  editColumn: '/edit-column', // server URL
  updateColumnOrder: '/update-column-order', // server URL
  deleteColumn: '/delete-column', // server URL
  addItem: '/add-item', // server URL
  editItem: '/edit-item', // server URL
  updateColumnItemOrder: '/update-item-order', // server URL
  addItemComment: '/add-item-comment', // server URL
  deleteItem: '/delete-item', // server URL
  addStory: '/add-story', // server URL
  editStory: '/edit-story', // server URL
  updateStoryOrder: '/update-story-order', // server URL
  updateStoryItemOrder: '/update-storyitem-order', // server URL
  addStoryComment: '/add-story-comment', // server URL
  deleteStory: '/delete-story' // server URL
};

export function useGetBacklogs() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      backlogs: data?.backlogs,
      backlogsLoading: isLoading,
      backlogsError: error,
      backlogsValidating: isValidating
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function addColumn(newColumn: KanbanColumn) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;
      const columns = [...backlogs.columns, newColumn];
      const columnsOrder = [...backlogs.columnsOrder, newColumn.id];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns,
          columnsOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { column: newColumn };
  //   await axios.post(endpoints.key + endpoints.addColumn, data);
}

export async function editColumn(newColumn: KanbanColumn) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const column = backlogs.columns.splice(
        backlogs.columns.findIndex((c: KanbanColumn) => c.id === newColumn.id),
        1,
        newColumn
      );
      const columns = [...backlogs.columns, column];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  // const data = { column: newColumn };
  // await axios.post(endpoints.key + endpoints.editColumn, data);
}

export async function updateColumnOrder(columnsOrder: string[]) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columnsOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { columnsOrder };
  //   await axios.post(endpoints.key + endpoints.updateColumnOrder, data);
}

export async function deleteColumn(columnId: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const columns = backlogs.columns.filter((column: KanbanColumn) => column.id !== columnId);
      const columnsOrder = backlogs.columnsOrder.filter((id: string) => id !== columnId);

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns,
          columnsOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { columnId };
  //   await axios.post(endpoints.key + endpoints.deleteColumn, data);
}

export async function addItem(columnId: string, item: KanbanItem, storyId: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      let columns = backlogs.columns;
      if (columnId !== '0') {
        columns = backlogs.columns.map((column: KanbanColumn) => {
          if (column.id === columnId) {
            return {
              ...column,
              itemIds: column.itemIds ? [...column.itemIds, item.id] : [item.id]
            };
          }
          return column;
        });
      }

      let userStory = backlogs.userStory;
      if (storyId !== '0') {
        userStory = backlogs.userStory.map((story: KanbanUserStory) => {
          if (story.id === storyId) {
            return {
              ...story,
              itemIds: story.itemIds ? [...story.itemIds, item.id] : [item.id]
            };
          }
          return story;
        });
      }

      const items = [...backlogs.items, item];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns,
          userStory,
          items
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { columnId, item, storyId };
  //   await axios.post(endpoints.key + endpoints.addItem, data);
}

export async function editItem(columnId: string, newItem: KanbanItem, storyId: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const item = backlogs.items.splice(
        backlogs.items.findIndex((c: KanbanItem) => c.id === newItem.id),
        1,
        newItem
      );
      const items = [...backlogs.items, item];

      let userStory = backlogs.userStory;
      if (storyId) {
        const currentStory = backlogs.userStory.filter(
          (story: KanbanUserStory) => story.itemIds.filter((itemId) => itemId === newItem.id)[0]
        )[0];
        if (currentStory !== undefined && currentStory.id !== storyId) {
          userStory = backlogs.userStory.map((story: KanbanUserStory) => {
            if (story.itemIds.filter((itemId) => itemId === newItem.id)[0]) {
              return {
                ...story,
                itemIds: story.itemIds.filter((itemId) => itemId !== newItem.id)
              };
            }
            if (story.id === storyId) {
              return {
                ...story,
                itemIds: story.itemIds ? [...story.itemIds, newItem.id] : [newItem.id]
              };
            }
            return story;
          });
        }

        if (currentStory === undefined) {
          userStory = backlogs.userStory.map((story: KanbanUserStory) => {
            if (story.id === storyId) {
              return {
                ...story,
                itemIds: story.itemIds ? [...story.itemIds, newItem.id] : [newItem.id]
              };
            }
            return story;
          });
        }
      }

      let columns = backlogs.columns;
      if (columnId) {
        const currentColumn = backlogs.columns.filter(
          (column: KanbanColumn) => column.itemIds.filter((itemId) => itemId === newItem.id)[0]
        )[0];
        if (currentColumn !== undefined && currentColumn.id !== columnId) {
          columns = backlogs.columns.map((column: KanbanColumn) => {
            if (column.itemIds.filter((itemId) => itemId === newItem.id)[0]) {
              return {
                ...column,
                itemIds: column.itemIds.filter((itemId) => itemId !== newItem.id)
              };
            }
            if (column.id === columnId) {
              return {
                ...column,
                itemIds: column.itemIds ? [...column.itemIds, newItem.id] : [newItem.id]
              };
            }
            return column;
          });
        }

        if (currentColumn === undefined) {
          columns = backlogs.columns.map((column: KanbanColumn) => {
            if (column.id === columnId) {
              return {
                ...column,
                itemIds: column.itemIds ? [...column.itemIds, newItem.id] : [newItem.id]
              };
            }
            return column;
          });
        }
      }

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns,
          userStory,
          items
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { columnId, item: newItem, storyId };
  //   await axios.post(endpoints.key + endpoints.editItem, data);
}

export async function updateColumnItemOrder(columns: KanbanColumn[]) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          columns
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { columns };
  //   await axios.post(endpoints.key + endpoints.updateColumnItemOrder, data);
}

export async function addItemComment(itemId: string | false, comment: KanbanComment) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const items = backlogs.items.map((item: KanbanItem) => {
        if (item.id === itemId) {
          return {
            ...item,
            commentIds: item.commentIds ? [...item.commentIds, comment.id] : [comment.id]
          };
        }
        return item;
      });

      const comments = [...backlogs.comments, comment];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          items,
          comments
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { itemId, comment };
  //   await axios.post(endpoints.key + endpoints.addItemComment, data);
}

export async function deleteItem(itemId: string | false) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const items = backlogs.items.filter((item: KanbanItem) => item.id !== itemId);
      const columns = backlogs.columns.map((column: KanbanColumn) => {
        const itemIds = column.itemIds.filter((id) => id !== itemId);
        return {
          ...column,
          itemIds
        };
      });

      const userStory = backlogs.userStory.map((story: KanbanUserStory) => {
        const itemIds = story.itemIds.filter((id) => id !== itemId);
        return {
          ...story,
          itemIds
        };
      });

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          items,
          columns,
          userStory
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { itemId };
  //   await axios.post(endpoints.key + endpoints.deleteItem, data);
}

export async function addStory(newStory: any) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;
      const userStory = [...backlogs.userStory, newStory];
      const userStoryOrder = [...backlogs.userStoryOrder, newStory.id];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStory,
          userStoryOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { story: newStory };
  //   await axios.post(endpoints.key + endpoints.addStory, data);
}

export async function editStory(newStory: KanbanUserStory) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      backlogs.userStory.splice(
        backlogs.userStory.findIndex((c: KanbanUserStory) => c.id === newStory.id),
        1,
        newStory
      );

      const userStory = [...backlogs.userStory];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStory
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { story: newStory };
  //   await axios.post(endpoints.key + endpoints.editStory, data);
}

export async function updateStoryOrder(userStoryOrder: string[]) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStoryOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { userStoryOrder };
  //   await axios.post(endpoints.key + endpoints.updateStoryOrder, data);
}

export async function updateStoryItemOrder(userStory: KanbanUserStory[]) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStory
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { userStory };
  //   await axios.post(endpoints.key + endpoints.updateStoryItemOrder, data);
}

export async function addStoryComment(storyId: string, comment: KanbanComment) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const userStory = backlogs.userStory.map((story: KanbanUserStory) => {
        if (story.id === storyId) {
          return {
            ...story,
            commentIds: story.commentIds ? [...story.commentIds, comment.id] : [comment.id]
          };
        }
        return story;
      });

      const comments = [...backlogs.comments, comment];

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStory,
          comments
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { storyId, comment };
  //   await axios.post(endpoints.key + endpoints.addStoryComment, data);
}

export async function deleteStory(storyId: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentBacklog: any) => {
      const backlogs = currentBacklog.backlogs;

      const userStory = backlogs.userStory.filter((column: KanbanUserStory) => column.id !== storyId);
      const userStoryOrder = backlogs.userStoryOrder.filter((id: string) => id !== storyId);

      return {
        ...currentBacklog,
        backlogs: {
          ...backlogs,
          userStory,
          userStoryOrder
        }
      };
    },
    false
  );

  // to hit server
  // you may need to refetch latest data after server hit and based on your logic
  //   const data = { storyId };
  //   await axios.post(endpoints.key + endpoints.deleteStory, data);
}

export function useGetKanbanMaster() {
  const { data, isLoading } = useSWR(endpoints.key + endpoints.master, () => initialState, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      kanbanMaster: data,
      kanbanMasterLoading: isLoading
    }),
    [data, isLoading]
  );

  return memoizedValue;
}

export function handlerKanbanDialog(selectedItem: string | boolean) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentKanbanMaster: any) => {
      return { ...currentKanbanMaster, selectedItem };
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/menu/dashboard.ts===
import { NextApiRequest, NextApiResponse } from 'next';

// This is mock dashboard data for Mantis MUI Theme
// You can use this to mock data for your theme

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const data = {};

  try {
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard data' });
  }
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/menu.ts===
import useSWR, { mutate } from 'swr';
import { useMemo } from 'react';

// Project-imports
import { fetcher } from 'utils/axios';

// types
import { MenuProps, NavItemType } from 'types/menu';

const initialState: MenuProps = {
  openedItem: 'dashboard',
  openedComponent: 'buttons',
  openedHorizontalItem: null,
  isDashboardDrawerOpened: false,
  isComponentDrawerOpened: true
};

export const endpoints = {
  key: 'api/menu',
  master: 'master',
  dashboard: '/dashboard' // server URL
};

export function useGetMenu() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.dashboard, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      menu: data?.dashboard as NavItemType,
      menuLoading: isLoading,
      menuError: error,
      menuValidating: isValidating,
      menuEmpty: !isLoading && !data?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export function useGetMenuMaster() {
  const { data, isLoading } = useSWR(endpoints.key + endpoints.master, () => initialState, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      menuMaster: data as MenuProps,
      menuMasterLoading: isLoading
    }),
    [data, isLoading]
  );

  return memoizedValue;
}

export function handlerComponentDrawer(isComponentDrawerOpened: boolean) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentMenuMaster: any) => {
      return { ...currentMenuMaster, isComponentDrawerOpened };
    },
    false
  );
}

export function handlerActiveComponent(openedComponent: string) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentMenuMaster: any) => {
      return { ...currentMenuMaster, openedComponent };
    },
    false
  );
}

export function handlerDrawerOpen(isDashboardDrawerOpened: boolean) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentMenuMaster: any) => {
      return { ...currentMenuMaster, isDashboardDrawerOpened };
    },
    false
  );
}

export function handlerHorizontalActiveItem(openedHorizontalItem: string | null) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentMenuMaster: any) => {
      return { ...currentMenuMaster, openedHorizontalItem };
    },
    false
  );
}

export function handlerActiveItem(openedItem: string) {
  // to update local state based on key

  mutate(
    endpoints.key + endpoints.master,
    (currentMenuMaster: any) => {
      return { ...currentMenuMaster, openedItem };
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/models/[...id].ts===
import ModelController from 'backend/controllers/ModelController';
import { NextApiRequest, NextApiResponse } from 'next';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;

    if (method === 'GET') {
      return ModelController.getModel(req, res);
    }

    if (method === 'DELETE') {
      return ModelController.delete(req, res);
    }

    if (method === 'PUT') {
      return ModelController.put(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/models/index.ts===
import ModelController from 'backend/controllers/ModelController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    if (req.method === 'GET') {
      return ModelController.get(req, res);
    }

    if (req.method === 'POST') {
      const model = await ModelController.post(req, res);
      return model;
    }

    const { id } = req.query;
    if (id) {
      return ModelController.getModel(req, res);
    }
    // ModelController.get(req, res);
    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/organization/[...id].ts===
import OrganizationController from 'backend/controllers/OrganizationController';
import { NextApiRequest, NextApiResponse } from 'next';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { method } = req;

  if (method === 'GET') {
    return OrganizationController.getOrganization(req, res);
  }

  return res.status(200).json({ protected: true });
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/organization/index.ts===
import OrganizationController from 'backend/controllers/OrganizationController';
import { NextApiRequest, NextApiResponse } from 'next';


export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;
    const { id } = req.query;
    const { userId } = req.query;

    if (method === 'GET') {
      if (id) {
        return OrganizationController.getOrganization(req, res);
      }
      if (userId) {
        const org = await OrganizationController.getOrganizationByUserId(userId as string);
        return res.status(200).json(org);
      }
      return OrganizationController.getOrganizations(req, res);
    }

    if (method === 'POST') {
      return OrganizationController.createOrganiation(req, res);
    }

    // if (method === 'POST') {
    //   return createOrganization(req, res);
    // }

    return res.status(200).json({ protected: true });
  } catch (error) {
    return res.status(500).json({ error: 'Failed to create organization' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/products.ts===
import { useMemo } from 'react';

// third-party
import useSWR, { mutate } from 'swr';

// project-import
import axios, { fetcher, fetcherPost } from 'utils/axios';

// types
import { Products, ProductsFilter, Reviews } from 'types/e-commerce';

export const endpoints = {
  key: 'api/products',
  list: '/list', // server URL
  filter: '/filter', // server URL
  related: 'api/product/related', // server URL
  review: 'api/review/list' // server URL
};

export function useGetProducts() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {
    revalidateIfStale: true,
    revalidateOnFocus: true,
    revalidateOnReconnect: true
  });

  const memoizedValue = useMemo(
    () => ({
      products: data?.products as Products[],
      productsLoading: isLoading,
      productsError: error,
      productsValidating: isValidating,
      productsEmpty: !isLoading && !data?.products?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export async function productFilter(filter: ProductsFilter) {
  const newProducts = await axios.post(endpoints.key + endpoints.filter, { filter });

  // to update local state based on key
  mutate(
    endpoints.key + endpoints.list,
    (currentProducts: any) => {
      return {
        ...currentProducts,
        products: newProducts.data
      };
    },
    false
  );
}

export function useGetReleatedProducts(id: string) {
  const URL = [endpoints.related, { id, endpoints: 'products' }];

  const { data, isLoading, error, isValidating } = useSWR(URL, fetcherPost, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      relatedProducts: data as Products[],
      relatedProductsLoading: isLoading,
      relatedProductsError: error,
      relatedProductsValidating: isValidating,
      relatedProductsEmpty: !isLoading && !data?.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

export function useGetProductReviews() {
  const { data, isLoading, error, isValidating } = useSWR(endpoints.review, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(
    () => ({
      productReviews: data?.productReviews as Reviews[],
      productReviewsLoading: isLoading,
      productReviewsError: error,
      productReviewsValidating: isValidating,
      productReviewsEmpty: !isLoading && !data?.productReviews.length
    }),
    [data, error, isLoading, isValidating]
  );

  return memoizedValue;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/projects/index.ts===
import ProjectController from 'backend/controllers/ProjectController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // Your code here
    const { method } = req;

    if (method === 'GET') {
      return ProjectController.get(req, res);
    }

    if (method === 'POST') {
      return ProjectController.create(req, res);
    }

    res.status(200).json({ message: 'Success' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompt-flags/[...id].ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { ControllerRoutingFunctionID, dbConnect } from 'backend/db/connection';
import PromptFlagController from 'backend/controllers/PromptFlagController';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await dbConnect();
    // if (req.query.id === 'getFlagMetaByEnv') {
    //   let flags = await PromptFlagController.getFlagMetaByEnv(req, res);
    //   return res.status(200).json(flags);
    // }
    return ControllerRoutingFunctionID(req, res, PromptFlagController);
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch prompt version data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompt-flags/index.ts===
import PromptFlagController from 'backend/controllers/PromptFlagController';
import { ControllerRouting } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    return ControllerRouting(req, res, PromptFlagController);
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch prompt flag data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompt-version/[...id].ts===
import { NextApiRequest, NextApiResponse } from 'next';
import { ControllerRoutingFunctionID } from 'backend/db/connection';
import PromptVersionController from 'backend/controllers/PromptVersionController';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    return ControllerRoutingFunctionID(req, res, PromptVersionController);
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch prompt version data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompt-version/index.ts===
import PromptVersionController from 'backend/controllers/PromptVersionController';
import { ControllerRouting } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    return ControllerRouting(req, res, PromptVersionController);
  } catch (error) {
    return res.status(500).json({ error: 'Failed to fetch prompt flag data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompts/[...id].ts===
import PromptController from 'backend/controllers/PromptController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { method } = req;

    if (method === 'GET') {
      return await PromptController.get(req, res);
    }

    if (method === 'DELETE') {
      return await PromptController.delete(req, res);
    }

    if (method === 'PUT') {
      return await PromptController.put(req, res);
    }

    return res.status(200).json({ protected: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch model data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/prompts/index.ts===
import PromptController from 'backend/controllers/PromptController';
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse): Promise<void> {
  try {
    if (req.method === 'GET') {
      return await PromptController.getAll(req, res);
    }

    if (req.method === 'POST') {
      
      return await PromptController.post(req, res);
    }
  } catch (error) {
    

    return res.status(500).json({ error: 'Failed to fetch prompt data' });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/auth.ts===
import { dbConnect } from 'backend/db/connection';
import { NextApiRequest, NextApiResponse } from 'next';
import * as yup from 'yup';
import APICredentials from 'backend/schemas/APICredentials';
import jwt from 'jsonwebtoken';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const validate = yup.object().shape({
      'x-morrigu-client-id': yup.string().required(),
      'x-morrigu-secret-key': yup.string().required()
    });

    // get these from the headers X-MORRIGU-SECRET-KEY, X-MORRIGU-CLIENT-ID
    await validate.validate(req.headers);

    await dbConnect();

    const creds = await APICredentials.findOne({ clientId: req.headers['x-morrigu-client-id'] });

    // json web token stop recommending getToken
    if (!creds) {
      throw new Error('Credentials not found');
    }

    // Token is valid, the API logic here
    if (creds.secretKey !== req.headers['x-morrigu-secret-key']) {
      return res.status(401).json({ error: 'User is not authenticated' });
    }

    // Token is valid, the API logic here

    const token = jwt.sign(
      {
        clientId: creds.clientId,
        clientEnvId: creds.clientEnvId
      },
      creds.secretKey + ' ' + process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.setHeader('X-MORRIGU-TOKEN', `Bearer ${token}`);

    return res.json({ token });
  } catch (error) {
    if (error instanceof yup.ValidationError) {
      return res.status(400).json({ error: error.message });
    }

    return res.status(500).json({ error: error });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/core/InvokeStream/[...id].ts===
import { BedrockRuntimeClient, InvokeModelWithResponseStreamCommand, ResponseStream } from '@aws-sdk/client-bedrock-runtime';
import Model, { ModelFormatting } from 'backend/schemas/Model';
import Prompt from 'backend/schemas/Prompt';
import PromptFlag from 'backend/schemas/PromptFlag';
import PromptHistoryModel from 'backend/schemas/PromptHistory';
import { IQuery } from 'backend/schemas/Query';
import QueryResponseModel, { IQueryResponse } from 'backend/schemas/QueryResponse';
import { IQueryResponsePair } from 'backend/schemas/QueryResponsePair';
import { NextApiRequest, NextApiResponse } from 'next';
import verify from 'pages/api/secure/verify';
import * as yup from 'yup';

export const dynamic = 'force-dynamic';

type Payload = {
  body: {
    prompt: string;
    max_tokens_to_sample: number;
  };
  modelId: string;
};

export const validation = yup.object<Payload>().shape({
  id: yup.string().required('id is required.'),
  payload: yup.object().shape({
    body: yup
      .object()
      .shape({
        prompt: yup.string().required('prompt is required.'),
        max_tokens_to_sample: yup.number().required('max_tokens_to_sample is required.')
      })
      .required('body is required.'),
    historyId: yup.string(),
    modelId: yup.string().required('modelId is required.')
  })
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache, no-transform');
  res.setHeader('Content-Encoding', 'none');
  res.setHeader('Transfer-Encoding', 'chunked');
  res.setHeader('Connection', 'keep-alive');
  res.setHeader('X-Accel-Buffering', 'no');
  res.flushHeaders();

  try {
    const isAuthenticated = await verify(req, res);

    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User is not authenticated' });
    }

    const { id, payload } = req.query;

    if (!id) {
      return res.status(400).json({ error: 'id is required' });
    }

    if (typeof payload !== 'string') {
      return res.status(400).json({ error: 'payload is required' });
    }

    const validPayload = await validation.validate({ id: id?.[0], payload: JSON.parse(payload) }, { abortEarly: false });

    const flag = await PromptFlag.findOne({
      _id: validPayload.id as string,
      environment: isAuthenticated.clientEnvId
    });

    const pModel = await Prompt.findOne({ _id: flag?.promptId });

    if (!pModel) {
      return res.status(404).json({ error: 'Prompt not found' });
    }

    if (!flag) {
      return res.status(404).json({ error: 'Flag not found' });
    }

    const prompt = pModel;

    const modelToInvoke = await Model.findOne({ _id: prompt.modelId });
    const inf_params = modelToInvoke?.inference_params as unknown as {};
    const modelFormatting = await ModelFormatting.findOne({ _id: modelToInvoke?.model_formatting });
    let promptToInvoke = `${prompt.system_message}\n\n`;

    if (validPayload.payload.historyId) {
      const conversation = await PromptHistoryModel.findById(validPayload.payload.historyId)
        .populate({
          path: 'history',
          populate: [
            {
              path: 'query'
            },
            {
              path: 'response'
            }
          ]
        })
        .exec();

      const history = conversation?.history as unknown as IQueryResponsePair[];

      if (!history) {
        res.status(404).json({ error: 'History not found' });
      }

      for (let i = 0; i < history?.length; i++) {
        const query = history[i].query as unknown as IQuery;
        const response = history[i].response as unknown as IQueryResponse;

        promptToInvoke += `${modelFormatting?.user_prefix} ${query.body.text}\n\n${modelFormatting?.assistant_prefix} ${
          response?.body?.text || ''
        }\n\n`;

        // we need to build the prompt to invoke not the system
      }
    } else {
      promptToInvoke += `${modelFormatting?.user_prefix} ${validPayload.payload.body.prompt}\n\n${modelFormatting?.assistant_prefix} `;
    }

    const bedrock = new BedrockRuntimeClient({ region: 'us-east-1' });

    const inputBody = JSON.parse(payload)['body'];

    delete inputBody['prompt'];

    console.log(JSON.stringify({
        ...JSON.parse(payload)['body'],
        ...inf_params,
        prompt: promptToInvoke
      }))

    const input = {
      // InvokeModelRequest
      body: JSON.stringify({
        ...JSON.parse(payload)['body'],
        ...inf_params,
        prompt: promptToInvoke
      }), // required
      contentType: 'application/json',
      accept: 'application/json',
      modelId: JSON.parse(payload)['modelId']
    };
    const command = new InvokeModelWithResponseStreamCommand(input);
    const response = await bedrock.send(command);

    const stream = response.body as AsyncIterable<ResponseStream>;

    if (stream) {
      // let fullResponse = '';
      for await (const chunk of stream) {
        const jsonString = new TextDecoder().decode(chunk.chunk?.bytes);
        const parsedChunk = JSON.parse(jsonString);
        // fullResponse += parsedChunk['completion'];

        res.write(`data: ${JSON.stringify(parsedChunk)}\n\n`);
      }
      // 
    }

    res.end();
  } catch (error) {
    
    res.status(500).json({ message: error });
  }
}

export const config = {
  runtime: 'nodejs'
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/core/InvokeStream/handler.ts===
import { BedrockRuntimeClient, InvokeModelWithResponseStreamCommand, ResponseStream } from '@aws-sdk/client-bedrock-runtime';
import Model, { ModelFormatting } from 'backend/schemas/Model';
import Prompt from 'backend/schemas/Prompt';
import PromptFlag from 'backend/schemas/PromptFlag';
import PromptHistoryModel from 'backend/schemas/PromptHistory';
import { NextApiRequest, NextApiResponse } from 'next';
import verify from 'pages/api/secure/verify';
import { validation } from './[...id]';
import { IQueryResponsePair } from 'backend/schemas/QueryResponsePair';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache, no-transform');
  res.setHeader('Content-Encoding', 'none');
  res.setHeader('Connection', 'keep-alive');
  res.setHeader('X-Accel-Buffering', 'no');
  res.flushHeaders();

  try {
    const isAuthenticated = await verify(req, res);

    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User is not authenticated' });
    }

    const { id, payload } = req.query;

    if (!id) {
      return res.status(400).json({ error: 'id is required' });
    }

    if (typeof payload !== 'string') {
      return res.status(400).json({ error: 'payload is required' });
    }

    const validPayload = await validation.validate({ id: id?.[0], payload: JSON.parse(payload) }, { abortEarly: false });

    const flag = await PromptFlag.findOne({
      _id: validPayload.id as string,
      environment: isAuthenticated.clientEnvId
    });

    const pModel = await Prompt.findOne({ _id: flag?.promptId });

    if (!pModel) {
      return res.status(404).json({ error: 'Prompt not found' });
    }

    if (!flag) {
      return res.status(404).json({ error: 'Flag not found' });
    }

    const conversation = await PromptHistoryModel.findById(validPayload.payload.historyId)
      .populate({
        path: 'history',
        populate: [
          {
            path: 'query'
          },
          {
            path: 'response'
          }
        ]
      })
      .exec();

    const history = conversation?.history as unknown as IQueryResponsePair[];

    if (!history) {
      res.status(404).json({ error: 'History not found' });
    }

    for (const h of history) {
      const query = h.query as unknown as string;
      const response = h.response as unknown as string;

      
    }

    const prompt = pModel;

    const modelToInvoke = await Model.findOne({ _id: prompt.modelId });
    const modelFormatting = await ModelFormatting.findOne({ _id: modelToInvoke?.model_formatting });

    const promptToInvoke = `${prompt.system_message}\n\n${modelFormatting?.user_prefix} ${JSON.parse(payload)['body']['prompt']}\n\n${
      modelFormatting?.assistant_prefix
    } `;
    // Your code here
    const bedrock = new BedrockRuntimeClient({ region: 'us-east-1' });

    const inputBody = JSON.parse(payload)['body'];

    delete inputBody['prompt'];

    const input = {
      // InvokeModelRequest
      body: JSON.stringify({
        ...JSON.parse(payload)['body'],
        prompt: promptToInvoke
      }), // required
      contentType: 'application/json',
      accept: 'application/json',
      modelId: JSON.parse(payload)['modelId']
    };
    const command = new InvokeModelWithResponseStreamCommand(input);
    const response = await bedrock.send(command);

    const stream = response.body as AsyncIterable<ResponseStream>;

    if (stream) {
      for await (const chunk of stream) {
        const jsonString = new TextDecoder().decode(chunk.chunk?.bytes);
        const parsedChunk = JSON.parse(jsonString);

        res.write(`data: ${JSON.stringify(parsedChunk)}\n\n`);
      }
    }

    res.end();
  } catch (error) {
    
    res.status(500).json({ message: error });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/core/invoke/[...id].ts===
import { Model, ModelFormatting } from 'backend/schemas/Model';
import { IEnvironment } from 'backend/schemas/Environment';
import PromptFlag from 'backend/schemas/PromptFlag';
import { NextApiRequest, NextApiResponse } from 'next';
import { Invoke } from 'pages/api/integrations/bedrock/runtime/InvokeModel';
import verify from 'pages/api/secure/verify';
import { PromptDocument } from 'backend/schemas/Prompt';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const isAuthenticated = await verify(req, res);
    
    if (!isAuthenticated) {
      return res.status(401).json({ error: 'User is not authenticated' });
    }

    const { id } = req.query;
    

    const flag = await PromptFlag.findOne({
      _id: id as string,
      environment: (isAuthenticated.clientEnvId as Pick<IEnvironment, '_id'>)._id as string //hacky
    }).populate(['promptId']);

    if (!flag) {
      return res.status(404).json({ error: 'Flag not found' });
    }

    const prompt = flag.promptId as unknown as PromptDocument;

    const modelToInvoke = await Model.findOne({ _id: prompt.modelId });
    const modelFormatting = await ModelFormatting.findOne({ _id: modelToInvoke?.model_formatting });

    const promptToInvoke = `${prompt.system_message}\n\n${modelFormatting?.user_prefix} Hello!\n\n${modelFormatting?.assistant_prefix} `;

    

    const completion = await Invoke({
      // prompt: 'Help Humans\n\nHuman: Hello!\n\nAssistant: ',
      prompt: promptToInvoke,
      modelId: modelToInvoke?.modelId,
      max_tokens_to_sample: 500
    });

    return res.status(200).json({
      ...JSON.parse(completion)
    });
  } catch (error) {
    
    // Handle any errors that occur during the invocation
    res.status(500).json({ error: error });
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/keys.ts===

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/token.ts===

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/secure/verify.ts===
import { NextApiRequest, NextApiResponse } from 'next';
import jwt, { JwtPayload } from 'jsonwebtoken';
import { dbConnect } from 'backend/db/connection';
import APICredentials from 'backend/schemas/APICredentials';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    let token = req.headers.authorization;

    if (!token) {
      //try to get from query
      token = req.query.token as string;
    }

    if (token) {
      const decoded = jwt.decode(token.replace('Bearer ', '')) as JwtPayload;

      await dbConnect();

      const creds = await APICredentials.findOne({ clientId: decoded.clientId as string });

      if (!creds) {
        throw new Error('Credentials not found');
      }

      let verified = jwt.verify(token.replace('Bearer ', ''), creds.secretKey + ' ' + process.env.JWT_SECRET);

      if (!verified) {
        throw new Error('Token is not verified');
      }

      return creds;
    } else {
      // Not authenticated
      return false;
    }
  } catch (error) {
    console.error(error);
    return false;
  }
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/api/snackbar.ts===
import { useMemo } from 'react';
import useSWR, { mutate } from 'swr';

// types
import { SnackbarProps } from 'types/snackbar';

export const endpoints = {
  key: 'snackbar'
};

const initialState: SnackbarProps = {
  action: false,
  open: false,
  message: 'Note archived',
  anchorOrigin: {
    vertical: 'bottom',
    horizontal: 'right'
  },
  variant: 'default',
  alert: {
    color: 'primary',
    variant: 'filled'
  },
  transition: 'Fade',
  close: false,
  actionButton: false,
  maxStack: 3,
  dense: false,
  iconVariant: 'usedefault'
};

export function useGetSnackbar() {
  const { data } = useSWR(endpoints.key, () => initialState, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  });

  const memoizedValue = useMemo(() => ({ snackbar: data! }), [data]);

  return memoizedValue;
}

export function openSnackbar(snackbar: SnackbarProps) {
  // to update local state based on key

  const { action, open, message, anchorOrigin, variant, alert, transition, close, actionButton } = snackbar;

  mutate(
    endpoints.key,
    (currentSnackbar: any) => {
      return {
        ...currentSnackbar,
        action: action || initialState.action,
        open: open || initialState.open,
        message: message || initialState.message,
        anchorOrigin: anchorOrigin || initialState.anchorOrigin,
        variant: variant || initialState.variant,
        alert: {
          color: alert?.color || initialState.alert.color,
          variant: alert?.variant || initialState.alert.variant
        },
        transition: transition || initialState.transition,
        close: close || initialState.close,
        actionButton: actionButton || initialState.actionButton
      };
    },
    false
  );
}

export function closeSnackbar() {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentSnackbar: any) => {
      return { ...currentSnackbar, open: false };
    },
    false
  );
}

export function handlerIncrease(maxStack: number) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentSnackbar: any) => {
      return { ...currentSnackbar, maxStack };
    },
    false
  );
}

export function handlerDense(dense: boolean) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentSnackbar: any) => {
      return { ...currentSnackbar, dense };
    },
    false
  );
}

export function handlerIconVariants(iconVariant: string) {
  // to update local state based on key
  mutate(
    endpoints.key,
    (currentSnackbar: any) => {
      return { ...currentSnackbar, iconVariant };
    },
    false
  );
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/calendar/page.tsx===
import CalendarApp from 'views/apps/calendar';

// ==============================|| PAGE ||============================== //

export default function CalendarAppPage() {
  return <CalendarApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/chat/page.tsx===
import ChatApp from 'views/apps/chat';

// ==============================|| PAGE ||============================== //

export default function ChatAppPage() {
  return <ChatApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/customer/card/page.tsx===
import CustmCardApp from 'views/apps/customer/card';

// ==============================|| PAGE ||============================== //

export default function CustmCardAppPage() {
  return <CustmCardApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/customer/list/page.tsx===
import CustmListApp from 'views/apps/customer/list';

// ==============================|| PAGE ||============================== //

export default function CustmListAppPage() {
  return <CustmListApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/e-commerce/add-product/page.tsx===
import AddProduct from 'views/apps/e-commerce/add-product';

// ==============================|| PAGE ||============================== //

export default function AddProductPage() {
  return <AddProduct />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/e-commerce/checkout/page.tsx===
import CheckoutApp from 'views/apps/e-commerce/checkout';

// ==============================|| PAGE ||============================== //

export default function CheckoutAppPage() {
  return <CheckoutApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/e-commerce/product-details/[id]/page.tsx===
// import { Products } from 'types/e-commerce';
// import axios from 'utils/axios';
import ProductDetails from 'views/apps/e-commerce/product-detail';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {
    id: string;
  };
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default function Page({ params }: Props) {
  const { id } = params;

  return <ProductDetails id={id} />;
}

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  // todo: this need to look back again once we implemted SWR
  // const response = await axios.get('/api/products/list');

  // return response.data.products.map((prod: Products) => ({
  //   id: prod.id
  // }));

  const response = [1, 2, 3, 5];

  return response.map((prodId: number) => ({
    id: prodId.toString()
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/e-commerce/products/page.tsx===
import ProductsApp from 'views/apps/e-commerce/products';

// ==============================|| PAGE ||============================== //

export default function ProductsAppPage() {
  return <ProductsApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/e-commerce/products-list/page.tsx===
import ProdListApp from 'views/apps/e-commerce/products-list';

// ==============================|| PAGE ||============================== //

export default function ProdListAppPage() {
  return <ProdListApp />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/kanban/[tab]/page.tsx===
import KanbanApp from 'views/apps/kanban';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {
    tab: string;
  };
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default function Page({ params }: Props) {
  const { tab } = params;

  return <KanbanApp tab={tab} />;
}

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const response = ['board', 'backlogs'];

  return response.map((tab: string) => ({
    tab: tab
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/loading.tsx===
'use client';

import Loader from 'components/Loader';

export default function Loading() {
  return <Loader />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/profiles/account/[tab]/page.tsx===
import AccProfileApp from 'views/apps/profiles/account';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {
    tab: string;
  };
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default function Page({ params }: Props) {
  const { tab } = params;

  return <AccProfileApp tab={tab} />;
}

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const response = ['basic', 'personal', 'my-account', 'password', 'role', 'settings'];

  return response.map((tab: string) => ({
    tab: tab
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/apps/profiles/user/[tab]/page.tsx===
import UserProfileApp from 'views/apps/profiles/user';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {
    tab: string;
  };
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default function Page({ params }: Props) {
  const { tab } = params;

  return <UserProfileApp tab={tab} />;
}

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const response = ['personal', 'payment', 'password', 'settings'];

  return response.map((tab: string) => ({
    tab: tab
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/auth/check-mail.tsx===
import { ReactElement } from 'react';

// next
import NextLink from 'next/link';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Box, Button, Grid, Divider, Typography, useMediaQuery } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AnimateButton from 'components/@extended/AnimateButton';
import AuthWrapper from 'sections/auth/AuthWrapper';

// ================================|| CHECK MAIL ||================================ //

const CheckMail = () => {
  const theme = useTheme();
  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

  return (
    <Page title="Check Mail">
      <AuthWrapper>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Box sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
              <Typography variant="h3">Hi, Check Your Mail</Typography>
              <Typography color="secondary" sx={{ mb: 0.5, mt: 1.25 }}>
                We have sent a password recover instructions to your email.
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12}>
            <AnimateButton>
              <NextLink href="/auth/login" passHref legacyBehavior>
                <Button disableElevation fullWidth size="large" type="submit" variant="contained" color="primary">
                  Sign in
                </Button>
              </NextLink>
            </AnimateButton>
          </Grid>
          <Grid item xs={12}>
            <Divider>
              <Typography variant={matchDownSM ? 'subtitle1' : 'h5'}>Sign up with</Typography>
            </Divider>
          </Grid>
        </Grid>
      </AuthWrapper>
    </Page>
  );
};

CheckMail.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default CheckMail;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/auth/code-verification.tsx===
import { ReactElement } from 'react';

// material-ui
import { Grid, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthCodeVerification from 'sections/auth/auth-forms/AuthCodeVerification';

// ================================|| CODE VERIFICATION ||================================ //

const CodeVerification = () => (
  <Page title="Code Verification">
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Stack spacing={1}>
            <Typography variant="h3">Enter Verification Code</Typography>
            <Typography color="secondary">We send you on mail.</Typography>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <Typography>We`ve send you code on jone. ****@company.com</Typography>
        </Grid>
        <Grid item xs={12}>
          <AuthCodeVerification />
        </Grid>
      </Grid>
    </AuthWrapper>
  </Page>
);

CodeVerification.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default CodeVerification;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/auth/forgot-password.tsx===
import { ReactElement } from 'react';

// next
import NextLink from 'next/link';

// material-ui
import { Grid, Link, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthForgotPassword from 'sections/auth/auth-forms/AuthForgotPassword';

// ================================|| FORGOT PASSWORD ||================================ //

const ForgotPassword = () => (
  <Page title="Forgot Password">
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="baseline" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
            <Typography variant="h3">Forgot Password</Typography>
            <NextLink href="/auth/login" passHref legacyBehavior>
              <Link variant="body1" color="primary">
                Back to Login
              </Link>
            </NextLink>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <AuthForgotPassword />
        </Grid>
      </Grid>
    </AuthWrapper>
  </Page>
);

ForgotPassword.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default ForgotPassword;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/auth/register.tsx===
import { ReactElement } from 'react';

// next
import NextLink from 'next/link';

// material-ui
import { Grid, Link, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import FirebaseRegister from 'sections/auth/auth-forms/AuthRegister';

// ================================|| REGISTER ||================================ //

const Register = () => (
  <Page title="Register">
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="baseline" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
            <Typography variant="h3">Sign up</Typography>
            <NextLink href="/auth/login" passHref legacyBehavior>
              <Link variant="body1" color="primary">
                Already have an account?
              </Link>
            </NextLink>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <FirebaseRegister />
        </Grid>
      </Grid>
    </AuthWrapper>
  </Page>
);

Register.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default Register;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/auth/reset-password.tsx===
import { ReactElement } from 'react';

// material-ui
import { Grid, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthResetPassword from 'sections/auth/auth-forms/AuthResetPassword';

// ================================|| RESET PASSWORD ||================================ //

const ResetPassword = () => (
  <Page title="Reset Password">
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Stack sx={{ mb: { xs: -0.5, sm: 0.5 } }} spacing={1}>
            <Typography variant="h3">Reset Password</Typography>
            <Typography color="secondary">Please choose your new password</Typography>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <AuthResetPassword />
        </Grid>
      </Grid>
    </AuthWrapper>
  </Page>
);

ResetPassword.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default ResetPassword;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/billing/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/blog/index.tsx===
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import { ReactElement } from 'react';
import { Grid, Typography, Link, styled } from '@mui/material';
import Markdown from 'react-markdown';
import RecentPosts from 'sections/blog/RecentPosts';

const FooterLink = styled(Link)(({ theme }) => ({
  color: theme.palette.primary.A800,
  '&:hover': {
    color: theme.palette.primary.A800
  },
  '&:active': {
    color: theme.palette.primary.A800
  }
}));

const BlogIndex = () => {
  return (
    <Page
      title="Blog"
      style={{
        maxWidth: '1266px',
        margin: 'auto',
        padding: 26
      }}
    >
      <Grid container paddingTop={'100px'} width={'100%'}>
        <Typography variant={'h1'}>Blog</Typography>
        <Grid item xs={12} paddingTop={2}>
          <Grid container spacing={2}>
            <Grid item xs={12} md={8}>
              <MainCard>
                <Markdown>
                  {` 
# Unveiling Morrigu AI, Inc. - A New Era of Intelligent Data Integration               
                  
## **Introduction**

In the landscape of business technology, the evolution of data integration tools has marked a significant milestone in how companies operate and make decisions. Today, we're introducing Morrigu, a revolutionary SaaS product that is setting new standards in how businesses interact with their data. Leveraging cutting-edge technologies like OpenAI, NextJS, NestJS, UseParagon, Auth0, and React, Morrigu is not just a chatbot—it is an intelligent data integration system that turns complex data into actionable insights.

## **What Makes Morrigu Stand Out?**

Morrigu is designed to transform the conventional chatbot experience into an advanced, value-driven conversation with your data. Unlike typical chatbots that handle basic queries with pre-defined responses, Morrigu utilizes the power of artificial intelligence to provide deep insights and real-time answers to complex QuickBooks accounting questions. Here’s how Morrigu is changing the game:

1. **Advanced AI Integration:** At the core of Morrigu is a sophisticated AI engine powered by OpenAI. This allows Morrigu to understand and process complex queries, making it an invaluable tool for financial analysis and decision-making.
2. **Seamless Data Connectivity:** Using UseParagon, Morrigu connects seamlessly with various data sources, including QuickBooks. This integration allows Morrigu to fetch, analyze, and interpret data in a way that is both intuitive and efficient.
3. **Enhanced Security with Auth0:** Security is paramount when dealing with sensitive financial data. Morrigu employs Auth0 for robust authentication and authorization mechanisms, ensuring that data integrity and security are never compromised.
4. **User-Friendly Interface:** Built with React and NextJS, Morrigu offers a sleek, responsive user interface that makes complex data interaction surprisingly simple. Whether on desktop or mobile, users enjoy a consistent, engaging experience.
5. **Scalability with NestJS:** At its backend, Morrigu uses NestJS, known for its scalability and efficiency. This ensures that as your business grows, Morrigu seamlessly scales to meet increasing demands without losing performance.

## **Real-World Application: QuickBooks Q/A**

One of the standout features of Morrigu is its ability to interact with QuickBooks to answer accounting questions. Whether it's pulling up the latest financial reports or analyzing expenditure trends, Morrigu handles these tasks effortlessly. The AI understands the context of each query, providing not just answers but insights that help businesses make informed financial decisions.

## **Why Choose Morrigu?**

Choosing Morrigu means opting for a smarter way to handle your business data. It's suitable for businesses of all sizes—from startups needing agile decision-making tools to large enterprises looking for robust data analysis solutions. Morrigu is more than a tool; it's a data partner that grows with your business.

## **Conclusion**

Morrigu represents the future of business intelligence and data interaction. By integrating advanced AI with user-friendly technology, Morrigu is not just another chatbot—it is a pivotal solution that brings real value to your business operations. As we move forward, Morrigu continues to evolve, pushing the boundaries of what businesses can achieve with their data.

Explore Morrigu today and see how intelligent data integration can revolutionize your business insights and decision-making. Welcome to the future of business intelligence. 

`}
                </Markdown>
              </MainCard>
            </Grid>

            <Grid item xs={12} md={4}>
              <RecentPosts />
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Page>
  );
};

BlogIndex.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant={'simple'}>{page}</Layout>;
};

export default BlogIndex;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/blog/posts/unveiling-morrigu-a-new-era-of-intelligent-data-integration.tsx===
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import { ReactElement } from 'react';
import { Grid, Typography, Link, styled } from '@mui/material';
import Markdown from 'react-markdown';
import RecentPosts from 'sections/blog/RecentPosts';

const FooterLink = styled(Link)(({ theme }) => ({
  color: theme.palette.primary.A800,
  '&:hover': {
    color: theme.palette.primary.A800
  },
  '&:active': {
    color: theme.palette.primary.A800
  }
}));

const BlogIndex = () => {
  return (
    <Page
      title="Blog"
      style={{
        maxWidth: '1266px',
        margin: 'auto',
        padding: 26
      }}
    >
      <Grid container paddingTop={'100px'} width={'100%'}>
        <Typography variant={'h1'}>Blog</Typography>
        <Grid item xs={12} paddingTop={2}>
          <Grid container spacing={2}>
            <Grid item xs={12} md={8}>
              <MainCard>
                <Markdown>
                  {` 
# Unveiling Morrigu AI, Inc. - A New Era of Intelligent Data Integration               
                  
## **Introduction**

In the landscape of business technology, the evolution of data integration tools has marked a significant milestone in how companies operate and make decisions. Today, we're introducing Morrigu, a revolutionary SaaS product that is setting new standards in how businesses interact with their data. Leveraging cutting-edge technologies like OpenAI, NextJS, NestJS, UseParagon, Auth0, and React, Morrigu is not just a chatbot—it is an intelligent data integration system that turns complex data into actionable insights.

## **What Makes Morrigu Stand Out?**

Morrigu is designed to transform the conventional chatbot experience into an advanced, value-driven conversation with your data. Unlike typical chatbots that handle basic queries with pre-defined responses, Morrigu utilizes the power of artificial intelligence to provide deep insights and real-time answers to complex QuickBooks accounting questions. Here’s how Morrigu is changing the game:

1. **Advanced AI Integration:** At the core of Morrigu is a sophisticated AI engine powered by OpenAI. This allows Morrigu to understand and process complex queries, making it an invaluable tool for financial analysis and decision-making.
2. **Seamless Data Connectivity:** Using UseParagon, Morrigu connects seamlessly with various data sources, including QuickBooks. This integration allows Morrigu to fetch, analyze, and interpret data in a way that is both intuitive and efficient.
3. **Enhanced Security with Auth0:** Security is paramount when dealing with sensitive financial data. Morrigu employs Auth0 for robust authentication and authorization mechanisms, ensuring that data integrity and security are never compromised.
4. **User-Friendly Interface:** Built with React and NextJS, Morrigu offers a sleek, responsive user interface that makes complex data interaction surprisingly simple. Whether on desktop or mobile, users enjoy a consistent, engaging experience.
5. **Scalability with NestJS:** At its backend, Morrigu uses NestJS, known for its scalability and efficiency. This ensures that as your business grows, Morrigu seamlessly scales to meet increasing demands without losing performance.

## **Real-World Application: QuickBooks Q/A**

One of the standout features of Morrigu is its ability to interact with QuickBooks to answer accounting questions. Whether it's pulling up the latest financial reports or analyzing expenditure trends, Morrigu handles these tasks effortlessly. The AI understands the context of each query, providing not just answers but insights that help businesses make informed financial decisions.

## **Why Choose Morrigu?**

Choosing Morrigu means opting for a smarter way to handle your business data. It's suitable for businesses of all sizes—from startups needing agile decision-making tools to large enterprises looking for robust data analysis solutions. Morrigu is more than a tool; it's a data partner that grows with your business.

## **Conclusion**

Morrigu represents the future of business intelligence and data interaction. By integrating advanced AI with user-friendly technology, Morrigu is not just another chatbot—it is a pivotal solution that brings real value to your business operations. As we move forward, Morrigu continues to evolve, pushing the boundaries of what businesses can achieve with their data.

Explore Morrigu today and see how intelligent data integration can revolutionize your business insights and decision-making. Welcome to the future of business intelligence. 

`}
                </Markdown>
              </MainCard>
            </Grid>

            <Grid item xs={12} md={4}>
              <RecentPosts />
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Page>
  );
};

BlogIndex.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant={'simple'}>{page}</Layout>;
};

export default BlogIndex;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/ChatStatusIndicator.tsx===
import {
  AssistantOutlined,
  AutoMode,
  AutoModeOutlined,
  BuildCircle,
  BuildCircleOutlined,
  ErrorOutline,
  Functions,
  Memory
} from '@mui/icons-material';
import { Icon, IconButton } from '@mui/material';
import { Stack, keyframes } from '@mui/system';
import React from 'react';

type ChatStatusIndicatorProps = {
  status:
    | 'calling tool'
    | 'done calling tool'
    | 'creating'
    | 'displaying'
    | 'saving'
    | 'saved'
    | 'submitting'
    | 'aborted'
    | 'connected'
    | 'error'
    | 'writing'
    | 'finished'
    | 'not found'
    | 'saving_message'
    | 'running'
    | 'loading';
};

const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

const ChatStatusIndicator = ({ status }: ChatStatusIndicatorProps) => {
  return (
    <Stack>
      <Stack
        style={{
          animation: 'pulse 2s infinite'
        }}
      >
        <IconButton
          sx={{
            borderRadius: '50%',
            width: '30px',
            height: '30px'
          }}
        >
          {status === 'error' && <AutoMode />}
          {status === 'creating' && <AutoMode sx={{ animation: `${rotate} 2s linear infinite` }} />}
          {status === 'loading' && <AutoMode sx={{ animation: `${rotate} 2s linear infinite`, color: 'white' }} />}
          {status === 'not found' && <AutoMode />}
          {status === 'calling tool' && <AutoMode sx={{ animation: `${rotate} 2s linear infinite` }} />}
          {status === 'done calling tool' && <AutoMode />}
          {status === 'writing' && <AutoMode sx={{ animation: `${rotate} 2s linear infinite` }} />}
          {status === 'finished' && <AutoMode />}
          {status === 'connected' && <AutoMode />}
          {status === 'submitting' && <AutoMode />}
          {status === 'aborted' && <AutoMode />}
          {status === 'running' && <AutoMode />}
          {status === 'displaying' && <AutoMode />}
          {status === 'saving' && <AutoMode />}
          {status === 'saved' && <AutoMode />}
          {status === 'saving_message' && <AutoMode />}
          {}
        </IconButton>
      </Stack>
    </Stack>
  );
};

export default ChatStatusIndicator;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/ChatVizMessage.tsx===
import { Avatar, Paper, Stack, Typography } from '@mui/material';
import MainCard from 'components/MainCard';

import React from 'react';
import ApexAreaChart from 'sections/charts/apexchart/ApexAreaChart';
import ApexBarChart from 'sections/charts/apexchart/ApexBarChart';
import ApexColumnChart from 'sections/charts/apexchart/ApexColumnChart';
import ApexLineChart from 'sections/charts/apexchart/ApexLineChart';
import ApexMixedChart from 'sections/charts/apexchart/ApexMixedChart';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';
import ApexPolarChart from 'sections/charts/apexchart/ApexPolarChart';
import ApexRedialBarChart from 'sections/charts/apexchart/ApexRadialChart';

export type ChartVizMessageDataType = {
  chart_type: string;
  title: string;
  caption: string;
  message: string;
  series: {
    name: string;
    data: number[];
  }[];
  width: string | number;
  height: string | number;
};

export type ChatVizMessageProps = {
  data: ChartVizMessageDataType;
};

const ChatVizMessage = ({ data }: ChatVizMessageProps) => {
  return (
    <Stack direction={'row'} gap={2} justifyContent={'flex-start'} width={'80%'} marginY={2}>
      <Avatar sx={{ color: 'white' }} src={'/assets/images/icons/LogoIcon.svg'} />
      <MainCard
        sx={{
          flexGrow: 1
        }}
        title={data?.title}
      >
        <Stack>
          <Stack>
            {data?.chart_type === 'area' && <ApexAreaChart {...data} />}
            {data?.chart_type === 'bar' && <ApexBarChart {...data} />}
            {data?.chart_type === 'column' && <ApexColumnChart {...data} />}
            {data?.chart_type === 'line' && <ApexLineChart {...data} />}
            {/* {data?.chart_type === 'mixed' && <ApexMixedChart />} */}
            {data?.chart_type === 'pie' && <ApexPieChart {...data} />}
            {data?.chart_type === 'polar' && <ApexPolarChart {...data} />}
            {data?.chart_type === 'radial' && <ApexRedialBarChart />}
          </Stack>
          <Stack>
            <Typography variant="caption">{data.caption}</Typography>
          </Stack>
        </Stack>
      </MainCard>
    </Stack>
  );
};

export default ChatVizMessage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/CueCard.tsx===
import { Typography, Divider, Stack, SxProps } from '@mui/material';
import { minHeight } from '@mui/system';
import MainCard from 'components/MainCard';

import React from 'react';

interface CueCardProps {
  text: string;
  text2: string;
  integration_icon?: React.ReactElement;
}

const CueCard = ({ text, text2, integration_icon }: CueCardProps) => {
  return (
    <MainCard
      sx={{
        cursor: 'pointer',
        minHeight: '100%'
      }}
    >
      <Stack>
        <Typography variant="subtitle1">
          <Stack direction={'row'} gap={1}>
            {integration_icon}
            {text}
          </Stack>
        </Typography>
        <Divider
          sx={{
            marginY: 1
          }}
        />
        <Typography variant="subtitle2">{text2}</Typography>
      </Stack>
    </MainCard>
  );
};

export default CueCard;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/CueCardSection.tsx===
import React from 'react';

import CueCard from './CueCard';
import { Grid, Stack } from '@mui/material';
import SimpleIconsQuickbooks from 'components/icons/Quickbooks';

type CueCardSectionProps = {
  onClick?: () => void;
};
//  These are for sample prompts to use as a guide for the user
const CueCardSection = () => {
  return (
    <Stack flexGrow={1}>
      <Grid container xs={12} marginBottom={2}>
        <Grid item xs={12} sm={12} md={4} padding={0} margin={0}>
          <CueCard
            text={'List all overdue invoices as of today.'}
            text2={'Prompt to retrieve and display the total revenue recorded in QuickBooks for the current month.'}
            integration_icon={<SimpleIconsQuickbooks width={'25px'} height={'25px'} />}
          />
        </Grid>
        <Grid item xs={12} sm={12} md={4} paddingX={2}>
          <CueCard
            text={'List all invoices that are overdue or due in the next 30 days.'}
            text2={'Request to generate a list of all invoices that have passed their due date and are still unpaid.'}
          />
        </Grid>
        <Grid item xs={12} sm={12} md={4}>
          <CueCard
            text={'What were my top expenses categories last quarter?'}
            text2={'Prompt to list the top expense categories for the previous quarter.'}
          />
        </Grid>
      </Grid>
      <Grid container xs={12} marginBottom={2}>
        <Grid item xs={12} sm={12} md={4} padding={0} margin={0}>
          <CueCard
            text={'Give me the balance summary of all bank accounts.'}
            text2={'Prompt to display the balance summary of all bank accounts.'}
          />
        </Grid>
        <Grid item xs={12} sm={12} md={4} paddingX={2}>
          <CueCard
            text={'How much did we pay to vendor XYZ in 2023?'}
            text2={'Prompt to list the total amount paid to vendor XYZ in the year 2023.'}
          />
        </Grid>
        <Grid item xs={12} sm={12} md={4}>
          <CueCard
            text={'Show the latest 10 transactions from the checking account.'}
            text2={'Prompt to display the latest 10 transactions from the checking account.'}
          />
        </Grid>
      </Grid>
    </Stack>
  );
};

export default CueCardSection;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/index.tsx===
import { Types } from 'mongoose';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { useCreateHistoryMutation } from 'store/api/history';

const CreateHistoryItem: React.FC = () => {
  const router = useRouter();
  const [createHistory] = useCreateHistoryMutation();

  useEffect(() => {
    const init = async () => {
      const newThread = await fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread`, {
        method: 'GET'
      });

      const thread_json = await newThread.json();

      router.push(`/chat/thread/${thread_json.id}`);
    };
    init();
  }, [router.query.historyId, createHistory, router]);

  return <></>;
};

export default CreateHistoryItem;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/thread/[threadId].tsx===
import { ReactElement, useEffect, useRef, useState } from 'react';

// material-ui
import { Stack, TextField, Grid, FormControl, IconButton, Badge, Avatar, Typography, Popover, MenuItem, List } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

import Markdown from 'react-markdown';
import { useFormik } from 'formik';
import { AlternateEmail, SendOutlined, SupportAgent, Tag } from '@mui/icons-material';
import { PaperClipOutlined } from '@ant-design/icons';
import Dropzone from 'components/Dropzone';
import Image from 'next/image';
import { useParams } from 'next/navigation';

import ChatVizMessage, { ChartVizMessageDataType } from '../ChatVizMessage';
import CueCardSection from '../CueCardSection';
import ChatStatusIndicator from '../ChatStatusIndicator';
import { paragon } from '@useparagon/connect';
import { sleep } from 'openai/core';
import { IIntegrationMetadata } from '@useparagon/connect/dist/src/entities/integration.interface';

type ThreadMessage = {
  id: string;
  object: string;
  created_at: number;
  assistant_id: string;
  thread_id: string;
  run_id: string;
  role: string;
  content: Content[];
  file_ids: string[];
  metadata: Record<string, unknown>;
};

type Content = {
  type: string;
  text: TextContent;
};

type TextContent = {
  value: string;
  annotations: any[];
};

type RunPageProps = {
  layout: "full" | "side",
  threadIdOverride?: string
}

const RunPage = ({ layout, threadIdOverride }: RunPageProps) => {
  const { threadId = threadIdOverride } = useParams<{ threadId: string }>();
  const scrollRef = useRef(null);
  const [loading, setLoading] = useState(true);
  const [response, setResponse] = useState<string>('');
  const [files, setFiles] = useState<File[]>([]);
  const [processedFiles, setProcessedFiles] = useState<unknown[]>([]);
  const [messages, setMessages] = useState<ThreadMessage[]>([]);
  const [actionRequired, setActionRequired] = useState<Record<string, unknown>>({});
  const [chartData, setChartData] = useState<ChartVizMessageDataType | undefined>(undefined);
  const [status, setStatus] = useState<string>('loading');
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [anchorEl2, setAnchorEl2] = useState<HTMLElement | null>(null);
  const [anchorEl3, setAnchorEl3] = useState<HTMLElement | null>(null);
  const [message, setMessage] = useState('');
  const lastValueRef = useRef(message);

  useEffect(() => {
    fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}/required_actions`)
      .then(async (res) => {
        const data = await res.json();

        if (data.status === 'requires_action') {
          const func = data.required_action?.submit_tool_outputs?.tool_calls[0].function;
          const name = func.name;
          const args = JSON.parse(func.arguments);

          if (name === 'display_chart') {
            const runId = data.id;
            setChartData(args);
            fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}/${runId}/tool_output`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify([
                {
                  id: data.required_action?.submit_tool_outputs?.tool_calls[0].id,
                  out: {
                    type: 'success',
                    message: 'Chart displayed successfully'
                  }
                }
              ])
            });
          }
        }
      })
      .catch((err) => {
        console.error('Error fetching required actions', err);
      });
  }, []);

  const formik = useFormik({
    initialValues: {
      message: ''
    },
    onSubmit: () => {
      // handleSend(values);
    }
  });

  useEffect(() => {
    const fetchRun = async () => {
      const thread = await fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}/messages`);

      const data = await thread.json();

      for (const message of data) {
        // need to parse a few things in the metadata of the message
        if (message.metadata) {
          if (message.metadata?.tool_outputs?.[0]?.output) {
            const metadata = message.metadata;
            const output = JSON.parse(metadata?.tool_outputs?.[0]?.output);
            metadata.tool_outputs[0].output = output;

            if (output?.chartData) {
              output.chartData = JSON.parse(output?.chartData);
            }
          }
        }
      }

      setMessages(data.reverse());
    };

    fetchRun();
  }, [threadId]);

  const handleUpdateMessages = async () => {
    const thread = await fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}/messages`);

    const data = await thread.json();

    for (const message of data) {
      // need to parse a few things in the metadata of the message
      if (message.metadata) {
        if (message.metadata?.tool_outputs?.[0]?.output) {
          const metadata = message.metadata;
          const output = JSON.parse(metadata?.tool_outputs?.[0]?.output);
          metadata.tool_outputs[0].output = output;

          if (output?.chartData) {
            output.chartData = JSON.parse(output?.chartData);
          }
        }
      }
    }

    setMessages(data.reverse());
    setResponse('');
  };

  const handleSend = async (values: { message: string }) => {
    setResponse('');
    setChartData(undefined);
    await fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}/message`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        role: 'user',
        content: values.message
      })
    })
      .then(() => {
        handleUpdateMessages();
      })
      .then(async () => {
        formik.resetForm();
        const tokenResp = await fetch('/api/jwt');
        const { token } = await tokenResp.json();

        const es = new EventSource(
          `${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread/${threadId}?token=${token}`
        );

        es.addEventListener('closeStream', () => {
          es.close();
        });

        es.addEventListener('messageDelta', (event) => {
          const content = JSON.parse(event.data).content[0];
          setResponse((prev) => (prev += content.text.value));
        });

        es.addEventListener('update_status', (event) => {
          setStatus(JSON.parse(event.data).status);
        });

        es.addEventListener('refresh', () => {
          handleUpdateMessages();
          setResponse('');
          setChartData(undefined);
        });

        es.addEventListener('streamEnd', () => {
          handleUpdateMessages();
        });

        es.addEventListener('frontend_tool_call', (event) => {
          const eventData = JSON.parse(event.data);

          const func = eventData.calls[0].function;
          const data = JSON.parse(func.arguments);

          if (func.name === 'display_chart') {
            setChartData(data);
          }
        });
      });
  };

  const scrollTOBottom = () => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollTOBottom();
  }, [messages, response]);

  // Paragon Integration
  const [intMeta, setIntMeta] = useState<IIntegrationMetadata[]>([]);
  useEffect(() => {
    const init = async () => {
      while (paragon.getIntegrationMetadata().length === 0) {
        await sleep(1000);
      }

      const temp = paragon.getIntegrationMetadata();

      
      setIntMeta(temp);
    };

    init();
    // const intList = intMeta.map((integ) => {
    //   return integ.name.toLowerCase();
    // });
  }, []);

  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    // we want to check if the delta between the last value and the current value is an '@', '#', or '/' and then handle those cases
    if (e.key === '@' || e.key === '#' || e.key === '/') {
      // we need to handle the case where the user is typing a message and they type '@' or '#' or '/'
      // we need to show a popper with a list of users or tags
      

      switch (e.key) {
        case '#':
          if (anchorEl) {
            setAnchorEl(null);
            break;
          }
          setAnchorEl(e.currentTarget);
          break;
        case '@':
          if (anchorEl2) {
            setAnchorEl2(null);
            break;
          }
          setAnchorEl2(e.currentTarget);
          break;
        case '/':
          if (anchorEl3) {
            setAnchorEl3(null);
            break;
          }
          setAnchorEl3(e.currentTarget);
          break;
      }
    }
    // Shift + Enter
    if (e.key === 'Enter' && e.shiftKey) {
      // we need to handle the case where the user is typing a message and they press enter
      // we need to send the message to the backend
      // we just want a new line
    } else if (e.key === 'Enter') {
      e.preventDefault();
      // we need to handle the case where the user is typing a message and they press enter
      // we need to send the message to the backend
      handleSend({
        message: formik.values.message
      });
      
    }
  };

  const handleAppendToFormikMessage = (text: string) => {
    formik.setFieldValue('message', formik.values.message + text);
    setAnchorEl3(null);
  };

  return (
    <Page title="Chat">
      <MainCard>
        <Grid container padding={0}>
          <Grid
            component={'div'}
            item
            xs={12}
            gap={2}
            sx={{
              overflowY: 'auto',
              minHeight: 'calc(100vh - 245px)',
              maxHeight: 'calc(100vh - 245px)',
              paddingX: 0
            }}
            ref={scrollRef}
          >
            {messages.map((m, i) => {
              return (
                <Stack
                  key={i}
                  flexGrow={0}
                  sx={{
                    alignItems: m.role === 'assistant' ? 'flex-start' : 'flex-end'
                  }}
                  justifyContent={m.role === 'assistant' ? 'flex-start' : 'flex-end'}
                >
                  {m?.metadata?.tool_outputs
                    ?.filter((toolOutput) => {
                      return toolOutput.function.arguments ? true : false;
                    })
                    .map((toolOutput) => {
                      return (
                        <>
                          <ChatVizMessage data={toolOutput.function.arguments} key={toolOutput.id} />
                        </>
                      );
                    })}

                  {m.content[0]?.text.value && (
                    <Stack
                      direction={'row'}
                      gap={2}
                      justifyContent={m.role === 'assistant' ? 'flex-start' : 'flex-end'}
                      maxWidth={'80%'}
                      marginY={2}
                    >
                      {m.role === 'assistant' && <Avatar sx={{ color: 'white' }} src={'/assets/images/icons/LogoIcon.svg'} />}
                      <MainCard
                        sx={{
                          backgroundColor: m.role === 'assistant' ? '#F5F5F5' : 'primary.main',
                          color: m.role === 'assistant' ? 'black' : 'white'
                        }}
                      >
                        <Markdown>{m.content[0]?.text.value}</Markdown>
                      </MainCard>
                      {m.role === 'user' && (
                        <Avatar sx={{ backgroundColor: 'primary.main', color: 'white' }} icon>
                          U
                        </Avatar>
                      )}
                    </Stack>
                  )}
                </Stack>
              );
            })}
            {chartData && <ChatVizMessage data={chartData} />}

            {response && (
              <Stack direction={'row'} gap={2} justifyContent={'flex-start'} maxWidth={'80%'} marginY={2}>
                <Avatar sx={{ color: 'white' }} src={'/assets/images/icons/LogoIcon.svg'} />
                <MainCard
                  sx={{
                    backgroundColor: '#F5F5F5',
                    color: 'text.primary',
                    paddingX: 1,
                    borderRadius: 1
                  }}
                >
                  <Markdown>{response}</Markdown>
                </MainCard>
              </Stack>
            )}

            {messages.length === 0 && <CueCardSection />}

            {status !== 'finished' && (
              <Stack direction={'row'} gap={1} justifyContent={'flex-start'} alignItems={'flex-end'} maxWidth={'80%'} marginY={2}>
                {status !== 'finished' && <ChatStatusIndicator status={status as any} />}
                {status !== 'finished' && <Typography>{status}</Typography>}
              </Stack>
            )}
          </Grid>

          <Grid item xs={12}>
            <Stack direction={'row'} flexGrow={1} gap={2}>
              <Stack flexGrow={1}>
                <FormControl>
                  <Stack gap={2}>
                    <TextField
                      id="message"
                      name="message"
                      value={formik.values.message}
                      onChange={formik.handleChange}
                      error={formik.touched.message && Boolean(formik.errors.message)}
                      placeholder='How can I help you? Type "/" for assistant commands. Type "@" to mention someone. Type "#" to tag a message.'
                      helperText={formik.touched.message && formik.errors.message}
                      maxRows={15}
                      multiline
                      onKeyDown={handleOnKeyDown}
                      InputProps={{
                        endAdornment: (
                          <IconButton
                            onClick={() =>
                              handleSend({
                                message: formik.values.message
                              })
                            }
                          >
                            <SendOutlined />
                          </IconButton>
                        ),
                        startAdornment: (
                          <Stack direction={'row'} spacing={0} gap={0} mr={2}>
                            <Stack>
                              <Stack direction={'row'}>
                                {processedFiles && processedFiles.length > 0 && (
                                  <Stack gap={2}>
                                    {processedFiles.map((file) => (
                                      <Stack key={file.name} direction={'row'} alignItems={'center'} gap={1}>
                                        <Badge color="error">
                                          <Image src={file.url} width={50} height={50} alt={file.name} />
                                        </Badge>
                                      </Stack>
                                    ))}
                                  </Stack>
                                )}
                              </Stack>

                              <Stack direction={'row'}>
                                <Dropzone onDrop={(files) => setFiles(files)}>
                                  <Stack direction={'row'}>
                                    <IconButton>
                                      <PaperClipOutlined />
                                    </IconButton>
                                  </Stack>
                                </Dropzone>
                                <IconButton
                                  onClick={(event) => {
                                    setAnchorEl3(event.currentTarget);
                                  }}
                                >
                                  <SupportAgent />
                                </IconButton>
                                <Popover open={Boolean(anchorEl3)} anchorEl={anchorEl3} onClose={() => setAnchorEl3(null)}>
                                  <Stack>
                                    <List>
                                      {intMeta?.map((integration) => (
                                        <MenuItem
                                          key={`email-${integration.name}`}
                                          onClick={() => handleAppendToFormikMessage(`/${integration.name}`)}
                                        >
                                          <Stack direction={'row'} gap={1} alignItems={'center'}>
                                            <Image src={integration.icon} width={15} height={15} alt={integration.name} />
                                            {integration.name}
                                          </Stack>
                                        </MenuItem>
                                      ))}
                                    </List>
                                  </Stack>
                                </Popover>

                                <IconButton
                                  onClick={(event) => {
                                    setAnchorEl2(event.currentTarget);
                                  }}
                                >
                                  <AlternateEmail />
                                </IconButton>
                                <Popover open={Boolean(anchorEl2)} anchorEl={anchorEl2} onClose={() => setAnchorEl2(null)}>
                                  <Stack>
                                    <List>
                                      {[1, 2, 3, 4, 5, 6].map((email) => (
                                        <MenuItem key={`email-${email}`} onClick={() => handleAppendToFormikMessage(`@${email}`)}>
                                          <AlternateEmail
                                            sx={{
                                              width: '13px'
                                            }}
                                          />{' '}
                                          Email {email}
                                        </MenuItem>
                                      ))}
                                    </List>
                                  </Stack>
                                </Popover>
                                <IconButton
                                  onClick={(event) => {
                                    setAnchorEl(event.currentTarget);
                                  }}
                                >
                                  <Tag />
                                </IconButton>
                                <Popover open={Boolean(anchorEl)} anchorEl={anchorEl} onClose={() => setAnchorEl(null)}>
                                  <Stack>
                                    <List>
                                      {[1, 2, 3, 4, 5, 6].map((tag) => (
                                        <MenuItem key={`tag-${tag}`} onClick={() => handleAppendToFormikMessage(`#${tag}`)}>
                                          <Tag
                                            sx={{
                                              width: '13px'
                                            }}
                                          />{' '}
                                          Tag {tag}
                                        </MenuItem>
                                      ))}
                                    </List>
                                  </Stack>
                                </Popover>
                              </Stack>
                            </Stack>
                          </Stack>
                        )
                      }}
                    />
                  </Stack>
                </FormControl>
              </Stack>
            </Stack>
          </Grid>
        </Grid>
      </MainCard>
    </Page>
  );
};

RunPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant={'main'}>{page}</Layout>;
};

export default RunPage;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/chat/thread/index.tsx===
import { Types } from 'mongoose';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { useCreateHistoryMutation } from 'store/api/history';

const CreateHistoryItem: React.FC = () => {
  const router = useRouter();
  const [createHistory] = useCreateHistoryMutation();

  useEffect(() => {
    const init = async () => {
      // Automatically create history if there isn't a historyId in the router query
      const newThread = await fetch(`${process.env.NEXT_PUBLIC_MORRIGU_BACKEND_API_URL}/api/openai/assistant/thread`, {
        method: 'GET'
      });

      const thread_json = await newThread.json();

      

      router.push(`/chat/thread/${thread_json.id}`);
    };
    init();
  }, [router.query.historyId, createHistory, router]);

  return <></>;
};

export default CreateHistoryItem;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/check-mail.tsx===
// next
import NextLink from 'next/link';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Box, Button, Grid, Divider, Typography, useMediaQuery } from '@mui/material';

// project import
import AnimateButton from 'components/@extended/AnimateButton';
import AuthWrapper from 'sections/auth/AuthWrapper';
import FirebaseSocial from 'sections/auth/auth-forms/FirebaseSocial';

// ================================|| CHECK MAIL ||================================ //

const CheckMail = () => {
  const theme = useTheme();
  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

  return (
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Box sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
            <Typography variant="h3">Hi, Check Your Mail</Typography>
            <Typography color="secondary" sx={{ mb: 0.5, mt: 1.25 }}>
              We have sent a password recover instructions to your email.
            </Typography>
          </Box>
        </Grid>
        <Grid item xs={12}>
          <AnimateButton>
            <NextLink href="/login" passHref legacyBehavior>
              <Button disableElevation fullWidth size="large" type="submit" variant="contained" color="primary">
                Sign in
              </Button>
            </NextLink>
          </AnimateButton>
        </Grid>
        <Grid item xs={12}>
          <Divider>
            <Typography variant={matchDownSM ? 'subtitle1' : 'h5'}>Sign up with</Typography>
          </Divider>
        </Grid>
        <Grid item xs={12}>
          <FirebaseSocial />
        </Grid>
      </Grid>
    </AuthWrapper>
  );
};

export default CheckMail;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/contact-us.tsx===
import { ReactElement } from 'react';

// material-ui
import { Container, Grid } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import ContactForm from 'sections/contact-us/ContactForm';
import ContactHeader from 'sections/contact-us/ContactHeader';

// ==============================|| CONTACT US - MAIN ||============================== //

const ContactUS = () => (
  <Page title="Contact Us">
    <Grid container spacing={12} justifyContent="center" alignItems="center" sx={{ mb: 12 }}>
      <Grid item xs={12}>
        <ContactHeader />
      </Grid>
      <Grid item xs={12} sm={10} lg={9}>
        <Container maxWidth="lg" sx={{ px: { xs: 0, sm: 2 } }}>
          <ContactForm />
        </Container>
      </Grid>
    </Grid>
  </Page>
);

ContactUS.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="simple">{page}</Layout>;
};

export default ContactUS;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/dashboard/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';


// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>

        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/database/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/feedback/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/approvals/index.tsx===
import { ReactElement } from 'react';
import StatsWidget from './widget/statistics';
import Layout from 'layout';

const StatsWidgetPage = () => {
  return <StatsWidget />;
};

StatsWidgetPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default StatsWidgetPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/approvals/widget/chart/index.tsx===
import WidgetChart from 'views/widget/chart';

export default function WidgetChartPage() {
  return <WidgetChart />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/approvals/widget/data/index.tsx===
import DataChart from 'views/widget/data';

export default function DataChartPage() {
  return <DataChart />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/approvals/widget/loading.tsx===
'use client';

import Loader from 'components/Loader';

export default function Loading() {
  return <Loader />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/approvals/widget/statistics/index.tsx===
import WidgetStatistics from 'views/widget/statistics';

export default function WidgetStatisticsPage() {
  return <WidgetStatistics />;
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/[id].tsx===
import { useState, ReactElement } from 'react';
import { useRouter } from 'next/router';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Grid,
  TextField,
  Button,
  Typography,
  Stack,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';

const initialValues = {
  expenseCategory: '',
  description: '',
  amount: 0,
  date: new Date(),
  paymentType: 'cash',
  recurring: false
};

const EditExpense = () => {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const validationSchema = Yup.object({
    expenseCategory: Yup.string().required('Expense category is required'),
    description: Yup.string().required('Description is required'),
    amount: Yup.number().required('Amount is required'),
    date: Yup.date().required('Date is required'),
    paymentType: Yup.string().required('Payment type is required')
  });

  const formik = useFormik({
    initialValues,
    validationSchema,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        // Submit expense data to the server
        await new Promise((resolve) => setTimeout(resolve, 2000));
        router.push('/finance/expense');
      } catch (error) {
        console.error('Error updating expense:', error);
      } finally {
        setLoading(false);
      }
    }
  });

  return (
    <Page title="Edit Expense">
      <form onSubmit={formik.handleSubmit}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="expense-category-label">Expense Category</InputLabel>
              <Select
                labelId="expense-category-label"
                id="expense-category"
                name="expenseCategory"
                value={formik.values.expenseCategory}
                onChange={formik.handleChange}
                error={formik.touched.expenseCategory && Boolean(formik.errors.expenseCategory)}
              >
                <MenuItem value="travel">Travel</MenuItem>
                <MenuItem value="office">Office</MenuItem>
                <MenuItem value="marketing">Marketing</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
              <FormHelperText error>{formik.touched.expenseCategory && formik.errors.expenseCategory}</FormHelperText>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="description"
              name="description"
              label="Description"
              value={formik.values.description}
              onChange={formik.handleChange}
              error={formik.touched.description && Boolean(formik.errors.description)}
              helperText={formik.touched.description && formik.errors.description}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="amount"
              name="amount"
              label="Amount"
              type="number"
              value={formik.values.amount}
              onChange={formik.handleChange}
              error={formik.touched.amount && Boolean(formik.errors.amount)}
              helperText={formik.touched.amount && formik.errors.amount}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField fullWidth id="date" name="date" label="Date" type="date" value={formik.values.date} onChange={formik.handleChange} />
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Payment Type</FormLabel>
              <RadioGroup row aria-label="payment-type" name="paymentType" value={formik.values.paymentType} onChange={formik.handleChange}>
                <FormControlLabel value="cash" control={<Radio />} label="Cash" />
                <FormControlLabel value="credit" control={<Radio />} label="Credit Card" />
                <FormControlLabel value="debit" control={<Radio />} label="Debit Card" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Recurring Expense</FormLabel>
              <RadioGroup
                row
                aria-label="recurring-expense"
                name="recurring"
                value={formik.values.recurring.toString()}
                onChange={formik.handleChange}
              >
                <FormControlLabel value="true" control={<Radio />} label="Yes" />
                <FormControlLabel value="false" control={<Radio />} label="No" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <Stack direction="row" spacing={1}>
              <Button type="submit" variant="contained" color="primary" disabled={loading}>
                Update Expense
              </Button>
              <Button variant="contained" color="secondary" disabled={loading}>
                Cancel
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </Page>
  );
};

EditExpense.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default EditExpense;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/create.tsx===
import { useState, ReactElement } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Grid,
  TextField,
  Button,
  Stack,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';
import { useRouter } from 'next/router';

// project imports
import Layout from 'layout';
import Page from 'components/Page';

const initialValues = {
  expenseCategory: '',
  description: '',
  amount: 0,
  date: new Date(),
  paymentType: 'cash',
  recurring: false
};

const CreateExpense = () => {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const validationSchema = Yup.object({
    expenseCategory: Yup.string().required('Expense category is required'),
    description: Yup.string().required('Description is required'),
    amount: Yup.number().required('Amount is required'),
    date: Yup.date().required('Date is required'),
    paymentType: Yup.string().required('Payment type is required')
  });

  const formik = useFormik({
    initialValues,
    validationSchema,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        // Submit expense data to the server
        await new Promise((resolve) => setTimeout(resolve, 2000));
        router.push('/finance/expense');
      } catch (error) {
        console.error('Error creating expense:', error);
      } finally {
        setLoading(false);
      }
    }
  });

  return (
    <Page title="Create Expense">
      <form onSubmit={formik.handleSubmit}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="expense-category-label">Expense Category</InputLabel>
              <Select
                labelId="expense-category-label"
                id="expense-category"
                name="expenseCategory"
                value={formik.values.expenseCategory}
                onChange={formik.handleChange}
                error={formik.touched.expenseCategory && Boolean(formik.errors.expenseCategory)}
              >
                <MenuItem value="travel">Travel</MenuItem>
                <MenuItem value="office">Office</MenuItem>
                <MenuItem value="marketing">Marketing</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
              <FormHelperText error>{formik.touched.expenseCategory && formik.errors.expenseCategory}</FormHelperText>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="description"
              name="description"
              label="Description"
              value={formik.values.description}
              onChange={formik.handleChange}
              error={formik.touched.description && Boolean(formik.errors.description)}
              helperText={formik.touched.description && formik.errors.description}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="amount"
              name="amount"
              label="Amount"
              type="number"
              value={formik.values.amount}
              onChange={formik.handleChange}
              error={formik.touched.amount && Boolean(formik.errors.amount)}
              helperText={formik.touched.amount && formik.errors.amount}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="date"
              name="date"
              label="Date"
              type="date"
              value={formik.values.date}
              onChange={formik.handleChange}
              error={formik.touched.date && Boolean(formik.errors.date)}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Payment Type</FormLabel>
              <RadioGroup row aria-label="payment-type" name="paymentType" value={formik.values.paymentType} onChange={formik.handleChange}>
                <FormControlLabel value="cash" control={<Radio />} label="Cash" />
                <FormControlLabel value="credit" control={<Radio />} label="Credit Card" />
                <FormControlLabel value="debit" control={<Radio />} label="Debit Card" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Recurring Expense</FormLabel>
              <RadioGroup
                row
                aria-label="recurring-expense"
                name="recurring"
                value={formik.values.recurring.toString()}
                onChange={formik.handleChange}
              >
                <FormControlLabel value="true" control={<Radio />} label="Yes" />
                <FormControlLabel value="false" control={<Radio />} label="No" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <Stack direction="row" spacing={1}>
              <Button type="submit" variant="contained" color="primary" disabled={loading}>
                Create Expense
              </Button>
              <Button variant="contained" color="secondary" disabled={loading}>
                Cancel
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </Page>
  );
};

CreateExpense.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default CreateExpense;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/edit/[id].tsx===
import { useState, ReactElement } from 'react';
import { useRouter } from 'next/router';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Grid,
  TextField,
  Button,
  Typography,
  Stack,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';

const initialValues = {
  expenseCategory: '',
  description: '',
  amount: 0,
  date: new Date(),
  paymentType: 'cash',
  recurring: false
};

const EditExpense = () => {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const validationSchema = Yup.object({
    expenseCategory: Yup.string().required('Expense category is required'),
    description: Yup.string().required('Description is required'),
    amount: Yup.number().required('Amount is required'),
    date: Yup.date().required('Date is required'),
    paymentType: Yup.string().required('Payment type is required')
  });

  const formik = useFormik({
    initialValues,
    validationSchema,
    onSubmit: async (values) => {
      setLoading(true);
      try {
        // Submit expense data to the server
        await new Promise((resolve) => setTimeout(resolve, 2000));
        router.push('/finance/expense');
      } catch (error) {
        console.error('Error updating expense:', error);
      } finally {
        setLoading(false);
      }
    }
  });

  return (
    <Page title="Edit Expense">
      <form onSubmit={formik.handleSubmit}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel id="expense-category-label">Expense Category</InputLabel>
              <Select
                labelId="expense-category-label"
                id="expense-category"
                name="expenseCategory"
                value={formik.values.expenseCategory}
                onChange={formik.handleChange}
                error={formik.touched.expenseCategory && Boolean(formik.errors.expenseCategory)}
              >
                <MenuItem value="travel">Travel</MenuItem>
                <MenuItem value="office">Office</MenuItem>
                <MenuItem value="marketing">Marketing</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
              <FormHelperText error>{formik.touched.expenseCategory && formik.errors.expenseCategory}</FormHelperText>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="description"
              name="description"
              label="Description"
              value={formik.values.description}
              onChange={formik.handleChange}
              error={formik.touched.description && Boolean(formik.errors.description)}
              helperText={formik.touched.description && formik.errors.description}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="amount"
              name="amount"
              label="Amount"
              type="number"
              value={formik.values.amount}
              onChange={formik.handleChange}
              error={formik.touched.amount && Boolean(formik.errors.amount)}
              helperText={formik.touched.amount && formik.errors.amount}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              id="date"
              name="date"
              label="Date"
              type="date"
              value={formik.values.date}
              onChange={formik.handleChange}
              error={formik.touched.date && Boolean(formik.errors.date)}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Payment Type</FormLabel>
              <RadioGroup row aria-label="payment-type" name="paymentType" value={formik.values.paymentType} onChange={formik.handleChange}>
                <FormControlLabel value="cash" control={<Radio />} label="Cash" />
                <FormControlLabel value="credit" control={<Radio />} label="Credit Card" />
                <FormControlLabel value="debit" control={<Radio />} label="Debit Card" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}>
            <FormControl component="fieldset">
              <FormLabel component="legend">Recurring Expense</FormLabel>
              <RadioGroup
                row
                aria-label="recurring-expense"
                name="recurring"
                value={formik.values.recurring.toString()}
                onChange={formik.handleChange}
              >
                <FormControlLabel value="true" control={<Radio />} label="Yes" />
                <FormControlLabel value="false" control={<Radio />} label="No" />
              </RadioGroup>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <Stack direction="row" spacing={1}>
              <Button type="submit" variant="contained" color="primary" disabled={loading}>
                Update Expense
              </Button>
              <Button variant="contained" color="secondary" disabled={loading}>
                Cancel
              </Button>
            </Stack>
          </Grid>
        </Grid>
      </form>
    </Page>
  );
};

EditExpense.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default EditExpense;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/expense/index.tsx===
import { useTheme } from '@emotion/react';
import { Grid, Typography, Divider, Stack, Button, TextField, IconButton, Menu, MenuItem } from '@mui/material';
import MainCard from 'components/MainCard';
import Page from 'components/Page';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';
import Layout from 'layout';

import { ReactElement, useState, useEffect } from 'react';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ExpenseBreakdown from 'sections/expense/ExpenseBreakdown';
import RecentExpenses from 'sections/expense/RecentExpenses';
import FilterListIcon from '@mui/icons-material/FilterList';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import PrintIcon from '@mui/icons-material/Print';
import SearchIcon from '@mui/icons-material/Search';
import DateRangeIcon from '@mui/icons-material/DateRange';
import CategoryIcon from '@mui/icons-material/Category';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';

interface Expense {
  id: number;
  category: string;
  description: string;
  amount: number;
  date: string;
}

const ExpensePage = () => {
  const theme = useTheme();
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [searchText, setSearchText] = useState('');
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [category, setCategory] = useState('');
  const [minAmount, setMinAmount] = useState<number | null>(null);
  const [maxAmount, setMaxAmount] = useState<number | null>(null);

  useEffect(() => {
    // Fetch expenses from the API
    const fetchExpenses = async () => {
      try {
        const response = await fetch('/api/expenses');
        const data = await response.json();
        setExpenses(data);
      } catch (error) {
        console.error('Error fetching expenses:', error);
      }
    };

    fetchExpenses();
  }, []);

  const handleFilterClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleFilterClose = () => {
    setFilterAnchorEl(null);
  };

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchText(event.target.value);
  };

  const handleStartDateChange = (date: Date | null) => {
    setStartDate(date);
  };

  const handleEndDateChange = (date: Date | null) => {
    setEndDate(date);
  };

  const handleCategoryChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCategory(event.target.value);
  };

  const handleMinAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMinAmount(event.target.value ? parseFloat(event.target.value) : null);
  };

  const handleMaxAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setMaxAmount(event.target.value ? parseFloat(event.target.value) : null);
  };

  const filteredExpenses = expenses.filter(
    (expense) =>
      (searchText === '' || expense.description.toLowerCase().includes(searchText.toLowerCase())) &&
      (!startDate || new Date(expense.date) >= startDate) &&
      (!endDate || new Date(expense.date) <= endDate) &&
      (category === '' || expense.category === category) &&
      (!minAmount || expense.amount >= minAmount) &&
      (!maxAmount || expense.amount <= maxAmount)
  );

  const handlePrint = () => {
    // Implement print functionality
    
  };

  const handleExport = () => {
    // Implement export to CSV functionality
    
  };

  const handleCreateExpense = () => {
    // Implement create new expense functionality
    
  };

  return (
    <Page title="Expense Management">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Expenses" count="$78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Overdue Expenses" count="$18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Cash Flow" count="$35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Savings" count="$523,000" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        {/* row 2 */}
        <Grid item xs={12}>
          <MainCard>
            <Stack spacing={3}>
              <Stack direction="row" justifyContent="space-between" alignItems="center">
                <Typography variant="h4">Recent Expenses</Typography>
                <Stack direction="row" spacing={1}>
                  <TextField
                    placeholder="Search expenses..."
                    value={searchText}
                    onChange={handleSearch}
                    InputProps={{
                      startAdornment: <SearchIcon fontSize="small" />
                    }}
                  />
                  <IconButton onClick={handleFilterClick}>
                    <FilterListIcon />
                  </IconButton>
                  <Menu anchorEl={filterAnchorEl} open={Boolean(filterAnchorEl)} onClose={handleFilterClose}>
                    <MenuItem>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <DateRangeIcon />
                        <TextField
                          type="date"
                          label="Start Date"
                          value={startDate ? startDate.toISOString().split('T')[0] : ''}
                          onChange={(e) => handleStartDateChange(e.target.value ? new Date(e.target.value) : null)}
                          InputLabelProps={{ shrink: true }}
                        />
                        <TextField
                          type="date"
                          label="End Date"
                          value={endDate ? endDate.toISOString().split('T')[0] : ''}
                          onChange={(e) => handleEndDateChange(e.target.value ? new Date(e.target.value) : null)}
                          InputLabelProps={{ shrink: true }}
                        />
                      </Stack>
                    </MenuItem>
                    <MenuItem>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <CategoryIcon />
                        <TextField label="Category" value={category} onChange={handleCategoryChange} />
                      </Stack>
                    </MenuItem>
                    <MenuItem>
                      <Stack direction="row" alignItems="center" spacing={1}>
                        <AttachMoneyIcon />
                        <TextField type="number" label="Min Amount" value={minAmount ?? ''} onChange={handleMinAmountChange} />
                        <TextField type="number" label="Max Amount" value={maxAmount ?? ''} onChange={handleMaxAmountChange} />
                      </Stack>
                    </MenuItem>
                  </Menu>
                </Stack>
              </Stack>
              <Divider />
              <RecentExpenses
                data={[
                  {
                    id: 1,
                    category: 'Travel',
                    description: 'Flight to New York',
                    amount: 500,
                    date: '2021-10-01'
                  },
                  {
                    id: 2,
                    category: 'Office',
                    description: 'Office Supplies',
                    amount: 100,
                    date: '2021-10-05'
                  },
                  {
                    id: 3,
                    category: 'Marketing',
                    description: 'Facebook Ads',
                    amount: 300,
                    date: '2021-10-10'
                  },
                  {
                    id: 4,
                    category: 'Other',
                    description: 'Miscellaneous',
                    amount: 200,
                    date: '2021-10-15'
                  }
                ]}
              />
            </Stack>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

ExpensePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ExpensePage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Grid, SelectChangeEvent, Stack } from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import Page from 'components/Page';
import useConfig from 'hooks/useConfig';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Finance Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>

        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Accounts Receivable" count="$78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Accounts Payable" count="$18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Cash Flow" count="$35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Revenue" count="$523,000" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item xs={12} md={7} lg={8}>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <IncomeChart slot={slot} quantity={2} />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/invoice/create/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import CreateInvoiceApp from 'views/apps/invoice/create';

// ==============================|| PAGE ||============================== //

const CreateInvoice = () => {
  return <CreateInvoiceApp />;
};

CreateInvoice.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default CreateInvoice;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/invoice/dashboard/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import InvoiceDashboardApp from 'views/apps/invoice/dashboard';

// ==============================|| PAGE ||============================== //

const InvoiceDashboard = () => {
  return <InvoiceDashboardApp />;
};

InvoiceDashboard.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default InvoiceDashboard;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/invoice/details/[id].tsx===
// import { Products } from 'types/e-commerce';
// import axios from 'utils/axios';
import Layout from 'layout';
import { useRouter } from 'next/router';
import InvoiceDetails from 'views/apps/invoice/details';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {};
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
const InvoiceDetailsPage = ({ params }: Props) => {
  const router = useRouter();
  const { id } = router.query;

  return <InvoiceDetails id={id as string} />;
};

InvoiceDetailsPage.getLayout = function getLayout(page: JSX.Element) {
  return <Layout>{page}</Layout>;
};

export default InvoiceDetailsPage;

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  // todo: this need to look back again once we implemted SWR
  // const response = await axios.get('/api/products/list');

  // return response.data.products.map((prod: Products) => ({
  //   id: prod.id
  // }));

  const response = [1, 2, 3, 5];

  return response.map((prodId: number) => ({
    id: prodId.toString()
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/invoice/edit/[id]/index.tsx===
// import { Products } from 'types/e-commerce';
// import axios from 'utils/axios';
import Layout from 'layout';
import { useRouter } from 'next/router';
import { ReactElement } from 'react';
import InvoiceEdit from 'views/apps/invoice/edit';

// ==============================|| PAGE ||============================== //

type Props = {
  params: {};
};

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
const InvoiceEditPage = ({ params }: Props) => {
  const router = useRouter();

  const { id } = router.query;

  return <InvoiceEdit id={id as string} />;
};

InvoiceEditPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default InvoiceEditPage;

// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  // todo: this need to look back again once we implemted SWR
  // const response = await axios.get('/api/products/list');

  // return response.data.products.map((prod: Products) => ({
  //   id: prod.id
  // }));

  const response = [1, 2, 3, 5];

  return response.map((prodId: number) => ({
    id: prodId.toString()
  }));
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/invoice/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import InvoiceListApp from 'views/apps/invoice/list';

// ==============================|| PAGE ||============================== //

const InvoiceList = () => {
  return <InvoiceListApp />;
};

InvoiceList.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default InvoiceList;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/policy/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import WidgetStatistics from 'views/widget/statistics';

const WidgetStatisticsPage = () => {
  return <WidgetStatistics />;
};

WidgetStatisticsPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default WidgetStatisticsPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/reports/index.tsx===
// AI Thumbprint = adsasdfknx1b12
import { useState, ReactElement } from 'react';
import { useTheme } from '@mui/material/styles';
import { Grid, Typography, Box, LinearProgress, Stack } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import ApexAreaChart from 'sections/charts/apexchart/ApexAreaChart';

const ExpenseReports = () => {
  // AI Thumbprint = adsasdfknx1b12
  const theme = useTheme();
  const [loading, setLoading] = useState(false); // Add loading state
  const [expenseData, setExpenseData] = useState({
    totalExpenses: 0,
    monthlyExpenses: 0,
    averageExpense: 0,
    expenseHistory: [
      {
        date: '',
        amount: 0
      },
      {
        date: '',
        amount: 0
      }
    ]
  });

  // Fetch expense data from the API
  const fetchExpenseData = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/expenses');
      const data = await response.json();
      setExpenseData(data);
    } catch (error) {
      console.error('Error fetching expense data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Fetch expense data when the component mounts
  useState(() => {
    fetchExpenseData();
  }, []);

  return (
    <Page title="Expense Reports">
      <Grid container spacing={2}>
        {loading ? (
          <Grid item xs={12}>
            <Box sx={{ width: '100%' }}>
              <LinearProgress />
            </Box>
          </Grid>
        ) : (
          <>
            <Grid item xs={12} md={6}>
              <MainCard title="Total Expenses">
                <Typography variant="h4">${expenseData.totalExpenses.toFixed(2)}</Typography>
                <Typography variant="body2">Total expenses incurred.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12} md={6}>
              <MainCard title="Monthly Expenses">
                <Typography variant="h4">${expenseData.monthlyExpenses.toFixed(2)}</Typography>
                <Typography variant="body2">Expenses incurred in the current month.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12} md={6}>
              <MainCard title="Average Expense">
                <Typography variant="h4">${expenseData.averageExpense.toFixed(2)}</Typography>
                <Typography variant="body2">Average expense per transaction.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard title="Expense History">
                <Stack spacing={2}>
                  <ApexAreaChart series={[{ name: 'Expenses', data: expenseData.expenseHistory.map((record) => record.amount) }]} />
                </Stack>
              </MainCard>
            </Grid>
          </>
        )}
      </Grid>
    </Page>
  );
};

ExpenseReports.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ExpenseReports;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/settings/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import WidgetStatistics from 'views/widget/statistics';

const WidgetStatisticsPage = () => {
  return <WidgetStatistics />;
};

WidgetStatisticsPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default WidgetStatisticsPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/finance/transactions/index.tsx===
import Layout from 'layout';
import { ReactElement } from 'react';
import WidgetStatistics from 'views/widget/statistics';

const StatsWidgetPage = () => {
  return <WidgetStatistics />;
};

StatsWidgetPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default StatsWidgetPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forgot-password.tsx===
// next
import NextLink from 'next/link';

// material-ui
import { Grid, Link, Stack, Typography } from '@mui/material';

// project import
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthForgotPassword from 'sections/auth/auth-forms/AuthForgotPassword';

// ================================|| FORGOT PASSWORD ||================================ //

const ForgotPassword = () => (
  <AuthWrapper>
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Stack direction="row" justifyContent="space-between" alignItems="baseline" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
          <Typography variant="h3">Forgot Password</Typography>
          <NextLink href="/login" passHref legacyBehavior>
            <Link variant="body1" color="primary">
              Back to Login
            </Link>
          </NextLink>
        </Stack>
      </Grid>
      <Grid item xs={12}>
        <AuthForgotPassword />
      </Grid>
    </Grid>
  </AuthWrapper>
);

export default ForgotPassword;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/layouts/action-bar.tsx===
import { ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Button,
  CardContent,
  CardActions,
  Divider,
  FormHelperText,
  Grid,
  InputLabel,
  Stack,
  TextField,
  Tooltip,
  Typography
} from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';

// assets
import { DeleteFilled, LinkOutlined } from '@ant-design/icons';

// ==============================|| LAYOUTS- ACTION BAR ||============================== //
function ActionBar() {
  const theme = useTheme();
  return (
    <Page title="Action Bar">
      <Grid container spacing={3}>
        <Grid item xs={12} md={6} lg={6}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <MainCard title="Simple Action Bar" content={false}>
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12}>
                      <Stack spacing={0.5}>
                        <InputLabel>Name</InputLabel>
                        <TextField fullWidth placeholder="Enter full name" />
                        <FormHelperText>Please enter your full name</FormHelperText>
                      </Stack>
                    </Grid>
                  </Grid>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" spacing={1} justifyContent="flex-end" sx={{ width: 1, px: 1.5, py: 0.75 }}>
                    <Button color="error" size="small">
                      Cancel
                    </Button>
                    <Button variant="contained" size="small">
                      Submit
                    </Button>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard title="Action Button with Link" content={false}>
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12}>
                      <Stack spacing={0.5}>
                        <InputLabel>Name</InputLabel>
                        <TextField fullWidth placeholder="Enter full name" />
                        <FormHelperText>Please enter your full name</FormHelperText>
                      </Stack>
                    </Grid>
                  </Grid>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" spacing={1} alignItems="center" justifyContent="flex-end" sx={{ width: 1, px: 1.5, py: 0.75 }}>
                    <Button color="error" size="small">
                      Cancel
                    </Button>
                    <Typography variant="body2" sx={{ mr: '8px !important' }}>
                      or
                    </Typography>
                    <Button variant="contained" size="small">
                      Submit
                    </Button>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard title="With side action button" content={false}>
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12}>
                      <Stack spacing={0.5}>
                        <InputLabel>Name</InputLabel>
                        <TextField fullWidth placeholder="Enter full name" />
                        <FormHelperText>Please enter your full name</FormHelperText>
                      </Stack>
                    </Grid>
                  </Grid>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ width: 1 }}>
                    <Tooltip title="Delete Event" placement="top">
                      <IconButton size="large" color="error">
                        <DeleteFilled />
                      </IconButton>
                    </Tooltip>
                    <Stack direction="row" spacing={1} sx={{ px: 1.5, py: 0.75 }}>
                      <Button color="error" size="small">
                        Cancel
                      </Button>
                      <Button variant="contained" size="small">
                        Submit
                      </Button>
                    </Stack>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
          </Grid>
        </Grid>
        <Grid item xs={12} md={6} lg={6}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <MainCard title="Left Align Action Bar" content={false}>
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12}>
                      <Stack spacing={0.5}>
                        <InputLabel>Name</InputLabel>
                        <TextField fullWidth placeholder="Enter full name" />
                        <FormHelperText>Please enter your full name</FormHelperText>
                      </Stack>
                    </Grid>
                  </Grid>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" spacing={1} sx={{ px: 1.5, py: 0.75 }}>
                    <Button color="error" size="small">
                      Cancel
                    </Button>
                    <Button variant="contained" size="small">
                      Submit
                    </Button>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard title="Horizontal Form" content={false}>
                <CardContent>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={8}>
                      <TextField fullWidth placeholder="Enter full name" />
                      <FormHelperText>Please enter your full name</FormHelperText>
                    </Grid>
                  </Grid>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" spacing={1} justifyContent="center" sx={{ width: 1, px: 1.5, py: 0.75 }}>
                    <Button color="error" size="small">
                      Cancel
                    </Button>
                    <Button variant="contained" size="small">
                      Submit
                    </Button>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard
                title="Top & Bottom Actions Bars"
                content={false}
                secondary={
                  <IconButton>
                    <LinkOutlined style={{ color: theme.palette.primary.main }} />
                  </IconButton>
                }
              >
                <CardContent>
                  <Stack spacing={0.5}>
                    <InputLabel>Name</InputLabel>
                    <TextField fullWidth placeholder="Enter full name" />
                    <FormHelperText>Please enter your full name</FormHelperText>
                  </Stack>
                </CardContent>
                <Divider />
                <CardActions>
                  <Stack direction="row" spacing={1} sx={{ width: 1, px: 1.5, py: 0.75 }}>
                    <Button color="error" size="small">
                      Cancel
                    </Button>
                    <Button variant="contained" size="small">
                      Submit
                    </Button>
                  </Stack>
                </CardActions>
              </MainCard>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Page>
  );
}

ActionBar.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ActionBar;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/layouts/basic.tsx===
import { ReactElement } from 'react';

// material-ui
import { Checkbox, Divider, Grid, TextField, FormGroup, FormControlLabel, FormHelperText, InputLabel, Typography } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// ==============================|| LAYOUTS - BASIC ||============================== //
function Layouts() {
  return (
    <Page title="Basic Forms">
      <Grid container spacing={3}>
        <Grid item xs={12} lg={6}>
          <MainCard title="Simple Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12}>
                <InputLabel>Name</InputLabel>
                <TextField fullWidth placeholder="Enter full name" />
                <FormHelperText>Please enter your full name</FormHelperText>
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Email</InputLabel>
                <TextField fullWidth placeholder="Enter email" />
                <FormHelperText>Please enter your Email</FormHelperText>
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Password</InputLabel>
                <TextField type="password" fullWidth placeholder="Enter Password" />
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Language</InputLabel>
                <FormGroup>
                  <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                  <FormControlLabel control={<Checkbox />} label="French" />
                  <FormControlLabel control={<Checkbox />} label="Dutch" />
                </FormGroup>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12} lg={6}>
          <MainCard title="Horizontal Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12}>
                <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                  A. Personal Info:
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel>Name</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter full name" />
                    <FormHelperText>Please enter your full name</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel>Email</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter email" />
                    <FormHelperText>Please enter your Email</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                  B. Educational Info:
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel>Degree Name</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter Degree name" />
                    <FormHelperText>Please enter your Degree name</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel>Passing Year</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter Passing Year" />
                    <FormHelperText>Please enter Passing Year</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel>Language</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                    <FormControlLabel control={<Checkbox />} label="French" />
                    <FormControlLabel control={<Checkbox />} label="Dutch" />
                  </Grid>
                </Grid>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12} lg={6}>
          <MainCard title="Control Divider">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12}>
                <InputLabel>Name</InputLabel>
                <TextField fullWidth placeholder="Enter full name" />
                <FormHelperText>Please enter your full name</FormHelperText>
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Email</InputLabel>
                <TextField fullWidth placeholder="Enter email" />
                <FormHelperText>Please enter your Email</FormHelperText>
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Password</InputLabel>
                <TextField type="password" fullWidth placeholder="Enter Password" />
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12}>
                <InputLabel>Language</InputLabel>
                <FormGroup>
                  <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                  <FormControlLabel control={<Checkbox />} label="French" />
                  <FormControlLabel control={<Checkbox />} label="Dutch" />
                </FormGroup>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12} lg={6}>
          <MainCard title="Input Label Alignment">
            <Grid container spacing={3} alignItems="center">
              <Grid item xs={12}>
                <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                  A. Personal Info:
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter full name" />
                    <FormHelperText>Please enter your full name</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter email" />
                    <FormHelperText>Please enter your Email</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12}>
                <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                  B. Educational Info:
                </Typography>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Degree Name :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter Degree name" />
                    <FormHelperText>Please enter your Degree name</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Passing Year :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <TextField fullWidth placeholder="Enter Passing Year" />
                    <FormHelperText>Please enter Passing Year</FormHelperText>
                  </Grid>
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Language :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={6}>
                    <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                    <FormControlLabel control={<Checkbox />} label="French" />
                    <FormControlLabel control={<Checkbox />} label="Dutch" />
                  </Grid>
                </Grid>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
}

Layouts.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Layouts;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/layouts/multi-column.tsx===
import { ReactElement } from 'react';

// material-ui
import {
  Checkbox,
  Divider,
  FormControlLabel,
  FormHelperText,
  Grid,
  InputAdornment,
  InputLabel,
  RadioGroup,
  Radio,
  Stack,
  TextField,
  Typography
} from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// assets
import { LockOutlined, LinkOutlined } from '@ant-design/icons';

// ==============================|| LAYOUTS -  COLUMNS ||============================== //
function ColumnsLayouts() {
  return (
    <Page title="Multi Column Forms">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <MainCard title="2 Columns Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} lg={6}>
                <Stack spacing={0.5}>
                  <InputLabel>Name</InputLabel>
                  <TextField fullWidth placeholder="Enter full name" />
                  <FormHelperText>Please enter your full name</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Stack spacing={0.5}>
                  <InputLabel>Email</InputLabel>
                  <TextField fullWidth placeholder="Enter email" />
                  <FormHelperText>Please enter your Email</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Stack spacing={0.5}>
                  <InputLabel>Password</InputLabel>
                  <TextField
                    type="password"
                    fullWidth
                    placeholder="Enter Password"
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <LockOutlined />
                        </InputAdornment>
                      )
                    }}
                  />
                  <FormHelperText>Please enter Password</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Stack spacing={0.5}>
                  <InputLabel>Profile URL</InputLabel>
                  <TextField
                    fullWidth
                    placeholder="Please enter your Profile URL"
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <LinkOutlined />
                        </InputAdornment>
                      )
                    }}
                  />
                  <FormHelperText>Please enter your Profile URL</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Typography variant="subtitle1" component="div" sx={{ mb: 1 }}>
                  language:
                </Typography>
                <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                <FormControlLabel control={<Checkbox />} label="French" />
                <FormControlLabel control={<Checkbox />} label="Dutch" />
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12}>
          <MainCard title="2 Columns Horizontal Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} lg={6}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} md={2}>
                    <InputLabel>Name</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} md={10}>
                    <TextField fullWidth placeholder="Enter full name" />
                    <FormHelperText>Please enter your full name</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} md={2}>
                    <InputLabel>Email</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} md={10}>
                    <TextField fullWidth placeholder="Enter email" />
                    <FormHelperText>Please enter your Email</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} md={2}>
                    <InputLabel>Password</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} md={10}>
                    <TextField
                      type="password"
                      fullWidth
                      placeholder="Enter Password"
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <LockOutlined />
                          </InputAdornment>
                        )
                      }}
                    />
                    <FormHelperText>Please enter Password</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} md={2}>
                    <InputLabel>Profile URL</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} md={10}>
                    <TextField
                      fullWidth
                      placeholder="Please enter your Profile URL"
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <LinkOutlined />
                          </InputAdornment>
                        )
                      }}
                    />
                    <FormHelperText>Please enter your Profile URL</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={6}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} md={2}>
                    <InputLabel>Language</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} md={10}>
                    <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                    <FormControlLabel control={<Checkbox />} label="French" />
                    <FormControlLabel control={<Checkbox />} label="Dutch" />
                  </Grid>
                </Grid>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12}>
          <MainCard title="3 Columns Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Name</InputLabel>
                  <TextField fullWidth placeholder="Enter full name" />
                  <FormHelperText>Please enter your full name</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Email</InputLabel>
                  <TextField fullWidth placeholder="Enter email" />
                  <FormHelperText>Please enter your Email</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Password</InputLabel>
                  <TextField
                    type="password"
                    fullWidth
                    placeholder="Enter Password"
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <LockOutlined />
                        </InputAdornment>
                      )
                    }}
                  />
                  <FormHelperText>Please enter Password</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Contact</InputLabel>
                  <TextField fullWidth placeholder="Enter contact number" />
                  <FormHelperText>Please enter your contact</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Profile URL</InputLabel>
                  <TextField
                    fullWidth
                    placeholder="Please enter your Profile URL"
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <LinkOutlined />
                        </InputAdornment>
                      )
                    }}
                  />
                  <FormHelperText>Please enter your Profile URL</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Pincode</InputLabel>
                  <TextField fullWidth placeholder="Enter your postcode" />
                  <FormHelperText>Please enter your postcode</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Stack spacing={0.5}>
                  <InputLabel>Address</InputLabel>
                  <TextField fullWidth placeholder="Enter your address" />
                  <FormHelperText>Please enter your address</FormHelperText>
                </Stack>
              </Grid>
              <Grid item xs={12} lg={6}>
                <InputLabel>User Type</InputLabel>
                <FormControlLabel control={<Checkbox defaultChecked />} label="Administrator" />
                <FormControlLabel control={<Checkbox />} label="Author" />
                <FormHelperText>Please select User Type</FormHelperText>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
        <Grid item xs={12}>
          <MainCard title="3 Columns Horizontal Form Layout">
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField fullWidth placeholder="Enter full name" />
                    <FormHelperText>Please enter your full name</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField fullWidth placeholder="Enter email" />
                    <FormHelperText>Please enter your Email</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Password :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField
                      type="password"
                      fullWidth
                      placeholder="Enter Password"
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <LockOutlined />
                          </InputAdornment>
                        )
                      }}
                    />
                    <FormHelperText>Please enter Password</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Contact :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField fullWidth placeholder="Enter contact number" />
                    <FormHelperText>Please enter your contact</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Profile URL :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField
                      fullWidth
                      placeholder="Please enter your Profile URL"
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="end">
                            <LinkOutlined />
                          </InputAdornment>
                        )
                      }}
                    />
                    <FormHelperText>Please enter your Profile URL</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Pincode :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField fullWidth placeholder="Enter your postcode" />
                    <FormHelperText>Please enter your postcode</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12}>
                <Divider />
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Address :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <TextField fullWidth placeholder="Enter your address" />
                    <FormHelperText>Please enter your address</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item xs={12} lg={4}>
                <Grid container spacing={2} alignItems="center">
                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>User Type :</InputLabel>
                  </Grid>
                  <Grid item xs={12} sm={9} lg={8}>
                    <RadioGroup aria-label="gender" name="controlled-radio-buttons-group">
                      <FormControlLabel value="female" control={<Radio />} label="Administrator" />
                      <FormControlLabel value="male" control={<Radio />} label="Author" />
                    </RadioGroup>
                    <FormHelperText>Please select User Type</FormHelperText>
                  </Grid>
                </Grid>
              </Grid>
            </Grid>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
}

ColumnsLayouts.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ColumnsLayouts;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/layouts/sticky-bar.tsx===
import { ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Avatar,
  Button,
  CardContent,
  CardActions,
  Checkbox,
  Divider,
  Grid,
  InputLabel,
  TextField,
  FormHelperText,
  FormControlLabel,
  Typography,
  Stack
} from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// assets
import { IdcardOutlined } from '@ant-design/icons';

// ==============================|| LAYOUTS - STICKY ACTIONBAR ||============================== //

function StickyActionBar() {
  const theme = useTheme();

  return (
    <Page title="Sticky Bar">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <MainCard content={false} sx={{ overflow: 'visible' }}>
            <CardActions
              sx={{
                position: 'sticky',
                top: '60px',
                bgcolor: theme.palette.background.default,
                zIndex: 1,
                borderBottom: `1px solid ${theme.palette.divider}`
              }}
            >
              <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ width: 1 }}>
                <Typography variant="h5" sx={{ m: 0, pl: 1.5 }}>
                  Sticky Action Bar:
                </Typography>
                <Stack direction="row" spacing={1} sx={{ px: 1.5, py: 0.75 }}>
                  <Button color="error" size="small">
                    Cancel
                  </Button>
                  <Button variant="contained" size="small">
                    Submit
                  </Button>
                </Stack>
              </Stack>
            </CardActions>
            <CardContent>
              <Grid container spacing={3} alignItems="center">
                <Grid item xs={12}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <Avatar variant="rounded" color="inherit" sx={{ bgcolor: theme.palette.secondary.main, ml: 'auto' }}>
                        <IdcardOutlined />
                      </Avatar>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <Typography variant="h3" sx={{ mb: 0 }}>
                        Personal Information
                      </Typography>
                      <Typography variant="body2" sx={{ mb: 2 }}>
                        Sticky Action Bar Lorem Ipsum is simply
                      </Typography>
                    </Grid>
                  </Grid>
                </Grid>
                <Grid item xs={12}>
                  <Divider />
                </Grid>
                <Grid item xs={12}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={3} lg={4} />
                    <Grid item xs={12} sm={9} lg={6}>
                      <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                        A. Personal Info:
                      </Typography>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter full name" />
                      <FormHelperText>Please enter your full name</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter email" />
                      <FormHelperText>Please enter your Email</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Password :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter Password" />
                      <FormHelperText>Please enter your Password</FormHelperText>
                    </Grid>
                  </Grid>
                </Grid>
                <Grid item xs={12}>
                  <Divider />
                </Grid>
                <Grid item xs={12}>
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={3} lg={4} />
                    <Grid item xs={12} sm={9} lg={6}>
                      <Typography variant="h5" component="div" sx={{ mb: 3 }}>
                        B. Educational Info:
                      </Typography>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Degree Name :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter Degree name" />
                      <FormHelperText>Please enter your Degree name</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Passing Year :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter Passing Year" />
                      <FormHelperText>Please enter Passing Year</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>College Name :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter College name" />
                      <FormHelperText>Please enter your College name</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Work Experience :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <TextField fullWidth placeholder="Enter Work Experience" />
                      <FormHelperText>Please enter your Work Experience</FormHelperText>
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '1 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Language :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <FormControlLabel control={<Checkbox defaultChecked />} label="English" />
                      <FormControlLabel control={<Checkbox />} label="French" />
                      <FormControlLabel control={<Checkbox />} label="Dutch" />
                    </Grid>
                    <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '1 !important' } }}>
                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Hobby :</InputLabel>
                    </Grid>
                    <Grid item xs={12} sm={9} lg={6}>
                      <FormControlLabel control={<Checkbox />} label="Reading" />
                      <FormControlLabel control={<Checkbox />} label="Dancing" />
                      <FormControlLabel control={<Checkbox />} label="Swimming" />
                    </Grid>
                  </Grid>
                </Grid>
              </Grid>
            </CardContent>
            <Divider />
            <CardActions>
              <Stack direction="row" spacing={1} justifyContent="center" sx={{ width: 1, px: 1.5, py: 0.75 }}>
                <Button color="error" size="small">
                  Cancel
                </Button>
                <Button variant="contained" size="small">
                  Submit
                </Button>
              </Stack>
            </CardActions>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
}

StickyActionBar.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default StickyActionBar;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/plugins/clipboard.tsx===
import { useState, ReactElement } from 'react';
import { useDispatch } from 'store';

// material-ui
import { Button, CardContent, Grid, InputAdornment, InputLabel, Stack, TextField, Tooltip } from '@mui/material';

// third-party
import { CopyToClipboard } from 'react-copy-to-clipboard';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import { openSnackbar } from 'store/reducers/snackbar';

// assets
import { CopyOutlined, ScissorOutlined } from '@ant-design/icons';

// ==============================|| PLUGIN - CLIPBOARD ||============================== //

const ClipboardPage = () => {
  const dispatch = useDispatch();

  const [text1, setText1] = useState('https://berrydashboard.io/');
  const [text2, setText2] = useState(
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'
  );
  const [text3] = useState(
    'Lorem ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga.'
  );

  return (
    <Page title="Clipboard">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <MainCard title="Copy from TextField">
            <Stack spacing={0.5}>
              <InputLabel>Enter Website</InputLabel>
              <TextField
                fullWidth
                placeholder="Website"
                type="text"
                value={text1}
                onChange={(e) => {
                  setText1(e.target.value);
                }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <CopyToClipboard
                        text={text1}
                        onCopy={() =>
                          dispatch(
                            openSnackbar({
                              open: true,
                              message: 'Text Copied',
                              variant: 'alert',
                              alert: {
                                color: 'success'
                              },
                              close: false,
                              anchorOrigin: { vertical: 'top', horizontal: 'right' },
                              transition: 'SlideLeft'
                            })
                          )
                        }
                      >
                        <Tooltip title="Copy">
                          <IconButton aria-label="Copy from another element" color="secondary" edge="end" size="large">
                            <CopyOutlined />
                          </IconButton>
                        </Tooltip>
                      </CopyToClipboard>
                    </InputAdornment>
                  )
                }}
              />
            </Stack>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={6}>
          <MainCard title="Copy from TextArea">
            <InputLabel sx={{ pb: 0.5 }}>Enter Text to Copy</InputLabel>
            <TextField
              multiline
              rows={4}
              fullWidth
              placeholder="Copy text"
              onChange={(e) => setText2(e.target.value)}
              value={text2}
              sx={{ mb: 3 }}
            />
            <CopyToClipboard
              text={text2}
              onCopy={() =>
                dispatch(
                  openSnackbar({
                    open: true,
                    message: 'Text Copied',
                    variant: 'alert',
                    alert: {
                      color: 'success'
                    },
                    close: false,
                    anchorOrigin: { vertical: 'top', horizontal: 'right' },
                    transition: 'SlideLeft'
                  })
                )
              }
            >
              <Button disabled={Boolean(!text2)} variant="contained" size="small" sx={{ mr: 1.5 }}>
                <CopyOutlined style={{ marginRight: 1 }} /> Copy
              </Button>
            </CopyToClipboard>
            <CopyToClipboard
              text={text2}
              onCopy={() => {
                setText2('');
                dispatch(
                  openSnackbar({
                    open: true,
                    message: 'Text Cut',
                    variant: 'alert',
                    alert: {
                      color: 'success'
                    },
                    close: false,
                    anchorOrigin: { vertical: 'top', horizontal: 'right' },
                    transition: 'SlideLeft'
                  })
                );
              }}
            >
              <Button disabled={Boolean(!text2)} variant="contained" size="small" color="error">
                <ScissorOutlined style={{ marginRight: 1 }} /> Cut
              </Button>
            </CopyToClipboard>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={6}>
          <MainCard
            title="Copy from Container"
            secondary={
              <CopyToClipboard
                text={text3}
                onCopy={() =>
                  dispatch(
                    openSnackbar({
                      open: true,
                      message: 'Text Copied',
                      variant: 'alert',
                      alert: {
                        color: 'success'
                      },
                      close: false,
                      anchorOrigin: { vertical: 'top', horizontal: 'right' },
                      transition: 'SlideLeft'
                    })
                  )
                }
              >
                <Tooltip title="Copy">
                  <IconButton size="large">
                    <CopyOutlined />
                  </IconButton>
                </Tooltip>
              </CopyToClipboard>
            }
          >
            <CardContent sx={{ p: 0, pb: 2.5 }}>{text3}</CardContent>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

ClipboardPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default ClipboardPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/plugins/dropzone.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { Button, FormHelperText, Grid, Stack, Typography } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import UploadAvatar from 'components/third-party/dropzone/Avatar';
import UploadSingleFile from 'components/third-party/dropzone/SingleFile';
import UploadMultiFile from 'components/third-party/dropzone/MultiFile';

// third-party
import { Formik } from 'formik';
import * as yup from 'yup';
import IconButton from 'components/@extended/IconButton';

// assets
import { UnorderedListOutlined, AppstoreOutlined } from '@ant-design/icons';

// ==============================|| PLUGINS - DROPZONE ||============================== //

const DropzonePage = () => {
  const [list, setList] = useState(false);

  return (
    <Page title="Dropzone">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <MainCard
            title="Upload Multiple File"
            secondary={
              <Stack direction="row" alignItems="center" spacing={1.25}>
                <IconButton color={list ? 'secondary' : 'primary'} size="small" onClick={() => setList(false)}>
                  <UnorderedListOutlined style={{ fontSize: '1.15rem' }} />
                </IconButton>
                <IconButton color={list ? 'primary' : 'secondary'} size="small" onClick={() => setList(true)}>
                  <AppstoreOutlined style={{ fontSize: '1.15rem' }} />
                </IconButton>
              </Stack>
            }
          >
            <Formik
              initialValues={{ files: null }}
              onSubmit={(values: any) => {
                // submit form
              }}
              validationSchema={yup.object().shape({
                files: yup.mixed().required('Avatar is a required.')
              })}
            >
              {({ values, handleSubmit, setFieldValue, touched, errors }) => (
                <form onSubmit={handleSubmit}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Stack spacing={1.5} alignItems="center">
                        <UploadMultiFile
                          showList={list}
                          setFieldValue={setFieldValue}
                          files={values.files}
                          error={touched.files && !!errors.files}
                        />
                        {touched.files && errors.files && (
                          <FormHelperText error id="standard-weight-helper-text-password-login">
                            {errors.files}
                          </FormHelperText>
                        )}
                      </Stack>
                    </Grid>
                  </Grid>
                </form>
              )}
            </Formik>
          </MainCard>
        </Grid>
        <Grid item xs={12}>
          <MainCard title="Upload Single File">
            <Formik
              initialValues={{ files: null }}
              onSubmit={(values: any) => {
                // submit form
              }}
              validationSchema={yup.object().shape({
                files: yup.mixed().required('Avatar is a required.')
              })}
            >
              {({ values, handleSubmit, setFieldValue, touched, errors }) => (
                <form onSubmit={handleSubmit}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Stack spacing={1.5} alignItems="center">
                        <UploadSingleFile setFieldValue={setFieldValue} file={values.files} error={touched.files && !!errors.files} />
                        {touched.files && errors.files && (
                          <FormHelperText error id="standard-weight-helper-text-password-login">
                            {errors.files}
                          </FormHelperText>
                        )}
                      </Stack>
                    </Grid>
                  </Grid>
                </form>
              )}
            </Formik>
          </MainCard>
        </Grid>
        <Grid item xs={12}>
          <MainCard title="Upload Avatar">
            <Formik
              initialValues={{ files: null }}
              onSubmit={(values: any) => {
                // submit form
              }}
              validationSchema={yup.object().shape({
                files: yup.mixed().required('Avatar is a required.')
              })}
            >
              {({ values, handleSubmit, setFieldValue, touched, errors }) => (
                <form onSubmit={handleSubmit}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Stack spacing={1.5} alignItems="center">
                        <UploadAvatar setFieldValue={setFieldValue} file={values.files} error={touched.files && !!errors.files} />
                        {touched.files && errors.files && (
                          <FormHelperText error id="standard-weight-helper-text-password-login">
                            {errors.files}
                          </FormHelperText>
                        )}
                        <Stack spacing={0}>
                          <Typography align="center" variant="caption" color="secondary">
                            Allowed &lsquo;image/*&rsquo;
                          </Typography>
                          <Typography align="center" variant="caption" color="secondary">
                            *.png, *.jpeg, *.jpg, *.gif
                          </Typography>
                        </Stack>
                      </Stack>
                    </Grid>
                    <Grid item xs={12}>
                      <Stack direction="row" justifyContent="flex-end" alignItems="center" spacing={2}>
                        <Button color="error" onClick={() => setFieldValue('files', null)}>
                          Cancel
                        </Button>
                        <Button type="submit" variant="contained">
                          Submit
                        </Button>
                      </Stack>
                    </Grid>
                  </Grid>
                </form>
              )}
            </Formik>
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DropzonePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DropzonePage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/plugins/editor.tsx===
import { ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Grid } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import ReactDraft from 'sections/forms/plugins/ReactDraft';
import ReactQuill from 'sections/forms/plugins/ReactQuill';

// types
import { ThemeDirection, ThemeMode } from 'types/config';

// ==============================|| PLUGINS - EDITOR ||============================== //

const Editor = () => {
  const theme = useTheme();

  return (
    <Page title="Editor">
      <Grid container spacing={3}>
        <Grid
          item
          xs={12}
          sx={{
            '& .rdw-editor-wrapper': {
              bgcolor: theme.palette.background.paper,
              border: '1px solid',
              borderColor: theme.palette.divider,
              borderRadius: '4px',
              '& .rdw-editor-main': {
                px: 2,
                py: 0.5,
                border: 'none'
              },
              '& .rdw-editor-toolbar': {
                pt: 1.25,
                border: 'none',
                borderBottom: '1px solid',
                borderColor: theme.palette.divider,
                bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.light' : 'grey.50',
                '& .rdw-option-wrapper': {
                  bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.light' : 'grey.50',
                  borderColor: theme.palette.divider
                },
                '& .rdw-dropdown-wrapper': {
                  bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.light' : 'grey.50',
                  borderColor: theme.palette.divider,
                  '& .rdw-dropdown-selectedtext': {
                    color: theme.palette.mode === ThemeMode.DARK ? theme.palette.grey[100] : 'grey.900'
                  },
                  '& .rdw-dropdownoption-default': {
                    color: theme.palette.mode === ThemeMode.DARK ? theme.palette.grey[100] : 'grey.900'
                  }
                }
              },
              ...(theme.direction === ThemeDirection.RTL && {
                '.rdw-dropdown-carettoopen': {
                  right: '10%',
                  left: 'inherit'
                },
                '.rdw-dropdown-carettoclose': {
                  right: '10%',
                  left: 'inherit'
                }
              })
            }
          }}
        >
          <MainCard title="React Draft" sx={{ overflow: 'visible', '& .rdw-editor-wrapper': { overflow: 'visible' } }}>
            <ReactDraft />
          </MainCard>
        </Grid>
        <Grid
          item
          xs={12}
          sx={{
            '& .quill': {
              bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.main' : 'grey.50',
              borderRadius: '4px',
              '& .ql-toolbar': {
                bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.light' : 'grey.100',
                borderColor: theme.palette.divider,
                borderTopLeftRadius: '4px',
                borderTopRightRadius: '4px'
              },
              '& .ql-container': {
                borderColor: `${theme.palette.divider} !important`,
                borderBottomLeftRadius: '4px',
                borderBottomRightRadius: '4px',
                '& .ql-editor': {
                  minHeight: 135
                }
              },
              ...(theme.direction === ThemeDirection.RTL && {
                '& .ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg': {
                  right: '0%',
                  left: 'inherit'
                }
              })
            }
          }}
        >
          <MainCard title="React Quill">
            <ReactQuill />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

Editor.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Editor;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/plugins/mask.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { Grid, InputLabel, Stack, TextField } from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';

// third-party
import { PatternFormat } from 'react-number-format';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// ==============================|| PLUGIN - MASK INPUT ||============================== //

const MaskPage = () => {
  const [date1, setDate1] = useState<Date | null>(new Date());
  const [date2, setDate2] = useState<Date | null>(new Date());

  const [time, setTime] = useState<Date | null>(new Date());
  const [datetime, setDatetime] = useState<Date | null>(new Date());

  return (
    <Page title="Input Mask">
      <LocalizationProvider dateAdapter={AdapterDateFns}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <MainCard title="Date">
              <Grid container alignItems="center" spacing={3}>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Insert Date 1</InputLabel>
                    <DatePicker value={date1} onChange={(newValue) => setDate1(newValue)} />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Insert Date 2</InputLabel>
                    <DatePicker value={date2} onChange={(newValue) => setDate2(newValue)} format="mm-dd-yyyy" />
                  </Stack>
                </Grid>
              </Grid>
            </MainCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <MainCard title="Time">
              <Grid container alignItems="center" spacing={3}>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Enter Time 1</InputLabel>
                    <TimePicker
                      ampm={false}
                      openTo="hours"
                      views={['hours', 'minutes', 'seconds']}
                      format="HH:mm:ss"
                      value={time}
                      onChange={(newValue) => {
                        setTime(newValue);
                      }}
                    />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Enter Time 2</InputLabel>
                    <MobileDateTimePicker
                      value={datetime}
                      onChange={(newValue) => {
                        setDatetime(newValue);
                      }}
                    />
                  </Stack>
                </Grid>
              </Grid>
            </MainCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <MainCard title="Phone no.">
              <Grid container alignItems="center" spacing={3}>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Phone Number</InputLabel>
                    <PatternFormat format="+1 (###) ###-####" mask="_" fullWidth customInput={TextField} placeholder="Phone Number" />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Contact Number</InputLabel>
                    <PatternFormat format="+91 #### ###-####" mask="_" fullWidth customInput={TextField} placeholder="Contact Number" />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Telephone with Area Code</InputLabel>
                    <PatternFormat format="(##) ####-#####" mask="_" fullWidth customInput={TextField} placeholder="Tel. with Code Area" />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>US Telephone</InputLabel>
                    <PatternFormat format="(###) ### #####" mask="_" fullWidth customInput={TextField} placeholder="US Telephone" />
                  </Stack>
                </Grid>
              </Grid>
            </MainCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <MainCard title="Network">
              <Grid container alignItems="center" spacing={3}>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Enter IP Address</InputLabel>
                    <PatternFormat format="###.###.###.###" mask="_" fullWidth customInput={TextField} placeholder="IP Address" />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Enter IPV4</InputLabel>
                    <PatternFormat format="####.####.####.####" mask="_" fullWidth customInput={TextField} placeholder="IPV4" />
                  </Stack>
                </Grid>
                <Grid item xs={12}>
                  <Stack spacing={0.5}>
                    <InputLabel>Enter IPV6</InputLabel>
                    <PatternFormat
                      format="####:####:####:#:###:####:####:####"
                      mask="_"
                      fullWidth
                      customInput={TextField}
                      placeholder="IPV6"
                    />
                  </Stack>
                </Grid>
              </Grid>
            </MainCard>
          </Grid>
        </Grid>
      </LocalizationProvider>
    </Page>
  );
};

MaskPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default MaskPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/plugins/re-captcha.tsx===
import { ReactElement } from 'react';

// material ui
import { Grid } from '@mui/material';

// third-party
import ReCAPTCHA from 'react-google-recaptcha';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// ==============================|| PLUGIN - RECAPTCHA ||============================== //

const RecaptchaPage = () => {
  const handleOnChange = () => {};

  return (
    <Page title="reCaptcha">
      <Grid container spacing={3}>
        <Grid item xs={12} md={12} lg={6}>
          <MainCard title="ReCaptcha Example">
            <ReCAPTCHA sitekey="6LdzqbcaAAAAALrGEZWQHIHUhzJZc8O-KSTdTTh_" onChange={handleOnChange} />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

RecaptchaPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default RecaptchaPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/validation.tsx===
import { ReactElement } from 'react';

// material-ui
import { Grid, Stack } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import LoginForms from 'sections/forms/validation/LoginForms';
import InstantFeedback from 'sections/forms/validation/InstantFeedback';
import RadioGroupForms from 'sections/forms/validation/RadioGroupForms';
import CheckboxForms from 'sections/forms/validation/CheckboxForms';
import SelectForms from 'sections/forms/validation/SelectForms';
import AutoCompleteForm from 'sections/forms/validation/AutoCompleteForm';
import GoogleMapAutocomplete from 'sections/forms/validation/google-map-autocomplete';

// ==============================|| FORMS VALIDATION - FORMIK ||============================== //

const FormsValidation = () => (
  <Page title="Forms Validation">
    <Grid container spacing={2.5}>
      <Grid item xs={12} md={6}>
        <LoginForms />
      </Grid>
      <Grid item xs={12} md={6}>
        <InstantFeedback />
      </Grid>
      <Grid item xs={12} md={6}>
        <RadioGroupForms />
      </Grid>
      <Grid item xs={12} md={6}>
        <CheckboxForms />
      </Grid>
      <Grid item xs={12} md={6}>
        <Stack spacing={2.5}>
          <SelectForms />
          <AutoCompleteForm />
        </Stack>
      </Grid>
      <Grid item xs={12} md={6}>
        <GoogleMapAutocomplete />
      </Grid>
    </Grid>
  </Page>
);

FormsValidation.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default FormsValidation;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/forms/wizard.tsx===
import { ReactElement } from 'react';

// material-ui
import { Grid } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import BasicWizard from 'sections/forms/wizard/basic-wizard';
import ValidationWizard from 'sections/forms/wizard/validation-wizard';

// ==============================|| FORMS WIZARD ||============================== //

const FormsWizard = () => (
  <Page title="Forms Wizard">
    <Grid container spacing={2.5} justifyContent="center">
      <Grid item xs={12} md={6} lg={7}>
        <BasicWizard />
      </Grid>
      <Grid item xs={12} md={6} lg={7}>
        <ValidationWizard />
      </Grid>
    </Grid>
  </Page>
);

FormsWizard.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default FormsWizard;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/hr-dashboard/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>

        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/index.tsx===
import { ReactElement } from 'react';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import Landing from 'sections/landing';

export default function HomePage() {
  return (
    <Page title="Landing">
      <Landing />
    </Page>
  );
}

HomePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="landing">{page}</Layout>;
};

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/integration/index.tsx===
import React from 'react';

const IntegrationPage: React.FC = () => {
  return (
    <div>
      <h1>Integration Page</h1>
      {/* Add your content here */}
    </div>
  );
};

export default IntegrationPage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/inventory/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/legal/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/login.tsx===
import { ReactElement } from 'react';

// next
import { NextPageContext } from 'next';
import NextLink from 'next/link';
import { getProviders, getCsrfToken } from 'next-auth/react';

// material-ui
import { Grid, Link, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthLogin from 'sections/auth/auth-forms/AuthLogin';

export default function SignIn({ providers, csrfToken }: any) {
  return (
    <Page title="Login">
      <AuthWrapper>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Stack direction="row" justifyContent="space-between" alignItems="baseline" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
              <Typography variant="h3">Login</Typography>
              <NextLink href="/register" passHref legacyBehavior>
                <Link variant="body1" color="primary">
                  Don&apos;t have an account?
                </Link>
              </NextLink>
            </Stack>
          </Grid>
          <Grid item xs={12}>
            <AuthLogin providers={providers} csrfToken={csrfToken} />
          </Grid>
        </Grid>
      </AuthWrapper>
    </Page>
  );
}

SignIn.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="auth">{page}</Layout>;
};

export async function getServerSideProps(context: NextPageContext) {
  const providers = await getProviders();
  const csrfToken = await getCsrfToken(context);

  return {
    props: { providers, csrfToken }
  };
}

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/maintenance/404.tsx===
import { ReactElement } from 'react';

// next
import Image from 'next/legacy/image';
import NextLink from 'next/link';

// material-ui
import { Box, Button, Grid, Stack, Typography } from '@mui/material';

// project import
import { APP_DEFAULT_PATH } from 'config';
import Layout from 'layout';
import Page from 'components/Page';

// assets
const error404 = '/assets/images/maintenance/Error404.png';
const TwoCone = '/assets/images/maintenance/TwoCone.png';

// ==============================|| ERROR 404 - MAIN ||============================== //

function Error404() {
  return (
    <Page title="404">
      <Grid
        container
        spacing={10}
        direction="column"
        alignItems="center"
        justifyContent="center"
        sx={{ minHeight: '100vh', pt: 1.5, pb: 1, overflow: 'hidden' }}
      >
        <Grid item xs={12}>
          <Stack direction="row">
            <Grid
              item
              sx={{
                position: 'relative',
                width: { xs: 250, sm: 590 },
                height: { xs: 130, sm: 300 }
              }}
            >
              <Image src={error404} alt="mantis" layout="fill" />
            </Grid>
            <Grid item sx={{ position: 'relative' }}>
              <Box sx={{ position: 'absolute', top: 60, left: -40, width: { xs: 130, sm: 390 }, height: { xs: 115, sm: 330 } }}>
                <Image src={TwoCone} alt="mantis" layout="fill" />
              </Box>
            </Grid>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <Stack spacing={2} justifyContent="center" alignItems="center">
            <Typography variant="h1">Page Not Found</Typography>
            <Typography color="textSecondary" align="center" sx={{ width: { xs: '73%', sm: '61%' } }}>
              The page you are looking was moved, removed, renamed, or might never exist!
            </Typography>
            <NextLink href={APP_DEFAULT_PATH} passHref legacyBehavior>
              <Button variant="contained">Back To Home</Button>
            </NextLink>
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
}

Error404.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default Error404;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/maintenance/500.tsx===
import { ReactElement } from 'react';

// next
import Image from 'next/legacy/image';
import NextLink from 'next/link';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Box, Button, Grid, Stack, Typography, useMediaQuery } from '@mui/material';

// project import
import { APP_DEFAULT_PATH } from 'config';
import Layout from 'layout';
import Page from 'components/Page';

// assets
const error500 = '/assets/images/maintenance/Error500.png';

// ==============================|| ERROR 500 - MAIN ||============================== //

function Error500() {
  const theme = useTheme();
  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

  return (
    <Page title="500">
      <Grid container direction="column" alignItems="center" justifyContent="center" sx={{ minHeight: '100vh' }}>
        <Grid item xs={12}>
          <Box sx={{ width: { xs: 350, sm: 396 } }}>
            <Image src={error500} alt="mantis" layout="fixed" width={matchDownSM ? 350 : 396} height={matchDownSM ? 325 : 370} />
          </Box>
        </Grid>
        <Grid item xs={12}>
          <Stack justifyContent="center" alignItems="center">
            <Typography align="center" variant={matchDownSM ? 'h2' : 'h1'}>
              Internal Server Error
            </Typography>
            <Typography color="textSecondary" variant="body2" align="center" sx={{ width: { xs: '73%', sm: '70%' }, mt: 1 }}>
              Server error 500. we fixing the problem. please try again at a later stage.
            </Typography>
            <NextLink href={APP_DEFAULT_PATH} passHref legacyBehavior>
              <Button variant="contained" sx={{ textTransform: 'none', mt: 4 }}>
                Back To Home
              </Button>
            </NextLink>
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
}

Error500.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default Error500;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/maintenance/coming-soon.tsx===
import { ReactElement } from 'react';

// next
import Image from 'next/legacy/image';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Box, Button, Grid, Stack, TextField, Typography, useMediaQuery } from '@mui/material';

// third party
import { useTimer } from 'react-timer-hook';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// assets
const coming = '/assets/images/maintenance/coming-soon.png';

// ==============================|| COMING SOON - TIMER ||============================== //

const TimerBox = ({ count, label }: { count: number; label: string }) => {
  const theme = useTheme();
  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

  return (
    <MainCard content={false} sx={{ width: { xs: 60, sm: 80 } }}>
      <Stack justifyContent="center" alignItems="center">
        <Box sx={{ py: 1.75 }}>
          <Typography variant={matchDownSM ? 'h4' : 'h2'}>{count}</Typography>
        </Box>
        <Box sx={{ p: 0.5, bgcolor: 'secondary.lighter', width: '100%' }}>
          <Typography align="center" variant="subtitle2">
            {label}
          </Typography>
        </Box>
      </Stack>
    </MainCard>
  );
};

// ==============================|| COMING SOON - MAIN ||============================== //

function ComingSoon() {
  const theme = useTheme();
  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));

  const time = new Date();
  time.setSeconds(time.getSeconds() + 3600 * 24 * 2 - 3600 * 15.5);

  const { seconds, minutes, hours, days } = useTimer({ expiryTimestamp: time });

  return (
    <Page title="Coming Soon">
      <Grid container spacing={4} direction="column" alignItems="center" justifyContent="center" sx={{ minHeight: '100vh', py: 2 }}>
        <Grid item xs={12}>
          <Image src={coming} alt="mantis" layout="fixed" width={matchDownSM ? 360 : 490} height={matchDownSM ? 310 : 420} />
        </Grid>
        <Grid item xs={12}>
          <Stack spacing={1} justifyContent="center" alignItems="center" sx={{ mt: 4 }}>
            <Typography variant="h1" align="center">
              Coming Soon
            </Typography>
            <Typography color="textSecondary" align="center">
              Something new is on its way
            </Typography>
          </Stack>
        </Grid>
        <Grid item xs={12} sx={{ width: { xs: '90%', md: '40%' } }}>
          <Stack direction="row" alignItems="center" justifyContent="center" spacing={{ xs: 1, sm: 2 }}>
            <TimerBox count={days} label="day" />
            <Typography variant="h1"> : </Typography>
            <TimerBox count={hours} label="hour" />
            <Typography variant="h1"> : </Typography>
            <TimerBox count={minutes} label="min" />
            <Typography variant="h1"> : </Typography>
            <TimerBox count={seconds} label="sec" />
          </Stack>
        </Grid>
        <Grid item xs={12} sx={{ width: { width: 380, md: '40%', lg: '30%' } }}>
          <Stack spacing={2} sx={{ mt: 2 }}>
            <Typography color="textSecondary" align="center">
              Get Nitified when we Launch
            </Typography>
            <Stack direction="row" spacing={1}>
              <TextField fullWidth placeholder="Email Address" />
              <Button variant="contained" sx={{ width: '50%' }}>
                Notify Me
              </Button>
            </Stack>
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
}

ComingSoon.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default ComingSoon;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/maintenance/under-construction.tsx===
import { ReactElement } from 'react';

// next
import Image from 'next/legacy/image';
import NextLink from 'next/link';

// material-ui
import { Box, Button, Grid, Stack, Typography } from '@mui/material';

// project import
import { APP_DEFAULT_PATH } from 'config';
import Layout from 'layout';
import Page from 'components/Page';

// assets
const construction = '/assets/images/maintenance/under-construction.svg';

// ==============================|| UNDER CONSTRUCTION - MAIN ||============================== //

function UnderConstruction() {
  return (
    <Page title="Under Construction">
      <Grid container spacing={4} direction="column" alignItems="center" justifyContent="center" sx={{ minHeight: '100vh', py: 2 }}>
        <Grid item xs={12}>
          <Box sx={{ position: 'relative', width: { xs: 300, sm: 480 }, height: { xs: 265, sm: 430 } }}>
            <Image src={construction} alt="mantis" layout="fill" />
          </Box>
        </Grid>
        <Grid item xs={12}>
          <Stack spacing={2} justifyContent="center" alignItems="center">
            <Typography variant="h1" align="center">
              Under Construction
            </Typography>
            <Typography color="textSecondary" align="center" sx={{ width: { xs: '73%', sm: '82%' } }}>
              Hey! Please check out this site later. We are doing some maintenance on it right now.
            </Typography>
            <NextLink href={APP_DEFAULT_PATH} passHref legacyBehavior>
              <Button variant="contained">Back To Home</Button>
            </NextLink>
          </Stack>
        </Grid>
      </Grid>
    </Page>
  );
}

UnderConstruction.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="blank">{page}</Layout>;
};

export default UnderConstruction;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/marketing/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/pricing.tsx===
import { useState, Fragment, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import { Button, Grid, List, ListItem, ListItemIcon, ListItemText, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// assets
import { CheckOutlined } from '@ant-design/icons';

// plan list
const plans = [
  {
    active: false,
    title: 'Developer',
    description: 'For small teams or projects',

    price: 0,
    //help me decide which permission to show are appropriate for this plan
    permission: [0, 1, 2, 3, 4, 5]
  },
  {
    active: true,
    title: 'Professional',
    description: 'For growing businesses',

    price: 49,
    //help me decide which permission to show are appropriate for this plan
    permission: [0, 1, 2, 3, 4, 5, 6, 7]
  },
  {
    active: false,
    title: 'Enterprise',
    description: 'For large businesses',

    price: -1,
    //help me decide which permission to show are appropriate for this plan
    permission: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
  }
];

// productivity conversational platform
const planList = [
  '1 Seat', // 0
  '1 Project', // 1
  '1 Workspace', // 2
  'Unlimited Messages', // 3
  'Unlimited Storage', // 4
  'Unlimited Data', // 5
  '180+ Integrations', // 6
  'Unlimited Users', // 7
  'Email Support', // 8
  'Slack Integration', // 9
  'Data Warehouse', // 10
  'SSO via SAML', // 11
  'API Access', // 12
  'AI Tooling RESTful endpoints', // 13
  'On-Premise LLM' // 14
];

const Pricing = () => {
  const theme = useTheme();
  const [timePeriod, setTimePeriod] = useState(true);

  const priceListDisable = {
    opacity: 0.4,
    '& >div> svg': {
      fill: theme.palette.secondary.light
    }
  };

  return (
    <Page title="Pricing">
      <Grid container spacing={3} paddingTop={10}>
        <Grid item container spacing={3} xs={12}>
          {plans.map((plan, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <MainCard sx={{ pt: 1.75 }}>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Stack direction="row" spacing={2} textAlign="center">
                      {plan.icon}
                      <Typography variant="h4">{plan.title}</Typography>
                    </Stack>
                  </Grid>
                  <Grid item xs={12}>
                    <Typography>{plan.description}</Typography>
                  </Grid>
                  <Grid item xs={12}>
                    {plan.price < 0 ? (
                      <Typography variant="h2">Contact Us</Typography>
                    ) : (
                      <Stack direction="row" spacing={1} alignItems="flex-end">
                        {timePeriod && <Typography variant="h2">${plan.price}</Typography>}
                        {!timePeriod && <Typography variant="h2">${plan.price * 12 - 99}</Typography>}
                        <Typography variant="h6" color="textSecondary">
                          /seat
                        </Typography>
                      </Stack>
                    )}
                  </Grid>
                  <Grid item xs={12}>
                    <Button variant={plan.active ? 'contained' : 'outlined'} fullWidth>
                      Order Now
                    </Button>
                  </Grid>
                  <Grid item xs={12}>
                    <List
                      sx={{
                        m: 0,
                        p: 0,
                        '&> li': {
                          px: 0,
                          py: 0.625,
                          '& svg': {
                            fill: theme.palette.success.dark
                          }
                        }
                      }}
                      component="ul"
                    >
                      {planList.map((list, i) => (
                        <Fragment key={i}>
                          <ListItem sx={!plan.permission.includes(i) ? priceListDisable : {}} divider>
                            <ListItemIcon>
                              <CheckOutlined />
                            </ListItemIcon>
                            <ListItemText primary={list} />
                          </ListItem>
                        </Fragment>
                      ))}
                    </List>
                  </Grid>
                </Grid>
              </MainCard>
            </Grid>
          ))}
        </Grid>
      </Grid>
    </Page>
  );
};

Pricing.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant={'blank'}>{page}</Layout>;
};

export default Pricing;
===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/register.tsx===
import { ReactElement } from 'react';

// next
import NextLink from 'next/link';
import { NextPageContext } from 'next';
import { getProviders, getCsrfToken } from 'next-auth/react';

// material-ui
import { Grid, Link, Stack, Typography } from '@mui/material';

// project import
import Layout from 'layout';
import Page from 'components/Page';
import AuthWrapper from 'sections/auth/AuthWrapper';
import AuthRegister from 'sections/auth/auth-forms/AuthRegister';

// ================================|| REGISTER ||================================ //

const Register = ({ providers, csrfToken }: any) => (
  <Page title="Register">
    <AuthWrapper>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Stack direction="row" justifyContent="space-between" alignItems="baseline" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>
            <Typography variant="h3">Sign up</Typography>
            <NextLink href="/login" passHref legacyBehavior>
              <Link variant="body1" color="primary">
                Already have an account?
              </Link>
            </NextLink>
          </Stack>
        </Grid>
        <Grid item xs={12}>
          <AuthRegister providers={providers} csrfToken={csrfToken} />
        </Grid>
      </Grid>
    </AuthWrapper>
  </Page>
);

export async function getServerSideProps(context: NextPageContext) {
  const providers = await getProviders();
  const csrfToken = await getCsrfToken(context);
  return {
    props: { providers, csrfToken }
  };
}

Register.getLayout = function getLayout(page: ReactElement) {
  return <Layout variant="auth">{page}</Layout>;
};

export default Register;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/sales/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';
import SalesBanner from 'sections/dashboard/analytics/SalesBanner';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <SalesBanner />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Daily Sales Activity" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Lead Conversion Rates" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Monthly Sales Trend" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/sample-page.tsx===
import { ReactElement } from 'react';

// material-ui
import { Typography } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';

// ==============================|| SAMPLE PAGE ||============================== //

const SamplePage = () => (
  <Page title="Sample Page">
    <MainCard title="Sample Card">
      <Typography variant="body2">
        Lorem ipsum dolor sit amen, consenter nipissing eli, sed do elusion tempos incident ut laborers et doolie magna alissa. Ut enif ad
        minim venice, quin nostrum exercitation illampu laborings nisi ut liquid ex ea commons construal. Duos aube grue dolor in
        reprehended in voltage veil esse colum doolie eu fujian bulla parian. Exceptive sin ocean cuspidate non president, sunk in culpa qui
        officiate descent molls anim id est labours.
      </Typography>
    </MainCard>
  </Page>
);

SamplePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default SamplePage;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/shipping/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/support/index.tsx===
import { useState, ReactElement } from 'react';

// material-ui
import { useTheme } from '@mui/material/styles';
import {
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
  Typography
} from '@mui/material';

// project import
import Layout from 'layout';

import MainCard from 'components/MainCard';
import IconButton from 'components/@extended/IconButton';
import AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';

import IncomeChart from 'sections/dashboard/analytics/IncomeChart';
import MarketingCardChart from 'sections/dashboard/analytics/MarketingCardChart';
import OrdersCardChart from 'sections/dashboard/analytics/OrdersCardChart';
import ReportChart from 'sections/dashboard/analytics/ReportChart';
import SalesCardChart from 'sections/dashboard/analytics/SalesCardChart';
import UsersCardChart from 'sections/dashboard/analytics/UsersCardChart';
import ReaderCard from 'sections/dashboard/analytics/ReaderCard';

// assets
import { DownloadOutlined, CaretDownOutlined } from '@ant-design/icons';
import Page from 'components/Page';
import InvokeCalls from 'sections/dashboard/analytics/InvokeCalls';
import PromptFeatureList from 'sections/dashboard/analytics/PromptFeatureList';
import useConfig from 'hooks/useConfig';
import ApexPieChart from 'sections/charts/apexchart/ApexPieChart';

// sales report status

// ==============================|| DASHBOARD - ANALYTICS ||============================== //

const DashboardAnalytics = () => {
  const theme = useTheme();
  const config = useConfig();
  const [slot, setSlot] = useState('week');
  const [quantity, setQuantity] = useState('By volume');

  const handleQuantity = (e: SelectChangeEvent) => {
    setQuantity(e.target.value as string);
  };

  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {
    if (newAlignment) setSlot(newAlignment);
  };

  if (!config) return null;

  return (
    <Page title="Analytic Dashboard">
      <Grid container rowSpacing={4.5} columnSpacing={3}>
        <Grid item xs={12}>
          <Stack spacing={3}>
            <ReaderCard />
          </Stack>
        </Grid>
        {/* row 1 */}
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Invocations" count="78,250" percentage={70.5}>
            <UsersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Sessions" count="18,800" percentage={27.4} isLoss color="warning">
            <OrdersCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Functions Called" count="35,078" percentage={27.4} isLoss color="warning">
            <SalesCardChart />
          </AnalyticsDataCard>
        </Grid>
        <Grid item xs={12} sm={6} md={4} lg={3}>
          <AnalyticsDataCard title="Total Models" count="23" percentage={70.5}>
            <MarketingCardChart />
          </AnalyticsDataCard>
        </Grid>

        <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />

        {/* row 2 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Invocations</Typography>
            </Grid>
          </Grid>
          <MainCard content={false} sx={{ mt: 1.5 }}>
            <Grid item>
              <Grid container>
                <Grid item xs={12} sm={6}>
                  <Stack sx={{ ml: 2, mt: 3 }} alignItems={{ xs: 'center', sm: 'flex-start' }}>
                    <Stack direction="row" alignItems="center">
                      <CaretDownOutlined style={{ color: theme.palette.error.main, paddingRight: '4px' }} />
                      <Typography color={theme.palette.error.main}>112,900 (45.67%)</Typography>
                    </Stack>
                    <Typography color="textSecondary" sx={{ display: 'block' }}>
                      Compare to : 01 Dec 2021-08 Jan 2022
                    </Typography>
                  </Stack>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Stack
                    direction="row"
                    spacing={1}
                    alignItems="center"
                    justifyContent={{ xs: 'center', sm: 'flex-end' }}
                    sx={{ mt: 3, mr: 2 }}
                  >
                    <ToggleButtonGroup exclusive onChange={handleChange} size="small" value={slot}>
                      <ToggleButton disabled={slot === 'week'} value="week" sx={{ px: 2, py: 0.5 }}>
                        Week
                      </ToggleButton>
                      <ToggleButton disabled={slot === 'month'} value="month" sx={{ px: 2, py: 0.5 }}>
                        Month
                      </ToggleButton>
                    </ToggleButtonGroup>
                    <Select value={quantity} onChange={handleQuantity} size="small">
                      <MenuItem value="By volume">By Volume</MenuItem>
                      <MenuItem value="By margin">By Margin</MenuItem>
                      <MenuItem value="By sales">By Sales</MenuItem>
                    </Select>
                    <IconButton
                      size="small"
                      sx={{
                        border: `1px solid ${theme.palette.grey[400]}`,
                        '&:hover': { backgroundColor: 'transparent' }
                      }}
                    >
                      <DownloadOutlined style={{ color: theme.palette.grey[900] }} />
                    </IconButton>
                  </Stack>
                </Grid>
              </Grid>
            </Grid>
            <Box sx={{ pt: 1 }}>
              <ApexPieChart />
            </Box>
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <InvokeCalls />
        </Grid>

        {/* row 3 */}
        <Grid item xs={12} md={7} lg={8}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Prompt Features</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <PromptFeatureList />
          </MainCard>
        </Grid>
        <Grid item xs={12} md={5} lg={4}>
          <Grid container alignItems="center" justifyContent="space-between">
            <Grid item>
              <Typography variant="h5">Analytics Report</Typography>
            </Grid>
            <Grid item />
          </Grid>
          <MainCard sx={{ mt: 2 }} content={false}>
            <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>
              <ListItemButton divider>
                <ListItemText primary="Company Finance Growth" />
                <Typography variant="h5">+45.14%</Typography>
              </ListItemButton>
              <ListItemButton divider>
                <ListItemText primary="Company Expenses Ratio" />
                <Typography variant="h5">0.58%</Typography>
              </ListItemButton>
              <ListItemButton>
                <ListItemText primary="Business Risk Cases" />
                <Typography variant="h5">Low</Typography>
              </ListItemButton>
            </List>
            <ReportChart />
          </MainCard>
        </Grid>
      </Grid>
    </Page>
  );
};

DashboardAnalytics.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default DashboardAnalytics;

===end===
===filename:/Users/jasonst.cyr/Developer/morrigu/MorriguAI/src/pages/usage/index.tsx===
import { ReactElement, useEffect, useState } from 'react';
import { useTheme } from '@mui/material/styles';

// material-ui
import { Grid, Typography, Box, LinearProgress, Stack } from '@mui/material';

// project imports
import Layout from 'layout';
import Page from 'components/Page';
import MainCard from 'components/MainCard';
import ApexAreaChart from 'sections/charts/apexchart/ApexAreaChart';

// ==============================|| USAGE PAGE ||============================== //

const UsagePage = () => {
  const theme = useTheme();
  const [usage, setUsage] = useState({
    totalRequests: 0,
    lastMonthRequests: 0,
    averageRequestTime: 0,
    totalCost: 0,
    requestHistory: []
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Fetch usage data from the API
    const fetchUsageData = async () => {
      try {
        const response = await fetch('/api/usage');
        const data = await response.json();
        setUsage(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching usage data:', error);
        setLoading(false);
      }
    };

    fetchUsageData();
  }, []);

  return (
    <Page title="Usage">
      <Grid container spacing={2}>
        {loading ? (
          <Grid item xs={12}>
            <Box sx={{ width: '100%' }}>
              <LinearProgress />
            </Box>
          </Grid>
        ) : (
          <>
            <Grid item xs={12} md={6}>
              <MainCard title="Total Requests">
                <Typography variant="h4">{usage.totalRequests}</Typography>
                <Typography variant="body2">Total number of requests made to the LLM.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12} md={6}>
              <MainCard title="Last Month Requests">
                <Typography variant="h4">{usage.lastMonthRequests}</Typography>
                <Typography variant="body2">Number of requests made to the LLM in the last month.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12} md={6}>
              <MainCard title="Average Request Time">
                <Typography variant="h4">{usage.averageRequestTime} ms</Typography>
                <Typography variant="body2">Average time taken to process a request by the LLM.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12} md={6}>
              <MainCard title="Total Cost">
                <Typography variant="h4">${usage.totalCost.toFixed(2)}</Typography>
                <Typography variant="body2">Total cost incurred for using the LLM.</Typography>
              </MainCard>
            </Grid>
            <Grid item xs={12}>
              <MainCard title="Request History">
                <Stack spacing={2}>
                  <ApexAreaChart
                    series={[
                      {
                        name: 'Requests',
                        data: usage.requestHistory.map((record) => record.count)
                      }
                    ]}
                  />
                </Stack>
              </MainCard>
            </Grid>
          </>
        )}
      </Grid>
    </Page>
  );
};

UsagePage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default UsagePage;

===end===
